module Xml-l1 =
let LOWERCASE
  =
  "a"
    | "b"
    | "c"
    | "d"
    | "e"
    | "f"
    | "g"
    | "h"
    | "i"
    | "j"
    | "k"
    | "l"
    | "m"
    | "n"
    | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" 

let UPPERCASE
  =
  "A"
    | "B"
    | "C"
    | "D"
    | "E"
    | "F"
    | "G"
    | "H"
    | "I"
    | "J"
    | "K"
    | "L"
    | "M"
    | "N"
    | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" 

let to_upper_or_lower
  : (lens in LOWERCASE <=> UPPERCASE) =
  synth LOWERCASE <=> UPPERCASE 

let DIGIT
  =
  "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" 

let NUMBER = DIGIT . DIGIT*  

let WSP = (" " | "\n" | "\t")*  

let NONEMPTY_WSP = (" " | "\n" | "\t") . (" " | "\n" | "\t")*  

let SAMELINE_WSP_CHAR = " " | "\t" | "\\\n" 

let SAMELINE_WSP = SAMELINE_WSP_CHAR*  

let NONEMPTY_SAMELINE_WSP = SAMELINE_WSP_CHAR . SAMELINE_WSP_CHAR*  

let X = UPPERCASE 

let DELIMITED_STRING
  =
  (UPPERCASE | LOWERCASE | DIGIT | "\\\"" | " ")*  

let COMMENT_KVP = "\"#comment\" = \"" . DELIMITED_STRING . "\"" 

let TEXTCHAR = UPPERCASE | LOWERCASE | " " | "\n" | DIGIT 

let TEXT = TEXTCHAR*  

let NONEMPTYTEXT = TEXTCHAR . TEXTCHAR*  

let NAME
  =
  (UPPERCASE | LOWERCASE | DIGIT) . (UPPERCASE | LOWERCASE | DIGIT)*  

let XML_ATTRIBUTE_KVP = NAME . "=\"" . TEXT . "\"" 

test matches_cex XML_ATTRIBUTE_KVP "attribute=\"myattribute\"" = true

let XML_ATTRIBUTE_LIST = (" " . XML_ATTRIBUTE_KVP)*  

let XML_ELEMENT = "<" . NAME . XML_ATTRIBUTE_LIST . ">" 

test matches_cex XML_ELEMENT "<hello attribute=\"myattribute\">" = true

let XML_END_ELEMENT = "</" . NAME . ">" 

test matches_cex XML_END_ELEMENT "</hello>" = true

let XML_CONTENTLESS_ELEMENT
  =
  "<" . NAME . XML_ATTRIBUTE_LIST . "/>" 

test matches_cex
  XML_CONTENTLESS_ELEMENT
  "<hello attribute=\"myattribute\"/>" = true

let XML_INNER_ELEMENT
  =
  XML_ELEMENT . TEXT . XML_END_ELEMENT | XML_CONTENTLESS_ELEMENT 

test matches_cex XML_INNER_ELEMENT "<hello></hello>" = true

test matches_cex XML_INNER_ELEMENT "<hello/>" = true

let XML_SECONDLEVEL_ELEMENT
  =
  XML_ELEMENT . (TEXT . XML_INNER_ELEMENT)*  . TEXT . XML_END_ELEMENT
    | XML_CONTENTLESS_ELEMENT 

test matches_cex
  XML_SECONDLEVEL_ELEMENT
  "<hello attribute=\"myattr\">text<goodbye a=\"b\"/><adios language=\"spanish\">tt123</adios>test</hello>" = true

let XML_THIRDLEVEL_ELEMENT
  =
  XML_ELEMENT . (TEXTCHAR | XML_SECONDLEVEL_ELEMENT)*  . XML_END_ELEMENT 

test matches_cex
  XML_THIRDLEVEL_ELEMENT
  "<hithere><hello attribute=\"myattr\">text<goodbye a=\"b\"/><adios language=\"spanish\">tt123</adios>test</hello><test/><testing at2t=\"wer2\"/></hithere>" = true

let SINGLE_ATTRIBUTE_DICT = "{\"" . NAME . "\"=\"" . TEXT . "\"}" 

test matches_cex SINGLE_ATTRIBUTE_DICT "{\"attribute\"=\"value\"}" = true

let FULL_ATTRIBUTE_DICT
  =
  "{\"#attribute\"" . SINGLE_ATTRIBUTE_DICT . SINGLE_ATTRIBUTE_DICT*  . "}" 

test matches_cex
  FULL_ATTRIBUTE_DICT
  "{\"#attribute\"{\"attribute\"=\"value\"}}" = true

let ENDBRACE_DICT = "{\"endbrace\"=\"" . NAME . "\"}" 

test matches_cex ENDBRACE_DICT "{\"endbrace\"=\"test\"}" = true

let NONEMPTY_TEXT_DICT = "{\"#text\"=\"" . NONEMPTYTEXT . "\"}" 

test matches_cex NONEMPTY_TEXT_DICT "{\"#text\"=\"text\"}" = true

let INNER_XML_DICT
  =
  "{"
    . "\""
    . NAME
    . "\""
    . (FULL_ATTRIBUTE_DICT | "")
    . ((NONEMPTY_TEXT_DICT | "") . ENDBRACE_DICT | "") . "}" 

test matches_cex INNER_XML_DICT "{\"element\"}" = true

let SECONDLEVEL_XML_DICT
  =
  "{"
    . "\""
    . NAME
    . "\""
    . (FULL_ATTRIBUTE_DICT | "")
    . (((NONEMPTY_TEXT_DICT | "") . INNER_XML_DICT)* 
         . (NONEMPTY_TEXT_DICT | "") . ENDBRACE_DICT
         | "")
    . "}" 

test matches_cex SECONDLEVEL_XML_DICT "{\"element\"}" = true

test matches_cex
  SECONDLEVEL_XML_DICT
  "{\"element\"{\"#attribute\"{\"attribute\"=\"value\"}}}" = true

test matches_cex
  SECONDLEVEL_XML_DICT
  "{\"element\"{\"#attribute\"{\"attribute\"=\"value\"}}{\"endbrace\"=\"test\"}}" = true

test matches_cex
  SECONDLEVEL_XML_DICT
  "{\"element\"{\"#attribute\"{\"attribute\"=\"value\"}}{\"element\"}{\"endbrace\"=\"test\"}}" = true

let THIRDLEVEL_XML_DICT
  =
  "{"
    . "\""
    . NAME
    . "\""
    . (FULL_ATTRIBUTE_DICT | "")
    . (((NONEMPTY_TEXT_DICT | "") . SECONDLEVEL_XML_DICT)* 
         . (NONEMPTY_TEXT_DICT | "") . ENDBRACE_DICT
         | "")
    . "}" 

let map_inner
  : (lens in XML_INNER_ELEMENT <=> INNER_XML_DICT) =
  synth XML_INNER_ELEMENT <=> INNER_XML_DICT 