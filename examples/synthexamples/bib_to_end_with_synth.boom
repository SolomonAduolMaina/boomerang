module Bib_to_end = 

let title_case : regexp = [A-Z] . [a-zA-Z]*

let full_name : regexp = title_case

let initial : regexp = [A-Z] . "."

let name : regexp = full_name | initial

let comma_name : regexp = full_name . ", " . (name | name . " " . name)

let bib_comma_names : regexp = comma_name | (comma_name . " and ")* . comma_name

let end_comma_names : regexp = 
"%A " . comma_name |  ("%A " . comma_name . "\n")* . ("%A " . comma_name)

let space_name : regexp = full_name . " " . (name | name . " " . name)

let bib_space_names : regexp = space_name | (space_name . " and ")* . space_name

let end_space_names : regexp = 
"%A " . space_name |  ("%A " . space_name . "\n")* . ("%A " . space_name)

let bib_author : canonizer = "author = {" . squash bib_space_names -> bib_comma_names using 
(get (synth bib_space_names <=> bib_comma_names)) . "}"

let end_author : canonizer = squash end_space_names -> end_comma_names using 
(get (synth end_space_names <=> end_comma_names))

let bib_title : regexp = "title = {" . (title_case . " ")* . title_case . "}"

let end_title : regexp = "%T " . (title_case . " ")* . title_case

let bib_ignore_wsp : canonizer =  (project ("," . [ \n\t\r]* ) -> ",\n") 

let end_ignore_wsp : canonizer =  (project [ \n\t\r]* -> "\n") 

let bib_perm : canonizer = perm ([a-z]+, bib_author, bib_title) with bib_ignore_wsp

let end_perm : canonizer = 
perm ("%0 Book", ("%F " . [a-z]+), end_author, end_title) with end_ignore_wsp

let bibtex : canonizer = "@book{" . bib_perm . bib_ignore_wsp . "}"

let endnote : canonizer = end_perm 

let bib_record1 = 
"@book{conway, title = {Regular Algebra And Finite Machines},
author = {Conway J. H. and Conway H. J.}, }"

let bib_record2 = 
"@book{conway, title = {Regular Algebra And Finite Machines},
author = {Conway J. H. and Conway H. J.}, }"

let bib_to_end = synth bibtex <=> endnote 

test get bib_to_end bib_record1 = get bib_to_end bib_record2
