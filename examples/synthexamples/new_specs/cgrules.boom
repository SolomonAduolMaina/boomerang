module Cgrules =
let LOWERCASE
  =
  "a"
    | "b"
    | "c"
    | "d"
    | "e"
    | "f"
    | "g"
    | "h"
    | "i"
    | "j"
    | "k"
    | "l"
    | "m"
    | "n"
    | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" 

let UPPERCASE
  =
  "A"
    | "B"
    | "C"
    | "D"
    | "E"
    | "F"
    | "G"
    | "H"
    | "I"
    | "J"
    | "K"
    | "L"
    | "M"
    | "N"
    | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" 

let to_upper_or_lower
  : (lens in LOWERCASE <=> UPPERCASE) =
  synth LOWERCASE <=> UPPERCASE 

let DIGIT
  =
  "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" 

let NUMBER = DIGIT . DIGIT*  

let WSP = (" " | "\n" | "\t")*  

let NONEMPTY_WSP = (" " | "\n" | "\t") . (" " | "\n" | "\t")*  

let SAMELINE_WSP_CHAR = " " | "\t" | "\\\n" 

let SAMELINE_WSP = SAMELINE_WSP_CHAR*  

let NONEMPTY_SAMELINE_WSP = project (SAMELINE_WSP_CHAR . SAMELINE_WSP_CHAR*  ) -> " "

let QUOTELESS_STRING
  =
  (UPPERCASE
     | LOWERCASE
     | DIGIT
     | " "
     | "'" | "_" | ":" | "/" | "-" | "." | "=" | "+" | "[" | "]" | "(" | ")")*  

let STRING_COMPONENT
  =
  UPPERCASE
    | LOWERCASE
    | DIGIT
    | "\""
    | " "
    | "'"
    | "_"
    | ":"
    | "/"
    | "-" | "." | "=" | "+" | "[" | "]" | "(" | ")" | ";" | "!" | "*" | "," 

let STRING = STRING_COMPONENT*  

let NONEMPTY_STRING = STRING_COMPONENT . STRING_COMPONENT*  

let DELIMITED_STRING
  =
  (UPPERCASE
     | LOWERCASE
     | DIGIT
     | "\\\""
     | " "
     | "'"
     | "_"
     | ":"
     | "/"
     | "-" | "." | "=" | "+" | "[" | "]" | "(" | ")" | ";" | "!" | "*" | ",")*  

let string_to_delimited
  : (lens in STRING <=> DELIMITED_STRING) =
  synth STRING <=> DELIMITED_STRING 

let NO_STAR_STRING_COMPONENT
  =
  UPPERCASE
    | LOWERCASE
    | DIGIT
    | "\""
    | " "
    | "'"
    | "_"
    | ":"
    | "/" | "-" | "." | "=" | "+" | "[" | "]" | "(" | ")" | ";" | "!" | "," 

let NO_STAR_DELIMITED_STRING_COMPONENT
  =
  UPPERCASE
    | LOWERCASE
    | DIGIT
    | "\\\""
    | " "
    | "'"
    | "_"
    | ":"
    | "/" | "-" | "." | "=" | "+" | "[" | "]" | "(" | ")" | ";" | "!" | "," 

let STARLESS_STRING = NO_STAR_STRING_COMPONENT*  

let STARLESS_DELIMITED_STRING
  =
  NO_STAR_DELIMITED_STRING_COMPONENT*  

let starless_string_to_delimited
  : (lens in STARLESS_STRING <=> STARLESS_DELIMITED_STRING) =
  synth STARLESS_STRING <=> STARLESS_DELIMITED_STRING 

let COMMENT = "# " . STRING 

let COMMENT_DICT = "{\"#comment\"=\"" . DELIMITED_STRING . "\"}" 

let comment_map
  : (lens in COMMENT <=> COMMENT_DICT) =
  synth COMMENT <=> COMMENT_DICT 

let EMPTYDICT = "{}" 

let NON_WSP_CHAR
  =
  LOWERCASE
    | UPPERCASE
    | "_" | "." | "-" | ":" | "/" | "+" | DIGIT | "," | "=" | "*" | "%" 

let ENV_VAR = (UPPERCASE | "_") . (UPPERCASE | "_")*  

let WORD = NON_WSP_CHAR . NON_WSP_CHAR*  

let SIMPLE_WORD
  =
  (LOWERCASE | "-" | "_" | UPPERCASE | DIGIT | ".") . (LOWERCASE | "-" | "_" | UPPERCASE | DIGIT | ".")*  

let FOLDER
  =
  (("" | "/") . (SIMPLE_WORD . "/")*  . SIMPLE_WORD . ("" | "/")) | "${" . ENV_VAR . "}" 

let MULTILINE_COMMENT
  =
  "/*" . STARLESS_STRING . ("\n" . STARLESS_STRING)*  . "*/" 

let MULTILINE_COMMENT_DICT
  =
  "{\"#mcomment\""
    . "{\"string\"=\"" . STARLESS_DELIMITED_STRING . "\"}"
    . ("{\"string\"=\"" . STARLESS_DELIMITED_STRING . "\"}")* 
    . "}" 

let multiline_comment_map
  : (lens in MULTILINE_COMMENT <=> MULTILINE_COMMENT_DICT) =
  synth MULTILINE_COMMENT <=> MULTILINE_COMMENT_DICT 

let NON_WSP_NON_PERCENT_NON_AT_CHAR
  =
  LOWERCASE
    | UPPERCASE | "_" | "." | "-" | ":" | "/" | "+" | DIGIT | "," | "=" | "*" 

let USERNAME
  =
  NON_WSP_NON_PERCENT_NON_AT_CHAR . NON_WSP_NON_PERCENT_NON_AT_CHAR*  

let GROUPNAME = "@" . USERNAME 

let USER_OR_GROUP_RECORD
  =
  (USERNAME | GROUPNAME)
    . NONEMPTY_SAMELINE_WSP
    . WORD
    . NONEMPTY_SAMELINE_WSP
    . WORD
    . "\n"
    . ("%"
         . NONEMPTY_SAMELINE_WSP . WORD . NONEMPTY_SAMELINE_WSP . WORD . "\n")*  

let USER_OR_GROUP_RECORD_DICT
  =
  "{\""
    . ("user" | "group")
    . "\"=\""
    . USERNAME
    . "\""
    . "{"
    . "\"" . WORD . "\"=\"" . WORD . "\"" . "}"
    . ("{"
         . "\"" . WORD . "\"=\"" . WORD . "\"" . "}")* 
    . "}" 

let user_or_group_record_map
  : (lens in USER_OR_GROUP_RECORD <=> USER_OR_GROUP_RECORD_DICT) =
  synth USER_OR_GROUP_RECORD <=> USER_OR_GROUP_RECORD_DICT 

let RULES_CONF = (USER_OR_GROUP_RECORD | COMMENT . "\n" | "\n")*  

let RULES_DICT
  =
  "{" . (USER_OR_GROUP_RECORD_DICT | COMMENT_DICT | "{ }")*  . "}" 

let rules_map
  : (lens in RULES_CONF <=> RULES_DICT) =
  synth RULES_CONF <=> RULES_DICT 