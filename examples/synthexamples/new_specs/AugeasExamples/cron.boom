module Cron =
let LOWERCASE
  =
  "a"
    | "b"
    | "c"
    | "d"
    | "e"
    | "f"
    | "g"
    | "h"
    | "i"
    | "j"
    | "k"
    | "l"
    | "m"
    | "n"
    | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" 

let UPPERCASE
  =
  "A"
    | "B"
    | "C"
    | "D"
    | "E"
    | "F"
    | "G"
    | "H"
    | "I"
    | "J"
    | "K"
    | "L"
    | "M"
    | "N"
    | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" 

let to_upper_or_lower
  : (lens in LOWERCASE <=> UPPERCASE) =
  synth LOWERCASE <=> UPPERCASE 

let DIGIT
  =
  "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" 

let NUMBER = DIGIT . DIGIT*  

let WSP = (" " | "\n" | "\t")*  

let NONEMPTY_WSP = (" " | "\n" | "\t") . (" " | "\n" | "\t")*  

let SAMELINE_WSP_CHAR = " " | "\t" | "\\\n" 

let SAMELINE_WSP = SAMELINE_WSP_CHAR*  

let NONEMPTY_SAMELINE_WSP = SAMELINE_WSP_CHAR . SAMELINE_WSP_CHAR*  

let QUOTELESS_STRING
  =
  (UPPERCASE
     | LOWERCASE
     | DIGIT
     | " "
     | "'" | "_" | ":" | "/" | "-" | "." | "=" | "+" | "[" | "]" | "(" | ")")*  

let STRING_COMPONENT
  =
  UPPERCASE
    | LOWERCASE
    | DIGIT
    | "\""
    | " "
    | "'"
    | "_"
    | ":"
    | "/"
    | "-" | "." | "=" | "+" | "[" | "]" | "(" | ")" | ";" | "!" | "*" | "," 

let STRING = STRING_COMPONENT*  

let NONEMPTY_STRING = STRING_COMPONENT . STRING_COMPONENT*  

let DELIMITED_STRING
  =
  (UPPERCASE
     | LOWERCASE
     | DIGIT
     | "\\\""
     | " "
     | "'"
     | "_"
     | ":"
     | "/"
     | "-" | "." | "=" | "+" | "[" | "]" | "(" | ")" | ";" | "!" | "*" | ",")*  

let string_to_delimited
  : (lens in STRING <=> DELIMITED_STRING) =
  synth STRING <=> DELIMITED_STRING 

let NO_STAR_STRING_COMPONENT
  =
  UPPERCASE
    | LOWERCASE
    | DIGIT
    | "\""
    | " "
    | "'"
    | "_"
    | ":"
    | "/" | "-" | "." | "=" | "+" | "[" | "]" | "(" | ")" | ";" | "!" | "," 

let NO_STAR_DELIMITED_STRING_COMPONENT
  =
  UPPERCASE
    | LOWERCASE
    | DIGIT
    | "\\\""
    | " "
    | "'"
    | "_"
    | ":"
    | "/" | "-" | "." | "=" | "+" | "[" | "]" | "(" | ")" | ";" | "!" | "," 

let STARLESS_STRING = NO_STAR_STRING_COMPONENT*  

let STARLESS_DELIMITED_STRING
  =
  NO_STAR_DELIMITED_STRING_COMPONENT*  

let starless_string_to_delimited
  : (lens in STARLESS_STRING <=> STARLESS_DELIMITED_STRING) =
  synth STARLESS_STRING <=> STARLESS_DELIMITED_STRING 

let COMMENT = "# " . STRING 

let COMMENT_DICT = "{\"#comment\"=\"" . DELIMITED_STRING . "\"}" 

let comment_map
  : (lens in COMMENT <=> COMMENT_DICT) =
  synth COMMENT <=> COMMENT_DICT 

let EMPTYDICT = "{}" 

let NON_WSP_CHAR
  =
  LOWERCASE
    | UPPERCASE
    | "_" | "." | "-" | ":" | "/" | "+" | DIGIT | "," | "=" | "*" | "%" 

let ENV_VAR = (UPPERCASE | "_") . (UPPERCASE | "_")*  

let WORD = NON_WSP_CHAR . NON_WSP_CHAR*  

let SIMPLE_WORD
  =
  (LOWERCASE | "-" | "_" | UPPERCASE | DIGIT | ".") . (LOWERCASE | "-" | "_" | UPPERCASE | DIGIT | ".")*  

let FOLDER
  =
  (("" | "/") . (SIMPLE_WORD . "/")*  . SIMPLE_WORD . ("" | "/")) | "${" . ENV_VAR . "}" 

let MULTILINE_COMMENT
  =
  "/*" . STARLESS_STRING . ("\n" . STARLESS_STRING)*  . "*/" 

let MULTILINE_COMMENT_DICT
  =
  "{\"#mcomment\""
    . "{\"string\"=\"" . STARLESS_DELIMITED_STRING . "\"}"
    . ("{\"string\"=\"" . STARLESS_DELIMITED_STRING . "\"}")* 
    . "}" 

let multiline_comment_map
  : (lens in MULTILINE_COMMENT <=> MULTILINE_COMMENT_DICT) =
  synth MULTILINE_COMMENT <=> MULTILINE_COMMENT_DICT 

let INDENT = project ((" " | "\t")* ) -> ""

let INDENT_REQ = project ((" " | "\t") . (" " | "\t")*  ) -> " "

let ALPHANUM
  =
  (UPPERCASE | LOWERCASE | DIGIT) . (UPPERCASE | LOWERCASE | DIGIT)*  

let RANGE = ALPHANUM . "-" . ALPHANUM | ALPHANUM 

let PREFIX = "-" 

let SCHEDULE_VALUE
  =
  "reboot"
    | "yearly"
    | "annually" | "monthly" | "weekly" | "daily" | "midnight" | "hourly" 

let SCHEDULE = "@" . SCHEDULE_VALUE 

let USER
  =
  (UPPERCASE | LOWERCASE | DIGIT) . (UPPERCASE | LOWERCASE | DIGIT)*  

let TIME
  =
  NUMBER
    . INDENT_REQ
    . NUMBER . INDENT_REQ . NUMBER . INDENT_REQ . RANGE . INDENT_REQ . RANGE 

let SHELLCOMMAND_CHAR
  =
  LOWERCASE | UPPERCASE | DIGIT | "_" | "/" | "|" | "." 

let SC_CHAR_OR_SPACE
  =
  LOWERCASE | UPPERCASE | DIGIT | "_" | "/" | "|" | "." | " " 

let SHELLCOMMAND
  =
  SHELLCOMMAND_CHAR . SC_CHAR_OR_SPACE*  . SHELLCOMMAND_CHAR
    | SHELLCOMMAND_CHAR 

let SHELLVAR_CHAR = LOWERCASE | UPPERCASE | DIGIT | "_" 

let SHELLVAR_NAME = SHELLVAR_CHAR . SHELLVAR_CHAR*  

let SHELLVALUE_CHAR
  =
  LOWERCASE | UPPERCASE | DIGIT | "_" | "/" | "|" | "." 

let SHELLVALUE_NAME = SHELLVALUE_CHAR . SHELLVALUE_CHAR*  

let SHELLVAR = SHELLVAR_NAME . "=" . SHELLVALUE_NAME . "\n" 

let COMMENTLINE = COMMENT . "\n" 

let ENTRY
  =
  INDENT
    . (PREFIX | "")
    . (TIME | SCHEDULE)
    . INDENT_REQ . USER . INDENT_REQ . SHELLCOMMAND . "\n" 

let CRON = ("\n" | SHELLVAR | COMMENTLINE | ENTRY)*  

let PREFIX_DICT = "{\"prefix\"=" . ("true" | "false") . "}" 

let TIME_DICT
  =
  "{\"minute\"="
    . NUMBER
    . ",\"ws1\"="
    . ",\"hour\"="
    . NUMBER
    . ",\"ws2\"="
    . ",\"dayofmonth\"="
    . NUMBER
    . ",\"ws3\"="
    . ",\"month\"="
    . RANGE . ",\"ws4\"=" . ",\"dayofweek\"=" . RANGE . "}" 

let SCHEDULE_DICT = "{\"schedule\"=\"" . SCHEDULE_VALUE . "\"}" 

let ENTRY_DICT
  =
  "{\"indent\"=\""
    . "\","
    . PREFIX_DICT
    . ","
    . (TIME_DICT | SCHEDULE_DICT)
    . ",\"indent2\"=\""
    . "\",\"user\"=\""
    . USER
    . "\",\"indent3\"=\""
    . "\",\"command\"=\"" . SHELLCOMMAND . "\"}" 

let SHELL_DICT
  =
  "{\"varname\"=\""
    . SHELLVAR_NAME . "\",\"value\"=\"" . SHELLVALUE_NAME . "\"}" 

let CRON_DICT
  =
  ((EMPTYDICT | SHELL_DICT | COMMENT_DICT | ENTRY_DICT) . "\n")*  

let cron_lens : (lens in CRON_DICT <=> CRON) = synth CRON_DICT <=> CRON 