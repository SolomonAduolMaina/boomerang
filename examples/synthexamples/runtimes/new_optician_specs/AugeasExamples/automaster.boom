module Automaster =
let LOWERCASE
  =
  "a"
    | "b"
    | "c"
    | "d"
    | "e"
    | "f"
    | "g"
    | "h"
    | "i"
    | "j"
    | "k"
    | "l"
    | "m"
    | "n"
    | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" 

let UPPERCASE
  =
  "A"
    | "B"
    | "C"
    | "D"
    | "E"
    | "F"
    | "G"
    | "H"
    | "I"
    | "J"
    | "K"
    | "L"
    | "M"
    | "N"
    | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" 

let to_upper_or_lower
  : (lens in LOWERCASE <=> UPPERCASE) =
  synth LOWERCASE <=> UPPERCASE 

let DIGIT
  =
  "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" 

let NUMBER = DIGIT . DIGIT*  

let WSP = (" " | "\n" | "\t")*  

let NONEMPTY_WSP = (" " | "\n" | "\t") . (" " | "\n" | "\t")*  

let SAMELINE_WSP_CHAR = " " | "\t" | "\\\n" 

let SAMELINE_WSP = SAMELINE_WSP_CHAR*  

let NONEMPTY_SAMELINE_WSP = project (SAMELINE_WSP_CHAR . SAMELINE_WSP_CHAR* ) -> " "

let QUOTELESS_STRING
  =
  (UPPERCASE
     | LOWERCASE
     | DIGIT
     | " "
     | "'" | "_" | ":" | "/" | "-" | "." | "=" | "+" | "[" | "]" | "(" | ")")*  

let STRING_COMPONENT
  =
  UPPERCASE
    | LOWERCASE
    | DIGIT
    | "\""
    | " "
    | "'"
    | "_"
    | ":"
    | "/"
    | "-" | "." | "=" | "+" | "[" | "]" | "(" | ")" | ";" | "!" | "*" | "," 

let STRING = STRING_COMPONENT*  

let NONEMPTY_STRING = STRING_COMPONENT . STRING_COMPONENT*  

let DELIMITED_STRING
  =
  (UPPERCASE
     | LOWERCASE
     | DIGIT
     | "\\\""
     | " "
     | "'"
     | "_"
     | ":"
     | "/"
     | "-" | "." | "=" | "+" | "[" | "]" | "(" | ")" | ";" | "!" | "*" | ",")*  

let string_to_delimited
  : (lens in STRING <=> DELIMITED_STRING) =
  synth STRING <=> DELIMITED_STRING 

let NO_STAR_STRING_COMPONENT
  =
  UPPERCASE
    | LOWERCASE
    | DIGIT
    | "\""
    | " "
    | "'"
    | "_"
    | ":"
    | "/" | "-" | "." | "=" | "+" | "[" | "]" | "(" | ")" | ";" | "!" | "," 

let NO_STAR_DELIMITED_STRING_COMPONENT
  =
  UPPERCASE
    | LOWERCASE
    | DIGIT
    | "\\\""
    | " "
    | "'"
    | "_"
    | ":"
    | "/" | "-" | "." | "=" | "+" | "[" | "]" | "(" | ")" | ";" | "!" | "," 

let STARLESS_STRING = NO_STAR_STRING_COMPONENT*  

let STARLESS_DELIMITED_STRING
  =
  NO_STAR_DELIMITED_STRING_COMPONENT*  

let starless_string_to_delimited
  : (lens in STARLESS_STRING <=> STARLESS_DELIMITED_STRING) =
  synth STARLESS_STRING <=> STARLESS_DELIMITED_STRING 

let COMMENT = "# " . STRING 

let COMMENT_DICT = "{\"#comment\"=\"" . DELIMITED_STRING . "\"}" 

let comment_map
  : (lens in COMMENT <=> COMMENT_DICT) =
  synth COMMENT <=> COMMENT_DICT 

let EMPTYDICT = "{}" 

let NON_WSP_CHAR
  =
  LOWERCASE
    | UPPERCASE
    | "_" | "." | "-" | ":" | "/" | "+" | DIGIT | "," | "=" | "*" | "%" 

let ENV_VAR = (UPPERCASE | "_") . (UPPERCASE | "_")*  

let WORD = NON_WSP_CHAR . NON_WSP_CHAR*  

let SIMPLE_WORD
  =
  (LOWERCASE | "-" | "_" | UPPERCASE | DIGIT | ".") . (LOWERCASE | "-" | "_" | UPPERCASE | DIGIT | ".")*  

let FOLDER
  =
  (("" | "/") . (SIMPLE_WORD . "/")*  . SIMPLE_WORD . ("" | "/")) | "${" . ENV_VAR . "}" 

let MULTILINE_COMMENT
  =
  "/*" . STARLESS_STRING . ("\n" . STARLESS_STRING)*  . "*/" 

let MULTILINE_COMMENT_DICT
  =
  "{\"#mcomment\""
    . "{\"string\"=\"" . STARLESS_DELIMITED_STRING . "\"}"
    . ("{\"string\"=\"" . STARLESS_DELIMITED_STRING . "\"}")* 
    . "}" 

let multiline_comment_map
  : (lens in MULTILINE_COMMENT <=> MULTILINE_COMMENT_DICT) =
  synth MULTILINE_COMMENT <=> MULTILINE_COMMENT_DICT 

let NO_COLON_WORD
  =
  (LOWERCASE | UPPERCASE | "_" | "." | "-" | "/" | "+" | "," | "=" | DIGIT)
    . (LOWERCASE
         | UPPERCASE | "_" | "." | "-" | "/" | "+" | "," | "=" | DIGIT)*  

let NO_COLON_COMMA_EQ_WORD
  =
  (LOWERCASE | UPPERCASE | "_" | "." | "-" | "/" | "+" | DIGIT)
    . (LOWERCASE | UPPERCASE | "_" | "." | "-" | "/" | "+" | DIGIT)*  

let TYPE_HOST_FORMAT
  =
  ""
    | NO_COLON_COMMA_EQ_WORD
        . ("" | "," . NO_COLON_COMMA_EQ_WORD)
        . ":" . (NO_COLON_COMMA_EQ_WORD . ":" | "") 

let OPTIONS
  =
  ""
    | NO_COLON_COMMA_EQ_WORD . ("" | "=" . NO_COLON_COMMA_EQ_WORD)
        . (("," | NONEMPTY_SAMELINE_WSP)
             . NO_COLON_COMMA_EQ_WORD . ("" | "=" . NO_COLON_COMMA_EQ_WORD))*  

let AUTOMASTER
  =
  ((COMMENT
      | WORD
          . NONEMPTY_SAMELINE_WSP
          . TYPE_HOST_FORMAT
          . NO_COLON_WORD . ("" | NONEMPTY_SAMELINE_WSP . OPTIONS)
      | "")
     . "\n")*  

test matches_cex
  AUTOMASTER
  "# \n# Sample auto.master file\n# \n\n/-        auto.data \n/net    -hosts ro\n/misc   /etc/auto.misc\n/home     /etc/auto.home\n/home     ldap:example.com:ou=auto.home,dc=example,dc=com \n/mnt      yp:mnt.map -strict,-Dfoo=bar,uid=1000\n/mnt      yp,sun:mnt.map\n/auto   /etc/auto.HD --timeout=15 --ghost\n\n+ dir:/etc/auto.master.d\n+ auto.master\n" = true

let HOST_DICT = "{\"HOST\"=\"" . NO_COLON_COMMA_EQ_WORD . "\"}" 

let FORMAT_DICT = "{\"FORMAT\"=\"" . NO_COLON_COMMA_EQ_WORD . "\"}" 

let TYPE_HOST_FORMAT_DICTS
  =
  ""
    | "{\"TYPE\"=\"" . NO_COLON_COMMA_EQ_WORD . "\"}"
        . ("" | HOST_DICT) . ("" | FORMAT_DICT) 

let MAP_DICT = "{\"map\"=\"" . NO_COLON_WORD . "\"}" 

let VALUE_DICT = "{\"value\"=\"" . NO_COLON_COMMA_EQ_WORD . "\"}" 

let OPTIONS_DICT
  =
  ""
    | "{\"opt\"=\"" . NO_COLON_COMMA_EQ_WORD . "\"" . ("" | VALUE_DICT)
        . (("," | "")
             . "{\"opt\"=\""
             . NO_COLON_COMMA_EQ_WORD . "\"" . ("" | VALUE_DICT))*  

let y : (lens in OPTIONS_DICT <=> OPTIONS) = synth OPTIONS_DICT <=> OPTIONS 

let AUTOMASTER_ENTRY_DICT
  =
  "{\""
    . WORD
    . "\""
    . ""
    . TYPE_HOST_FORMAT_DICTS
    . MAP_DICT . ("" | NONEMPTY_SAMELINE_WSP . OPTIONS_DICT) . "}" 

let AUTOMASTER_DICT
  =
  "{" . (COMMENT_DICT | "{ }" | AUTOMASTER_ENTRY_DICT)*  . "}" 

let automaster_to_dict
  : (lens in AUTOMASTER <=> AUTOMASTER_DICT) =
  synth AUTOMASTER <=> AUTOMASTER_DICT using {("# \n# Sample auto.master file\n# \n\n/-        auto.data \n/net    -hosts ro\n/misc   /etc/auto.misc\n/home     /etc/auto.home\n/home     ldap:example.com:ou=auto.home,dc=example,dc=com \n/mnt      yp:mnt.map -strict,-Dfoo=bar,uid=1000\n/mnt      yp,sun:mnt.map\n/auto   /etc/auto.HD --timeout=15 --ghost\n\n+ dir:/etc/auto.master.d\n+ auto.master\n", "{{\"#comment\"=\"\"}{\"#comment\"=\"Sample auto.master file\"}{\"#comment\"=\"\"}{ }{\"/-\"{\"map\"=\"auto.data\"}	}{\"/net\"{\"map\"=\"-hosts\"}	{\"opt\"=\"ro\"}{\"/misc\"{\"map\"=\"/etc/auto.misc\"}}{\"/home\"{\"map\"=\"/etc/auto.home\"}}{\"/home\"{\"TYPE\"=\"ldap\"}{\"FORMAT\"=\"example.com\"}{\"map\"=\"ou=auto.home,dc=example,dc=com\"}	}{\"/mnt\"{\"TYPE\"=\"yp\"}{\"map\"=\"mnt.map\"}	{\"opt\"=\"-strict\"{\"opt\"=\"-Dfoo\"{\"value\"=\"bar\"}{\"opt\"=\"uid\"{\"value\"=\"1000\"}}{\"/mnt\"{\"TYPE\"=\"yp\"}{\"HOST\"=\"sun\"}{\"map\"=\"mnt.map\"}}{\"/auto\"{\"map\"=\"/etc/auto.HD\"}	{\"opt\"=\"--timeout\"{\"value\"=\"15\"},{\"opt\"=\"--ghost\"}{ }{\"+\"{\"TYPE\"=\"dir\"}{\"map\"=\"/etc/auto.master.d\"}}{\"+\"{\"map\"=\"auto.master\"}}}")}

test automaster_to_dict.get "# \n# Sample auto.master file\n# \n\n/-        auto.data \n/net    -hosts ro\n/misc   /etc/auto.misc\n/home     /etc/auto.home\n/home     ldap:example.com:ou=auto.home,dc=example,dc=com \n/mnt      yp:mnt.map -strict,-Dfoo=bar,uid=1000\n/mnt      yp,sun:mnt.map\n/auto   /etc/auto.HD --timeout=15 --ghost\n\n+ dir:/etc/auto.master.d\n+ auto.master\n" = 
"{{\"#comment\"=\"\"}{\"#comment\"=\"Sample auto.master file\"}{\"#comment\"=\"\"}{ }{\"/-\"{\"map\"=\"auto.data\"}	}{\"/net\"{\"map\"=\"-hosts\"}	{\"opt\"=\"ro\"}{\"/misc\"{\"map\"=\"/etc/auto.misc\"}}{\"/home\"{\"map\"=\"/etc/auto.home\"}}{\"/home\"{\"TYPE\"=\"ldap\"}{\"FORMAT\"=\"example.com\"}{\"map\"=\"ou=auto.home,dc=example,dc=com\"}	}{\"/mnt\"{\"TYPE\"=\"yp\"}{\"map\"=\"mnt.map\"}	{\"opt\"=\"-strict\"{\"opt\"=\"-Dfoo\"{\"value\"=\"bar\"}{\"opt\"=\"uid\"{\"value\"=\"1000\"}}{\"/mnt\"{\"TYPE\"=\"yp\"}{\"HOST\"=\"sun\"}{\"map\"=\"mnt.map\"}}{\"/auto\"{\"map\"=\"/etc/auto.HD\"}	{\"opt\"=\"--timeout\"{\"value\"=\"15\"},{\"opt\"=\"--ghost\"}{ }{\"+\"{\"TYPE\"=\"dir\"}{\"map\"=\"/etc/auto.master.d\"}}{\"+\"{\"map\"=\"auto.master\"}}}"

test automaster_to_dict.put
"{{\"#comment\"=\"\"}{\"#comment\"=\"Sample auto.master file\"}{\"#comment\"=\"\"}{ }{\"/-\"{\"map\"=\"auto.data\"}	}{\"/net\"{\"map\"=\"-hosts\"}	{\"opt\"=\"ro\"}{\"/misc\"{\"map\"=\"/etc/auto.misc\"}}{\"/home\"{\"map\"=\"/etc/auto.home\"}}{\"/home\"{\"TYPE\"=\"ldap\"}{\"FORMAT\"=\"example.com\"}{\"map\"=\"ou=auto.home,dc=example,dc=com\"}	}{\"/mnt\"{\"TYPE\"=\"yp\"}{\"map\"=\"mnt.map\"}	{\"opt\"=\"-strict\"{\"opt\"=\"-Dfoo\"{\"value\"=\"bar\"}{\"opt\"=\"uid\"{\"value\"=\"1000\"}}{\"/mnt\"{\"TYPE\"=\"yp\"}{\"HOST\"=\"sun\"}{\"map\"=\"mnt.map\"}}{\"/auto\"{\"map\"=\"/etc/auto.HD\"}	{\"opt\"=\"--timeout\"{\"value\"=\"15\"},{\"opt\"=\"--ghost\"}{ }{\"+\"{\"TYPE\"=\"dir\"}{\"map\"=\"/etc/auto.master.d\"}}{\"+\"{\"map\"=\"auto.master\"}}}"
into
"# \n# Sample auto.master file\n# \n\n/-        auto.data \n/net    -hosts ro\n/misc   /etc/auto.misc\n/home     /etc/auto.home\n/home     ldap:example.com:ou=auto.home,dc=example,dc=com \n/mnt      yp:mnt.map -strict,-Dfoo=bar,uid=1000\n/mnt      yp,sun:mnt.map\n/auto   /etc/auto.HD --timeout=15 --ghost\n\n+ dir:/etc/auto.master.d\n+ auto.master\n" = 
"# 
# Sample auto.master file
# 

/-	auto.data	
/net	-hosts	ro
/misc	/etc/auto.misc
/home	/etc/auto.home
/home	ldap:example.com:ou=auto.home,dc=example,dc=com	
/mnt	yp:mnt.map	-strict,-Dfoo=bar,uid=1000
/mnt	yp,sun:mnt.map
/auto	/etc/auto.HD	--timeout=15	--ghost

+	dir:/etc/auto.master.d
+	auto.master
"


