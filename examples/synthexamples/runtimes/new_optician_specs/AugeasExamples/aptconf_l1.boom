module Aptconf_l1 =
let LOWERCASE
  =
  "a"
    | "b"
    | "c"
    | "d"
    | "e"
    | "f"
    | "g"
    | "h"
    | "i"
    | "j"
    | "k"
    | "l"
    | "m"
    | "n"
    | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" 

let UPPERCASE
  =
  "A"
    | "B"
    | "C"
    | "D"
    | "E"
    | "F"
    | "G"
    | "H"
    | "I"
    | "J"
    | "K"
    | "L"
    | "M"
    | "N"
    | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" 

let to_upper_or_lower
  : (lens in LOWERCASE <=> UPPERCASE) =
  synth LOWERCASE <=> UPPERCASE 

let DIGIT
  =
  "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" 

let NUMBER = DIGIT . DIGIT*  

let WSP = (" " | "\n" | "\t")*  

let NONEMPTY_WSP = (" " | "\n" | "\t") . (" " | "\n" | "\t")*  

let SAMELINE_WSP_CHAR = " " | "\t" | "\\\n" 

let SAMELINE_WSP = SAMELINE_WSP_CHAR*  

let NONEMPTY_SAMELINE_WSP = SAMELINE_WSP_CHAR . SAMELINE_WSP_CHAR*  

let QUOTELESS_STRING
  =
  (UPPERCASE
     | LOWERCASE
     | DIGIT
     | " "
     | "'" | "_" | ":" | "/" | "-" | "." | "=" | "+" | "[" | "]" | "(" | ")")*  

let STRING_COMPONENT
  =
  UPPERCASE
    | LOWERCASE
    | DIGIT
    | "\""
    | " "
    | "'"
    | "_"
    | ":"
    | "/"
    | "-" | "." | "=" | "+" | "[" | "]" | "(" | ")" | ";" | "!" | "*" | "," 

let STRING = STRING_COMPONENT*  

let NONEMPTY_STRING = STRING_COMPONENT . STRING_COMPONENT*  

let DELIMITED_STRING
  =
  (UPPERCASE
     | LOWERCASE
     | DIGIT
     | "\\\""
     | " "
     | "'"
     | "_"
     | ":"
     | "/"
     | "-" | "." | "=" | "+" | "[" | "]" | "(" | ")" | ";" | "!" | "*" | ",")*  

let string_to_delimited
  : (lens in STRING <=> DELIMITED_STRING) =
  synth STRING <=> DELIMITED_STRING 

let NO_STAR_STRING_COMPONENT
  =
  UPPERCASE
    | LOWERCASE
    | DIGIT
    | "\""
    | " "
    | "'"
    | "_"
    | ":"
    | "/" | "-" | "." | "=" | "+" | "[" | "]" | "(" | ")" | ";" | "!" | "," 

let NO_STAR_DELIMITED_STRING_COMPONENT
  =
  UPPERCASE
    | LOWERCASE
    | DIGIT
    | "\\\""
    | " "
    | "'"
    | "_"
    | ":"
    | "/" | "-" | "." | "=" | "+" | "[" | "]" | "(" | ")" | ";" | "!" | "," 

let STARLESS_STRING = NO_STAR_STRING_COMPONENT*  

let STARLESS_DELIMITED_STRING
  =
  NO_STAR_DELIMITED_STRING_COMPONENT*  

let starless_string_to_delimited
  : (lens in STARLESS_STRING <=> STARLESS_DELIMITED_STRING) =
  synth STARLESS_STRING <=> STARLESS_DELIMITED_STRING 

let COMMENT = "# " . STRING 

let COMMENT_DICT = "{\"#comment\"=\"" . DELIMITED_STRING . "\"}" 

let comment_map
  : (lens in COMMENT <=> COMMENT_DICT) =
  synth COMMENT <=> COMMENT_DICT 

let EMPTYDICT = "{}" 

let NON_WSP_CHAR
  =
  LOWERCASE
    | UPPERCASE
    | "_" | "." | "-" | ":" | "/" | "+" | DIGIT | "," | "=" | "*" | "%" 

let ENV_VAR = (UPPERCASE | "_") . (UPPERCASE | "_")*  

let WORD = NON_WSP_CHAR . NON_WSP_CHAR*  

let SIMPLE_WORD
  =
  (LOWERCASE | "-" | "_" | UPPERCASE | DIGIT | ".") . (LOWERCASE | "-" | "_" | UPPERCASE | DIGIT | ".")*  

let FOLDER
  =
  (("" | "/") . (SIMPLE_WORD . "/")*  . SIMPLE_WORD . ("" | "/")) | "${" . ENV_VAR . "}" 

let MULTILINE_COMMENT
  =
  "/*" . STARLESS_STRING . ("\n" . STARLESS_STRING)*  . "*/" 

let MULTILINE_COMMENT_DICT
  =
  "{\"#mcomment\""
    . "{\"string\"=\"" . STARLESS_DELIMITED_STRING . "\"}"
    . ("{\"string\"=\"" . STARLESS_DELIMITED_STRING . "\"}")* 
    . "}" 

let multiline_comment_map
  : (lens in MULTILINE_COMMENT <=> MULTILINE_COMMENT_DICT) =
  synth MULTILINE_COMMENT <=> MULTILINE_COMMENT_DICT 

let SLASH_COMMENT = "//" . STRING 

let scomment_comment_map
  : (lens in SLASH_COMMENT <=> COMMENT_DICT) =
  synth SLASH_COMMENT <=> COMMENT_DICT 

let INCLUDE_CONF = "#include " . FOLDER 

test matches_cex INCLUDE_CONF "#include myfolder/my_filE.txt" = true

let INCLUDE_DICT = "{\"@include\"=\"" . FOLDER . "\"}" 

test matches_cex
  INCLUDE_DICT
  "{\"@include\"=\"myfolder/my_filE.txt\"}" = true

let CLEAR_CONF = "#clear" . (" " . WORD)*  

test matches_cex CLEAR_CONF "#clear" = true

test matches_cex CLEAR_CONF "#clear mydata:hello tester" = true

let CLEAR_DICT
  =
  "{\"#clear\"" . ("{\"name\"=\"" . WORD . "\"}")*  . "}" 

test matches_cex CLEAR_DICT "{\"#clear\"}" = true

test matches_cex
  CLEAR_DICT
  "{\"#clear\"{\"name\"=\"mydata:hello\"}{\"name\"=\"tester\"}}" = true

let NO_SLASH_QUOTELESS_STRING
  =
  (UPPERCASE
     | LOWERCASE
     | DIGIT
     | " " | "'" | "_" | ":" | "-" | "." | "=" | "+" | "[" | "]" | "(" | ")")*  

let NO_SLASH_WORD
  =
  (LOWERCASE
     | UPPERCASE | "_" | "." | "-" | ":" | "+" | DIGIT | "," | "=" | "*")
    . (LOWERCASE
         | UPPERCASE | "_" | "." | "-" | ":" | "+" | DIGIT | "," | "=" | "*")*  

let ELEMENT_DICT
  =
  "{\"@elem\"=\"" . NO_SLASH_QUOTELESS_STRING . "\"}" 

test matches_cex ELEMENT_DICT "{\"@elem\"=\"--force-confold\"}" = true

let KVP_CONF = NO_SLASH_WORD . " \"" . DELIMITED_STRING . "\"" 

test matches_cex KVP_CONF "hello \"testingh ielloo asdfwer s\"" = true

let KVP_DICT
  =
  "{\"" . NO_SLASH_WORD . "\"=\"" . DELIMITED_STRING . "\"}" 

test matches_cex KVP_DICT "{\"hello\"=\"testingh ielloo asdfwer s\"}" = true

let NONRECURSIVE_CONF
  =
  (KVP_CONF | NO_SLASH_QUOTELESS_STRING) . ";"
    | CLEAR_CONF | MULTILINE_COMMENT | INCLUDE_CONF | SLASH_COMMENT 

let NONRECURSIVE_DICT
  =
  KVP_DICT
    | ELEMENT_DICT
    | CLEAR_DICT | MULTILINE_COMMENT_DICT | INCLUDE_DICT | COMMENT_DICT 

let APT_L0_CONF
  =
  WORD . " {\n" . (NONRECURSIVE_CONF . "\n")*  . "}" 

test matches_cex
  APT_L0_CONF
  "APT {\nhello \"testingh ielloo asdfwer s\";\n--force-confold;\n/*test\nmultiline*/\n//comment\n#clear mydata:hello tester\n#include myfolder/my_filE.txt\n}" = true

let APT_L0_DICT = "{\"" . WORD . "\"" . NONRECURSIVE_DICT*  . "}" 

test matches_cex
  APT_L0_DICT
  "{\"APT\"{\"hello\"=\"testingh ielloo asdfwer s\"}{\"@elem\"=\"--force-confold\"}{\"#mcomment\"{\"string\"=\"test\"}{\"string\"=\"multiline\"}}{\"#comment\"=\"comment\"}{\"#clear\"{\"name\"=\"mydata:hello\"}{\"name\"=\"tester\"}}{\"include\"=\"myfolder/my_filE.txt\"}}" = true

let apt_l0_dict
  : (lens in APT_L0_CONF <=> APT_L0_DICT) =
  synth APT_L0_CONF <=> APT_L0_DICT using {("APT {\nhello \"testingh ielloo asdfwer s\";\n--force-confold;\n/*test\nmultiline*/\n//comment\n#clear mydata:hello tester\n#include myfolder/my_filE.txt\n}","{\"APT\"{\"hello\"=\"testingh ielloo asdfwer s\"}{\"@elem\"=\"--force-confold\"}{\"#mcomment\"{\"string\"=\"test\"}{\"string\"=\"multiline\"}}{\"#comment\"=\"comment\"}{\"#clear\"{\"name\"=\"mydata:hello\"}{\"name\"=\"tester\"}}{\"@include\"=\"myfolder/my_filE.txt\"}}")} 

let APT_L1_CONF
  =
  WORD . " {\n" . ((NONRECURSIVE_CONF | APT_L0_CONF) . "\n")*  . "}" 

let APT_L1_DICT
  =
  "{\"" . WORD . "\"" . (NONRECURSIVE_DICT | APT_L0_DICT)*  . "}" 

let transformer
  : (lens in APT_L1_CONF <=> APT_L1_DICT) =
  synth APT_L1_CONF <=> APT_L1_DICT

test apt_l0_dict.get "APT {\nhello \"testingh ielloo asdfwer s\";\n--force-confold;\n/*test\nmultiline*/\n//comment\n#clear mydata:hello tester\n#include myfolder/my_filE.txt\n}" = 
"{\"APT\"{\"hello\"=\"testingh ielloo asdfwer s\"}{\"@elem\"=\"--force-confold\"}{\"#mcomment\"{\"string\"=\"test\"}{\"string\"=\"multiline\"}}{\"#comment\"=\"comment\"}{\"#clear\"{\"name\"=\"mydata:hello\"}{\"name\"=\"tester\"}}{\"@include\"=\"myfolder/my_filE.txt\"}}"

test apt_l0_dict.put "{\"APT\"{\"hello\"=\"testingh ielloo asdfwer s\"}{\"@elem\"=\"--force-confold\"}{\"#mcomment\"{\"string\"=\"test\"}{\"string\"=\"multiline\"}}{\"#comment\"=\"comment\"}{\"#clear\"{\"name\"=\"mydata:hello\"}{\"name\"=\"tester\"}}{\"@include\"=\"myfolder/my_filE.txt\"}}"
into 
"APT {\nhello \"testingh ielloo asdfwer s\";\n--force-confold;\n/*test\nmultiline*/\n//comment\n#clear mydata:hello tester\n#include myfolder/my_filE.txt\n}" = 
"APT {\nhello \"testingh ielloo asdfwer s\";\n--force-confold;\n/*test\nmultiline*/\n//comment\n#clear mydata:hello tester\n#include myfolder/my_filE.txt\n}"

