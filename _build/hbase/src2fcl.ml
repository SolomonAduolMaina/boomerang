# 5 "hbase/src2fcl.mll"
 
  type mode = SRC | TEX
  type lineMode = SRC | TEX | NONE

  let mode = ref SRC
  and lineMode = ref NONE
  and newLine = ref true

  let buffer_size = 240
  let current = Buffer.create buffer_size
  let old = Buffer.create buffer_size

  let suffix = ref "f" 
  let terminator = ref ";" 
  let created_files = ref ""
  let basename = ref ""
  let wholename = ref ""
  let count = ref 0

  let emit s = Buffer.add_string current s

  let reset () = 
    mode := SRC;
    lineMode := NONE;
    newLine := true;
    Buffer.reset current;
    Buffer.reset old;
    count := 0

  let dump() =
     count := !count + 1;
     let outname = !basename (* ^ "." ^ (string_of_int !count) ^ "." ^ !suffix *) in
     created_files := (outname
                       ^ (if !created_files <> "" then " " else "")
                       ^ !created_files);
     let o = open_out_bin outname in
       if (Buffer.length old) <> 0 then
         (output_string o ("DO printingoff" ^ !terminator ^ "\n");
          Buffer.output_buffer o old;
          output_string o ("DO printingon" ^ !terminator ^ "\n"));
       Buffer.output_buffer o current; close_out o;
       Buffer.reset old; Buffer.add_buffer old current;
       Buffer.reset current

  let pr s =
    if (!mode = SRC && !lineMode = NONE) || !lineMode = SRC then
      emit s
    else
      ()

# 53 "hbase/src2fcl.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\239\255\000\000\001\000\000\000\003\000\254\255\255\255\
    \244\255\001\000\001\000\249\255\250\255\004\000\002\000\003\000\
    \004\000\253\255\252\255\251\255\245\255\247\255\000\000\000\000\
    \003\000\000\000\002\000\006\000\000\000\005\000\000\000\000\000\
    \002\000\246\255\006\000\007\000\000\000\243\255\008\000\001\000\
    \241\255\009\000\010\000\010\000\242\255\012\000\012\000\240\255\
    ";
  Lexing.lex_backtrk = 
   "\255\255\255\255\016\000\016\000\016\000\016\000\255\255\255\255\
    \255\255\255\255\007\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_default = 
   "\001\000\000\000\255\255\255\255\255\255\255\255\000\000\000\000\
    \000\000\255\255\255\255\000\000\000\000\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\035\000\255\255\000\000\038\000\255\255\
    \000\000\255\255\042\000\255\255\000\000\045\000\255\255\000\000\
    ";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\006\000\021\000\033\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\000\000\255\255\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\009\000\032\000\005\000\020\000\004\000\010\000\015\000\
    \000\000\011\000\000\000\000\000\000\000\008\000\014\000\000\000\
    \000\000\000\000\032\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\009\000\
    \000\000\000\000\000\000\012\000\016\000\024\000\025\000\027\000\
    \026\000\028\000\030\000\029\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\031\000\023\000\000\000\022\000\000\000\000\000\
    \000\000\000\000\000\000\003\000\000\000\037\000\040\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\041\000\034\000\
    \000\000\000\000\000\000\002\000\042\000\035\000\013\000\019\000\
    \018\000\017\000\038\000\036\000\039\000\045\000\043\000\044\000\
    \046\000\047\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \007\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \255\255\000\000\255\255\000\000\255\255";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\009\000\032\000\255\255\255\255\255\255\
    \255\255\035\000\038\000\255\255\042\000\255\255\045\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\009\000\032\000\000\000\010\000\000\000\005\000\013\000\
    \255\255\005\000\255\255\255\255\255\255\005\000\013\000\255\255\
    \255\255\255\255\031\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\
    \255\255\255\255\255\255\005\000\013\000\023\000\024\000\026\000\
    \025\000\027\000\029\000\028\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\030\000\022\000\255\255\004\000\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\036\000\039\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\002\000\003\000\
    \255\255\255\255\255\255\000\000\002\000\003\000\005\000\014\000\
    \015\000\016\000\034\000\035\000\038\000\041\000\042\000\043\000\
    \045\000\046\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\035\000\
    \038\000\255\255\042\000\255\255\045\000";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec lex lexbuf =
    __ocaml_lex_lex_rec lexbuf 0
and __ocaml_lex_lex_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 57 "hbase/src2fcl.mll"
      ( )
# 170 "hbase/src2fcl.ml"

  | 1 ->
# 58 "hbase/src2fcl.mll"
       (
    emit "\n"; newLine := true; lineMode := NONE; lex lexbuf
  )
# 177 "hbase/src2fcl.ml"

  | 2 ->
# 61 "hbase/src2fcl.mll"
         (
    if !newLine then (newLine := false; mode := TEX)
    else (pr "#{@}"); lex lexbuf
  )
# 185 "hbase/src2fcl.ml"

  | 3 ->
# 65 "hbase/src2fcl.mll"
         (
    if !newLine then (newLine := false; mode := SRC; pr "    ")
    else (pr "#{#}"); lex lexbuf
  )
# 193 "hbase/src2fcl.ml"

  | 4 ->
# 69 "hbase/src2fcl.mll"
         (
    if !newLine then (newLine := false; mode := SRC; pr "    ")
    else (pr "#{*}"); lex lexbuf
  )
# 201 "hbase/src2fcl.ml"

  | 5 ->
# 73 "hbase/src2fcl.mll"
       (
    if !newLine then (newLine := false; lineMode := TEX)
    else (pr "#@"); lex lexbuf
  )
# 209 "hbase/src2fcl.ml"

  | 6 ->
# 77 "hbase/src2fcl.mll"
       (
    if !newLine then (newLine := false; lineMode := TEX)
    else (pr "#&"); lex lexbuf
  )
# 217 "hbase/src2fcl.ml"

  | 7 ->
# 81 "hbase/src2fcl.mll"
       (
    if !newLine then (newLine := false; lineMode := SRC; pr "  ")
    else (pr "##"); lex lexbuf
  )
# 225 "hbase/src2fcl.ml"

  | 8 ->
# 85 "hbase/src2fcl.mll"
                 (
    if !newLine then (dump(); emit "\n") else (pr "#<\n");
    newLine := true; lex lexbuf
  )
# 233 "hbase/src2fcl.ml"

  | 9 ->
# 90 "hbase/src2fcl.mll"
                             (
    let _ = Lexing.lexeme lexbuf in 
    if !newLine then
      (suffix := "ff"; terminator:=";"; emit "\n")
    else
      pr (Lexing.lexeme lexbuf);
    newLine := true; lex lexbuf
  )
# 245 "hbase/src2fcl.ml"

  | 10 ->
# 98 "hbase/src2fcl.mll"
        (
    if !newLine then (newLine := false; lineMode := SRC; pr "#")
    else (pr "###"); lex lexbuf
  )
# 253 "hbase/src2fcl.ml"

  | 11 ->
# 102 "hbase/src2fcl.mll"
       (
    if !newLine then (newLine := false; lineMode := SRC; pr "  ")
    else (pr "#*"); lex lexbuf
  )
# 261 "hbase/src2fcl.ml"

  | 12 ->
# 106 "hbase/src2fcl.mll"
                        (
    let s = Lexing.lexeme lexbuf in
    pr (String.sub s 2 ((String.length s) - 4));
    lex lexbuf
  )
# 270 "hbase/src2fcl.ml"

  | 13 ->
# 111 "hbase/src2fcl.mll"
                        (
    let s = Lexing.lexeme lexbuf in
    pr (String.sub s 2 ((String.length s) - 4)); 
    lex lexbuf
  )
# 279 "hbase/src2fcl.ml"

  | 14 ->
# 116 "hbase/src2fcl.mll"
                         (
    let s = Lexing.lexeme lexbuf in
    pr (String.sub s 3 ((String.length s) - 5)); 
    lex lexbuf
  )
# 288 "hbase/src2fcl.ml"

  | 15 ->
# 121 "hbase/src2fcl.mll"
                         (
    let s = Lexing.lexeme lexbuf in
    pr (String.sub s 3 ((String.length s) - 5)); 
    lex lexbuf
  )
# 297 "hbase/src2fcl.ml"

  | 16 ->
# 126 "hbase/src2fcl.mll"
    (
    newLine := false; pr (Lexing.lexeme lexbuf); lex lexbuf
  )
# 304 "hbase/src2fcl.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_lex_rec lexbuf __ocaml_lex_state

;;

# 130 "hbase/src2fcl.mll"
 
  let fcl_of_src_str s = 
    reset ();
    let _ = lex (Lexing.from_string s) in 
    Buffer.contents current

  let fcl_of_src fn = 
    reset ();
    let fchan = open_in_bin fn in
    let _ = lex (Lexing.from_channel fchan) in 
    let _ = close_in fchan in 
    Buffer.contents current

# 325 "hbase/src2fcl.ml"
