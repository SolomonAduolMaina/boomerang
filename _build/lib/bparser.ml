type token =
  | EOF of (Info.t)
  | MODULE of (Info.t)
  | OPEN of (Info.t)
  | OF of (Info.t)
  | TYPE of (Info.t)
  | UNIT of (Info.t)
  | BOOL of (Info.t)
  | INT of (Info.t)
  | CHAR of (Info.t)
  | STRING of (Info.t)
  | REGEXP of (Info.t)
  | AREGEXP of (Info.t)
  | SKELETONS of (Info.t)
  | RESOURCES of (Info.t)
  | LENS of (Info.t)
  | CANONIZER of (Info.t)
  | FORALL of (Info.t)
  | WHERE of (Info.t)
  | BOOLPREFS of (Info.t)
  | INTPREFS of (Info.t)
  | STRINGPREFS of (Info.t)
  | STRINGLISTPREFS of (Info.t)
  | STR of (Bident.Id.t)
  | UIDENT of (Bident.Id.t)
  | LIDENT of (Bident.Id.t)
  | QUALIDENT of (Bident.Id.t)
  | TYVARIDENT of (Bident.Id.t)
  | CSET of (Bident.Id.t)
  | NSET of (Bident.Id.t)
  | CHARACTER of (Info.t * char)
  | INTEGER of (Info.t * int)
  | BOOLEAN of (Info.t * bool)
  | CEX of (Info.t)
  | FLOAT of (Info.t * float)
  | HASH of (Info.t)
  | LBRACE of (Info.t)
  | RBRACE of (Info.t)
  | LLIST of (Info.t)
  | LBRACK of (Info.t)
  | RBRACK of (Info.t)
  | LPAREN of (Info.t)
  | RPAREN of (Info.t)
  | LANGLE of (Info.t)
  | RANGLE of (Info.t)
  | ARROW of (Info.t)
  | DARROW of (Info.t)
  | DEQARROW of (Info.t)
  | EQARROW of (Info.t)
  | BEGIN of (Info.t)
  | END of (Info.t)
  | GRAMMAR of (Info.t)
  | AND of (Info.t)
  | FUN of (Info.t)
  | LET of (Info.t)
  | IN of (Info.t)
  | TEST of (Info.t)
  | MATCH of (Info.t)
  | WITH of (Info.t)
  | SEMI of (Info.t)
  | COMMA of (Info.t)
  | DOT of (Info.t)
  | EQUAL of (Info.t)
  | COLON of (Info.t)
  | COLONCOLON of (Info.t)
  | BACKSLASH of (Info.t)
  | SLASH of (Info.t)
  | STAR of (Info.t)
  | RLUS of (Info.t)
  | BANG of (Info.t)
  | BAR of (Info.t)
  | BARBAR of (Info.t)
  | DOLLAR of (Info.t)
  | PLUS of (Info.t)
  | MINUS of (Info.t)
  | UNDERLINE of (Info.t)
  | HAT of (Info.t)
  | TILDE of (Info.t)
  | AMPERSAND of (Info.t)
  | QMARK of (Info.t)
  | LT of (Info.t)
  | GT of (Info.t)
  | LEQ of (Info.t)
  | GEQ of (Info.t)
  | STYPE of (Info.t)
  | VTYPE of (Info.t)
  | ASTYPE of (Info.t)
  | AVTYPE of (Info.t)
  | BIJ of (Info.t)
  | GET of (Info.t)
  | PUT of (Info.t)
  | CREATE of (Info.t)
  | CANONIZE of (Info.t)
  | CHOOSE of (Info.t)
  | INTO of (Info.t)
  | ERROR of (Info.t)
  | PERM of (Info.t)
  | PROJECT of (Info.t)
  | ID of (Info.t)
  | SYNTH of (Info.t)

open Parsing;;
let _ = parse_error;;
# 2 "lib/bparser.mly"
 
(******************************************************************************)
(* The Harmony Project                                                        *)
(* harmony@lists.seas.upenn.edu                                               *)
(******************************************************************************)
(* Copyright (C) 2008 J. Nathan Foster and Benjamin C. Pierce                 *)
(*                                                                            *)
(* This library is free software; you can redistribute it and/or              *)
(* modify it under the terms of the GNU Lesser General Public                 *)
(* License as published by the Free Software Foundation; either               *)
(* version 2.1 of the License, or (at your option) any later version.         *)
(*                                                                            *)
(* This library is distributed in the hope that it will be useful,            *)
(* but WITHOUT ANY WARRANTY; without even the implied warranty of             *)
(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU          *)
(* Lesser General Public License for more details.                            *)
(******************************************************************************)
(* /src/parser.mly                                                            *)
(* Boomerang parser                                                           *)
(* $Id: bparser.srcy 4998 2011-03-16 21:53:34Z mgree $ *)
(******************************************************************************)

(* imports and abbreviations *)
open Bsyntax
open Bident
module L = Blenses 
let sprintf = Printf.sprintf
let (@) = Safelist.append

(* helpers for merging parsing info *)
let m = Info.merge_inc 
let me1 e1 i2 = m (info_of_exp e1) i2
let me2 i1 e2 = m i1 (info_of_exp e2)
let me e1 e2 = m (info_of_exp e1) (info_of_exp e2) 
let mp2 i1 p2 = m i1 (info_of_pat p2)
let mp p1 p2 = m (info_of_pat p1) (info_of_pat p2)

(* error *)
let syntax_error i msg = 
  raise 
    (Error.Harmony_error
        (fun () -> Util.format "@[%s: Syntax error: %s @\n@]" 
          (Info.string_of_t i)
          msg))

(* default chunk tag *)
let mk_default_tag i =
  let p a b = EPair (i, a, b) in
  let species = mk_core_var i "Greedy" in
  let predicate = mk_app i (mk_core_var i "Threshold") (EInteger (i, 0)) in
  let weight = mk_core_var i "NoKey" in
  let name = EString (i, "") in
  let tag = mk_app i (mk_core_var i "Tag") (p (p (p species predicate) weight) name) in
  tag

(* helper for parsing csets *)
let parse_cset s = 
  let err () = raise (Parsing.Parse_error) in 
  let i = ref 0 in
  let l = String.length s in
  let eos () = !i = l in
  let test c = not (eos ()) && s.[!i] = c in
  let accept c = let r = test c in if r then incr i; r in
  let num = function 
    | '0' -> 0 | '1' -> 1 | '2' -> 2 | '3' -> 3 | '4' -> 4 
    | '5' -> 5 | '6' -> 6 | '7' -> 7 | '8' -> 8 | '9' -> 9 
    | _ -> err () in
  let hex = function 
    | '0' -> 0 | '1' -> 1 | '2' -> 2 | '3' -> 3 | '4' -> 4
    | '5' -> 5 | '6' -> 6 | '7' -> 7 | '8' -> 8 | '9' -> 9
    | 'A' | 'a' -> 10 | 'B' | 'b' -> 11 | 'C' | 'c' -> 12 
    | 'D' | 'd' -> 13 | 'E' |'e' -> 14 | 'F' | 'f' -> 15 
    | _ -> err () in
  let get () = 
    let do_get () = let r = s.[!i] in incr i; r in 
      if accept '\\' then 
        match do_get () with
          | '^' -> '^'
          | '-' -> '-'
          | 'b' -> '\008'
          | 'n' -> '\010'
          | 'r' -> '\013'
          | 't' -> '\009'
          | '\\' -> '\\'
          | c   -> 
          if c = '0' && accept 'x' then 
            let h1 = hex (do_get ()) in 
            let h2 = hex (do_get ()) in 
            Char.chr (16 * h1 + h2)
          else
            let n1 = num c in 
            let n2 = num (do_get ()) in 
            let n3 = num (do_get ()) in 
            Char.chr (100 * n1 + 10 * n2 + n3) 
      else (do_get ()) in 
  let next () = if eos () then err () else get () in 
  let rec go acc = 
    if eos () then Safelist.rev acc
    else 
      let acc' = 
        if accept '-' then err ()
        else
          let c1 = next () in 
            if accept '-' then 
              (c1,next ())::acc 
            else (c1,c1)::acc in 
        go acc' in 
    go []

(* helper for parsing qids *)
let parse_qid i qstr = 
  let err () = raise (Parsing.Parse_error) in 
  let j = ref 0 in
  let l = String.length qstr in
  let eos () = !j = l in
  let get () = let r = qstr.[!j] in incr j; r in 
  let next () = if eos () then err () else get () in 
  let rec go (acc,x) = 
    if eos () then (Safelist.rev acc,(i,x))
    else 
      let c1 = next () in 
      if c1 = '.' then go ((i,x)::acc,"")
      else go (acc,x ^ (String.make 1 c1)) in 
  go ([],"")

(* helper for building functions *)
let build_fun i param_alts body sort = 
  let f,_,f_sort = 
    Safelist.fold_right
      (fun pa (f,so,s) -> match pa with 
         | Misc.Left(p) -> 
             let f' = EFun(i,p,so,f) in 
             let s' = SFunction(Id.wild,sort_of_param p,s) in
             (f',None,s')
         | Misc.Right(a) -> 
             let f' = ETyFun(i,a,f) in 
             let s' = SForall(a,s) in 
             (f',None,s'))
      param_alts (body,Some sort,sort) in 
  (f,f_sort)

(* helper for building un-sorted functions *)
let build_bare_fun i param_alts body = 
  Safelist.fold_right
    (fun pa f -> 
       match pa with 
         | Misc.Left(p) -> 
             EFun(i,p,None,f)
         | Misc.Right(a) -> 
             ETyFun(i,a,f))
    param_alts body

let rec mk_tree op l = match l with
  | [] -> syntax_error (Info.M "mk_tree") "empty tree"
  | [e1] -> e1
  | _ -> 
      let n = Safelist.length l in 
      let rec take i l acc = match i,l with
        | 0,_ | _,[] -> (Safelist.rev acc,l)
        | _,h::t -> take (pred i) t (h::acc) in
      let l1,l2 = take (n/2) l [] in
      let e1 = mk_tree op l1 in
      let e2 = mk_tree op l2 in 
      let res = mk_over (me e1 e2) op [e1;e2] in 
      res

let rec fixup_pat i p0 = match p0 with 
  | PVnt(i,x,Some pti) -> PVnt(i,x,Some (fixup_pat i pti)) (*syntax_error i "illegal pattern"*)
  | PVnt(i,x,None)   -> PVar(i,Qid.id_of_t x,None)
  | PPar(i,p1,p2)    -> PPar(i,fixup_pat i p1,fixup_pat i p2)
  | _ -> p0

(* helpers for building grammars *)
let rec info_of_nonempty_list f l = match l with
  | [] -> syntax_error (Info.M "info_of_nonempty_list") "list was empty"
  | [h] -> f h
  | h::t -> m (f h) (info_of_nonempty_list f t)

let info_of_rules =
  info_of_nonempty_list info_of_rule

let add_aexp ei (i,ys) = (me1 ei i,ei::ys)

let add_atom ai (i,xs,bs) = match ai with
  | Misc.Left e1 -> (me1 e1 i,e1::xs,bs)
  | Misc.Right (l1,e1) ->
      let i1 = Id.info_of_t l1 in
      (m i1 i, EVar(i,Qid.t_of_id l1)::xs,(l1,e1)::bs)

# 295 "lib/bparser.ml"
let yytransl_const = [|
    0|]

let yytransl_block = [|
    0 (* EOF *);
  257 (* MODULE *);
  258 (* OPEN *);
  259 (* OF *);
  260 (* TYPE *);
  261 (* UNIT *);
  262 (* BOOL *);
  263 (* INT *);
  264 (* CHAR *);
  265 (* STRING *);
  266 (* REGEXP *);
  267 (* AREGEXP *);
  268 (* SKELETONS *);
  269 (* RESOURCES *);
  270 (* LENS *);
  271 (* CANONIZER *);
  272 (* FORALL *);
  273 (* WHERE *);
  274 (* BOOLPREFS *);
  275 (* INTPREFS *);
  276 (* STRINGPREFS *);
  277 (* STRINGLISTPREFS *);
  278 (* STR *);
  279 (* UIDENT *);
  280 (* LIDENT *);
  281 (* QUALIDENT *);
  282 (* TYVARIDENT *);
  283 (* CSET *);
  284 (* NSET *);
  285 (* CHARACTER *);
  286 (* INTEGER *);
  287 (* BOOLEAN *);
  288 (* CEX *);
  289 (* FLOAT *);
  290 (* HASH *);
  291 (* LBRACE *);
  292 (* RBRACE *);
  293 (* LLIST *);
  294 (* LBRACK *);
  295 (* RBRACK *);
  296 (* LPAREN *);
  297 (* RPAREN *);
  298 (* LANGLE *);
  299 (* RANGLE *);
  300 (* ARROW *);
  301 (* DARROW *);
  302 (* DEQARROW *);
  303 (* EQARROW *);
  304 (* BEGIN *);
  305 (* END *);
  306 (* GRAMMAR *);
  307 (* AND *);
  308 (* FUN *);
  309 (* LET *);
  310 (* IN *);
  311 (* TEST *);
  312 (* MATCH *);
  313 (* WITH *);
  314 (* SEMI *);
  315 (* COMMA *);
  316 (* DOT *);
  317 (* EQUAL *);
  318 (* COLON *);
  319 (* COLONCOLON *);
  320 (* BACKSLASH *);
  321 (* SLASH *);
  322 (* STAR *);
  323 (* RLUS *);
  324 (* BANG *);
  325 (* BAR *);
  326 (* BARBAR *);
  327 (* DOLLAR *);
  328 (* PLUS *);
  329 (* MINUS *);
  330 (* UNDERLINE *);
  331 (* HAT *);
  332 (* TILDE *);
  333 (* AMPERSAND *);
  334 (* QMARK *);
  335 (* LT *);
  336 (* GT *);
  337 (* LEQ *);
  338 (* GEQ *);
  339 (* STYPE *);
  340 (* VTYPE *);
  341 (* ASTYPE *);
  342 (* AVTYPE *);
  343 (* BIJ *);
  344 (* GET *);
  345 (* PUT *);
  346 (* CREATE *);
  347 (* CANONIZE *);
  348 (* CHOOSE *);
  349 (* INTO *);
  350 (* ERROR *);
  351 (* PERM *);
  352 (* PROJECT *);
  353 (* ID *);
  354 (* SYNTH *);
    0|]

let yylhs = "\255\255\
\001\000\004\000\004\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\014\000\014\000\014\000\
\015\000\015\000\011\000\011\000\011\000\011\000\011\000\017\000\
\017\000\017\000\017\000\019\000\019\000\019\000\020\000\020\000\
\022\000\022\000\023\000\023\000\023\000\024\000\024\000\025\000\
\025\000\026\000\026\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\027\000\
\027\000\027\000\027\000\027\000\027\000\028\000\028\000\030\000\
\030\000\031\000\031\000\029\000\029\000\032\000\032\000\032\000\
\032\000\032\000\033\000\033\000\034\000\035\000\036\000\037\000\
\016\000\016\000\016\000\016\000\016\000\016\000\038\000\038\000\
\039\000\039\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\042\000\042\000\045\000\
\021\000\021\000\047\000\047\000\040\000\040\000\040\000\040\000\
\040\000\040\000\043\000\043\000\043\000\048\000\048\000\049\000\
\050\000\050\000\051\000\052\000\052\000\053\000\054\000\054\000\
\055\000\055\000\056\000\044\000\044\000\008\000\008\000\003\000\
\003\000\003\000\057\000\057\000\009\000\059\000\059\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\058\000\010\000\010\000\060\000\060\000\
\060\000\061\000\061\000\062\000\062\000\062\000\063\000\063\000\
\063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
\063\000\063\000\063\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\065\000\006\000\006\000\006\000\
\066\000\066\000\064\000\064\000\067\000\067\000\007\000\068\000\
\068\000\069\000\069\000\046\000\046\000\012\000\012\000\012\000\
\071\000\071\000\071\000\072\000\072\000\072\000\072\000\072\000\
\072\000\072\000\072\000\072\000\073\000\073\000\070\000\070\000\
\070\000\002\000\000\000\000\000\000\000"

let yylen = "\002\000\
\006\000\003\000\000\000\006\000\006\000\008\000\006\000\007\000\
\005\000\005\000\005\000\005\000\000\000\001\000\001\000\001\000\
\001\000\001\000\009\000\007\000\008\000\006\000\001\000\004\000\
\006\000\003\000\001\000\004\000\006\000\001\000\003\000\001\000\
\003\000\001\000\001\000\001\000\001\000\003\000\003\000\003\000\
\003\000\003\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\004\000\004\000\003\000\003\000\003\000\005\000\003\000\
\003\000\003\000\003\000\002\000\003\000\003\000\003\000\003\000\
\002\000\004\000\004\000\006\000\002\000\001\000\002\000\001\000\
\004\000\001\000\003\000\003\000\001\000\001\000\005\000\001\000\
\001\000\001\000\004\000\001\000\001\000\001\000\002\000\003\000\
\002\000\002\000\002\000\002\000\002\000\003\000\005\000\003\000\
\002\000\003\000\000\000\003\000\001\000\001\000\001\000\003\000\
\004\000\005\000\001\000\002\000\003\000\001\000\003\000\002\000\
\000\000\002\000\002\000\000\000\002\000\003\000\002\000\003\000\
\000\000\003\000\004\000\001\000\003\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\002\000\002\000\000\000\005\000\
\009\000\009\000\009\000\009\000\009\000\009\000\007\000\008\000\
\007\000\003\000\001\000\002\000\004\000\001\000\003\000\007\000\
\001\000\003\000\001\000\002\000\006\000\001\000\003\000\006\000\
\005\000\008\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\005\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\000\000\001\000\003\000\
\001\000\003\000\001\000\003\000\001\000\003\000\002\000\000\000\
\003\000\001\000\001\000\003\000\001\000\003\000\002\000\001\000\
\002\000\002\000\001\000\001\000\002\000\001\000\001\000\004\000\
\001\000\001\000\001\000\003\000\001\000\001\000\001\000\003\000\
\003\000\001\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\243\000\242\000\244\000\
\145\000\144\000\146\000\245\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\
\205\000\000\000\000\000\207\000\233\000\000\000\000\000\000\000\
\230\000\231\000\000\000\000\000\237\000\000\000\000\000\224\000\
\228\000\102\000\100\000\101\000\096\000\097\000\098\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\093\000\000\000\000\000\000\000\000\000\000\000\
\000\000\048\000\049\000\050\000\051\000\052\000\053\000\054\000\
\086\000\000\000\000\000\094\000\001\000\000\000\000\000\000\000\
\000\000\234\000\238\000\235\000\223\000\000\000\000\000\000\000\
\239\000\229\000\000\000\221\000\218\000\000\000\227\000\163\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\103\000\000\000\000\000\000\000\000\000\000\000\000\000\023\000\
\000\000\000\000\000\000\034\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\085\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\081\000\000\000\000\000\000\000\000\000\
\000\000\117\000\118\000\119\000\087\000\105\000\106\000\107\000\
\108\000\109\000\000\000\000\000\208\000\000\000\000\000\225\000\
\226\000\236\000\000\000\000\000\143\000\142\000\000\000\164\000\
\000\000\000\000\000\000\000\000\149\000\222\000\000\000\203\000\
\197\000\196\000\189\000\190\000\191\000\192\000\193\000\194\000\
\195\000\198\000\000\000\199\000\200\000\201\000\202\000\147\000\
\148\000\000\000\000\000\187\000\188\000\166\000\000\000\171\000\
\000\000\204\000\000\000\000\000\000\000\000\000\000\000\000\000\
\091\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\110\000\000\000\092\000\000\000\104\000\000\000\000\000\
\000\000\000\000\014\000\015\000\000\000\000\000\017\000\000\000\
\018\000\000\000\000\000\000\000\000\000\000\000\061\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\057\000\000\000\000\000\059\000\
\000\000\000\000\000\000\000\000\210\000\000\000\000\000\000\000\
\232\000\220\000\241\000\000\000\000\000\162\000\000\000\000\000\
\000\000\150\000\009\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\172\000\099\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\026\000\000\000\
\033\000\038\000\040\000\039\000\041\000\000\000\000\000\141\000\
\082\000\083\000\000\000\010\000\012\000\011\000\000\000\066\000\
\000\000\120\000\000\000\089\000\004\000\000\000\005\000\000\000\
\215\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\
\000\000\000\000\000\000\175\000\000\000\000\000\167\000\000\000\
\170\000\123\000\000\000\095\000\024\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\111\000\000\000\
\000\000\000\000\000\000\000\000\000\000\139\000\000\000\000\000\
\000\000\000\000\121\000\214\000\000\000\000\000\000\000\000\000\
\152\000\000\000\165\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\008\000\000\000\124\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\113\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\
\135\000\084\000\122\000\217\000\000\000\000\000\000\000\000\000\
\000\000\006\000\186\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\177\000\000\000\000\000\000\000\125\000\025\000\
\000\000\000\000\022\000\000\000\114\000\029\000\000\000\112\000\
\000\000\136\000\130\000\000\000\134\000\000\000\159\000\000\000\
\000\000\000\000\000\000\000\000\161\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\176\000\212\000\
\173\000\020\000\000\000\000\000\116\000\000\000\131\000\138\000\
\000\000\000\000\000\000\000\000\000\000\000\000\160\000\180\000\
\181\000\182\000\184\000\183\000\185\000\000\000\179\000\168\000\
\000\000\021\000\133\000\153\000\154\000\155\000\157\000\156\000\
\158\000\178\000\019\000"

let yydgoto = "\004\000\
\006\000\008\000\059\000\016\000\022\000\027\000\015\001\038\000\
\098\000\033\001\109\000\039\000\110\000\237\000\242\000\111\000\
\112\000\204\000\113\000\114\000\100\001\115\000\116\000\117\000\
\118\000\119\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\157\000\
\075\000\076\000\092\001\124\000\101\001\102\001\145\001\107\001\
\108\001\150\001\189\001\215\001\109\001\110\001\153\001\125\000\
\205\000\099\000\181\000\206\000\207\000\208\000\209\000\132\001\
\210\000\080\000\016\001\073\001\092\000\093\000\094\000\095\000\
\041\000"

let yysindex = "\184\001\
\014\255\060\255\023\001\000\000\109\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\047\255\193\255\023\001\027\255\
\193\255\179\255\009\255\182\255\023\008\210\000\000\000\175\255\
\000\000\215\255\222\255\000\000\000\000\000\000\000\000\084\006\
\000\000\000\000\209\255\202\255\000\000\141\255\067\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\246\255\
\220\255\215\006\133\007\133\007\010\000\006\009\006\009\006\009\
\173\012\006\009\000\000\093\000\177\009\236\255\218\255\244\255\
\233\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\052\255\150\000\000\000\000\000\027\255\255\255\029\000\
\013\000\000\000\000\000\000\000\000\000\149\000\084\006\084\006\
\000\000\000\000\048\255\000\000\000\000\014\000\000\000\000\000\
\168\000\169\255\141\255\149\000\133\007\145\010\133\007\145\010\
\000\000\141\255\182\255\023\008\047\000\019\000\106\009\000\000\
\026\000\058\000\066\000\000\000\035\000\063\000\195\255\085\000\
\035\009\086\000\084\000\113\000\133\000\173\012\169\006\081\011\
\000\000\110\011\220\007\085\255\006\009\006\009\006\009\006\009\
\006\009\052\008\006\009\006\009\006\009\006\009\006\009\006\009\
\006\009\006\009\006\009\000\000\006\009\006\009\006\009\006\009\
\086\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\126\000\215\255\000\000\167\000\061\255\000\000\
\000\000\000\000\149\000\149\000\000\000\000\000\152\000\000\000\
\137\000\133\007\145\010\141\255\000\000\000\000\027\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\177\000\000\000\000\000\000\000\000\000\000\000\
\000\000\122\010\143\000\000\000\000\000\000\000\000\255\000\000\
\087\000\000\000\165\000\174\000\024\255\141\255\110\255\008\000\
\000\000\006\009\168\007\023\008\023\008\023\008\023\008\023\008\
\023\008\000\000\133\007\000\000\154\000\000\000\010\000\173\012\
\173\012\006\009\000\000\000\000\027\255\173\012\000\000\027\255\
\000\000\027\255\173\012\173\012\173\012\250\010\000\000\173\012\
\006\009\173\012\173\012\173\012\173\012\173\012\173\012\027\002\
\173\012\173\012\173\012\250\010\000\000\173\012\250\010\000\000\
\173\012\006\255\186\000\027\255\000\000\223\000\027\255\163\000\
\000\000\000\000\000\000\014\000\000\000\000\000\168\010\027\255\
\182\000\000\000\000\000\191\000\196\000\200\000\000\000\202\000\
\026\255\133\007\191\010\214\010\000\000\000\000\249\007\133\007\
\248\012\059\000\133\007\145\010\083\000\173\012\000\000\066\000\
\000\000\000\000\000\000\000\000\000\000\226\000\021\010\000\000\
\000\000\000\000\219\010\000\000\000\000\000\000\172\005\000\000\
\006\009\000\000\040\255\000\000\000\000\145\010\000\000\167\000\
\000\000\219\000\228\000\249\254\000\000\133\007\145\010\133\007\
\082\008\145\010\250\006\000\000\145\010\027\255\000\000\122\010\
\000\000\000\000\199\255\000\000\000\000\236\000\133\007\145\010\
\231\000\230\000\149\000\249\000\243\000\252\254\000\000\251\000\
\202\012\150\000\202\012\247\000\245\000\000\000\173\012\238\000\
\173\012\025\001\000\000\000\000\163\000\133\007\111\008\046\007\
\000\000\027\255\000\000\019\001\119\000\023\011\045\001\003\255\
\133\007\027\001\005\001\029\001\000\000\004\001\000\000\249\007\
\133\007\017\001\011\001\133\007\133\007\243\000\145\010\149\000\
\000\000\023\008\173\012\245\000\202\012\000\000\173\012\202\012\
\000\000\000\000\000\000\000\000\033\001\132\000\052\011\133\007\
\034\001\000\000\000\000\006\009\006\009\142\008\171\008\081\007\
\191\010\035\001\000\000\145\010\087\000\145\010\000\000\000\000\
\133\007\133\007\000\000\026\001\000\000\000\000\243\000\000\000\
\150\000\000\000\000\000\248\009\000\000\245\000\000\000\006\009\
\006\009\202\008\231\008\049\001\000\000\139\011\168\011\051\001\
\197\011\055\001\226\011\133\007\057\001\058\001\000\000\000\000\
\000\000\000\000\046\001\133\007\000\000\248\009\000\000\000\000\
\255\011\028\012\060\001\057\012\061\001\086\012\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\064\001\000\000\000\000\
\133\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\038\000\000\000\107\002\
\038\000\000\000\089\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\130\255\135\255\097\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\158\000\006\003\047\003\080\003\
\121\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\087\001\217\000\000\000\000\000\071\001\081\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\124\255\230\255\
\000\000\000\000\000\000\000\000\000\000\157\255\000\000\000\000\
\000\000\000\000\041\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\117\005\024\001\000\000\
\181\006\134\006\159\000\000\000\238\005\013\006\042\006\000\000\
\208\255\000\000\000\000\000\000\074\001\154\003\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\041\000\000\000\000\000\004\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\207\005\000\000\
\096\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\004\000\045\000\000\000\004\000\
\000\000\004\000\195\003\044\002\069\002\143\002\000\000\183\001\
\000\000\002\000\228\003\013\004\054\004\087\004\128\004\000\000\
\161\004\202\004\235\004\186\002\000\000\224\001\229\002\000\000\
\150\001\000\000\000\000\004\000\000\000\027\000\004\000\046\000\
\000\000\000\000\000\000\000\000\166\000\000\000\000\000\004\000\
\000\000\000\000\000\000\000\000\189\001\012\003\012\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\176\005\000\000\076\006\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\020\005\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\149\255\108\002\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\161\006\101\006\000\000\000\000\135\002\
\000\000\115\012\079\001\000\000\113\255\000\000\000\000\000\000\
\053\005\000\000\000\000\000\000\046\000\000\000\000\000\000\000\
\000\000\004\000\000\000\000\000\000\000\000\000\000\000\108\001\
\000\000\000\000\093\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\101\006\000\000\000\000\
\000\000\000\000\000\000\113\255\079\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\101\006\000\000\
\144\012\000\000\000\000\082\255\000\000\113\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\121\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\082\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\225\000\122\002\196\255\000\000\000\000\166\255\
\155\255\165\255\205\255\043\002\131\002\000\000\000\000\003\000\
\190\001\114\001\000\000\051\002\000\000\042\255\196\001\000\000\
\000\000\054\255\000\000\000\000\124\000\000\000\169\001\000\000\
\000\000\000\000\000\000\000\000\000\000\142\000\000\000\000\000\
\226\254\000\000\036\001\195\001\196\254\234\255\146\254\158\254\
\000\000\016\001\000\000\213\000\167\254\000\000\138\254\000\000\
\050\255\190\255\249\001\247\254\092\001\145\001\000\000\010\001\
\249\255\019\002\113\001\073\001\164\255\016\002\020\002\028\000\
\022\002"

let yytablesize = 3602
let yytable = "\120\000\
\122\000\065\000\037\001\013\000\213\000\048\001\177\000\182\000\
\149\001\120\001\203\000\028\000\212\000\091\000\005\000\148\001\
\214\000\163\000\079\000\050\001\051\001\052\001\053\001\061\000\
\106\001\087\001\213\000\018\000\147\000\186\001\019\000\181\001\
\180\000\121\001\025\000\147\000\147\000\003\000\142\001\146\001\
\241\000\066\001\083\001\035\001\016\000\216\000\169\001\040\000\
\026\000\183\000\149\001\211\000\147\000\121\000\171\000\147\000\
\126\000\127\000\128\000\085\000\130\000\011\001\190\001\167\000\
\067\001\036\001\084\001\040\001\036\001\114\001\147\000\216\001\
\213\001\142\000\106\001\115\001\106\001\147\000\018\001\020\000\
\091\001\021\000\007\000\183\001\085\001\041\001\153\000\025\001\
\170\000\184\000\185\000\186\000\187\000\188\000\189\000\190\000\
\191\000\192\000\193\000\194\000\195\000\017\001\196\000\197\000\
\198\000\199\000\171\000\014\000\200\000\201\000\025\000\032\001\
\042\001\180\000\168\000\169\000\185\001\154\000\106\001\171\000\
\188\001\106\001\027\001\155\000\202\000\100\000\024\001\101\000\
\102\000\156\000\132\000\013\000\132\000\238\000\040\000\243\000\
\244\000\245\000\246\000\248\000\250\000\251\000\252\000\253\000\
\254\000\255\000\000\001\001\001\002\001\003\001\132\000\004\001\
\006\001\007\001\009\001\143\000\079\000\214\001\032\000\206\001\
\142\000\137\000\239\000\137\000\234\000\190\000\096\000\234\000\
\100\000\143\000\043\001\044\001\190\000\190\000\142\000\054\001\
\060\001\091\001\240\000\061\001\097\000\062\001\234\000\214\001\
\234\000\234\000\234\000\076\001\234\000\190\000\234\000\234\000\
\190\000\238\000\015\000\238\000\238\000\219\000\129\000\184\001\
\219\000\024\000\148\000\029\000\030\000\031\000\032\000\069\001\
\098\001\077\000\071\001\033\000\034\000\035\000\190\000\219\000\
\090\000\219\000\219\000\077\001\046\001\036\000\209\001\029\000\
\087\000\083\000\088\000\012\000\089\000\178\000\179\000\033\000\
\034\000\035\000\116\001\078\000\059\001\135\001\086\001\017\000\
\025\000\036\000\090\000\123\001\093\001\081\000\127\001\097\001\
\086\000\131\001\055\000\063\001\148\000\134\001\104\000\037\000\
\136\001\221\000\065\000\247\000\139\001\065\000\148\000\224\000\
\225\000\055\000\055\000\148\000\148\000\148\000\235\000\148\000\
\005\001\235\000\008\001\037\000\055\000\055\000\055\000\055\000\
\055\000\133\001\122\001\213\000\124\001\103\000\213\000\130\001\
\235\000\123\000\235\000\235\000\235\000\150\000\003\000\149\000\
\065\000\003\000\065\000\138\001\065\000\016\000\216\000\151\000\
\016\000\216\000\065\000\182\001\013\000\152\000\065\000\065\000\
\065\000\164\000\065\000\065\000\065\000\162\001\065\000\065\000\
\045\001\220\000\157\001\113\001\161\001\165\000\065\000\065\000\
\065\000\166\000\065\000\213\000\172\000\170\001\065\000\213\000\
\131\001\213\000\127\001\126\001\151\000\176\001\088\000\217\000\
\179\001\180\001\003\000\133\000\003\000\016\000\216\000\213\000\
\219\000\016\000\216\000\016\000\216\000\151\000\151\000\222\000\
\029\000\087\000\083\000\088\000\196\001\089\000\200\000\201\000\
\033\000\034\000\035\000\220\000\205\001\057\001\058\001\095\001\
\096\001\159\001\036\000\148\000\221\000\210\001\211\001\226\000\
\148\000\148\000\148\000\148\000\223\000\148\000\228\000\148\000\
\148\000\148\000\148\000\148\000\148\000\148\000\148\000\148\000\
\148\000\148\000\229\000\148\000\148\000\064\000\148\000\099\001\
\230\001\131\000\132\000\235\000\037\000\235\000\235\000\032\000\
\234\001\230\000\032\000\164\001\165\001\133\000\198\001\199\001\
\201\001\203\001\029\000\087\000\083\000\088\000\012\001\089\000\
\192\001\193\001\033\000\034\000\035\000\243\001\063\000\231\000\
\001\000\002\000\003\000\148\000\036\000\014\001\173\000\174\000\
\022\001\175\000\217\001\218\001\220\001\222\001\023\001\032\000\
\148\000\032\000\028\001\034\001\148\000\038\001\240\000\032\000\
\176\000\240\000\039\001\032\000\032\000\032\000\055\001\032\000\
\032\000\090\000\055\000\055\000\090\000\068\001\037\000\062\000\
\240\000\070\001\240\000\240\000\228\000\032\000\055\000\072\001\
\158\000\159\000\160\000\161\000\162\000\079\001\090\000\090\000\
\090\000\090\000\078\001\090\000\090\000\090\000\090\000\090\000\
\090\000\080\001\090\000\090\000\154\001\081\001\148\000\090\000\
\090\000\090\000\090\000\090\000\090\000\090\000\090\000\082\001\
\090\000\090\000\090\000\148\000\103\001\090\000\090\000\090\000\
\118\001\090\000\090\000\090\000\090\000\090\000\090\000\137\001\
\055\000\119\001\090\000\055\000\140\001\090\000\090\000\090\000\
\090\000\090\000\141\001\151\001\090\000\090\000\090\000\090\000\
\090\000\090\000\090\000\068\000\148\000\009\000\010\000\011\000\
\090\000\090\000\090\000\090\000\090\000\090\000\143\001\144\001\
\147\001\152\001\249\000\163\001\155\001\168\001\055\000\172\001\
\055\000\174\001\055\000\171\001\069\000\173\001\177\001\178\001\
\055\000\191\001\197\001\207\001\055\000\055\000\055\000\212\001\
\055\000\055\000\055\000\148\000\148\000\055\000\148\000\088\000\
\148\000\223\001\088\000\226\001\055\000\055\000\055\000\228\001\
\055\000\231\001\232\001\233\001\238\001\240\001\148\000\148\000\
\242\001\148\000\013\000\148\000\088\000\088\000\088\000\088\000\
\206\000\088\000\088\000\088\000\088\000\088\000\088\000\013\000\
\088\000\209\000\140\000\129\000\169\000\088\000\088\000\088\000\
\088\000\088\000\088\000\088\000\088\000\211\000\088\000\088\000\
\088\000\167\000\023\000\088\000\088\000\088\000\058\000\088\000\
\088\000\088\000\088\000\088\000\088\000\215\000\064\000\060\000\
\047\001\064\000\094\001\088\000\088\000\088\000\216\000\088\000\
\049\001\064\001\088\000\088\000\187\001\088\000\088\000\088\000\
\088\000\056\001\235\001\175\001\026\001\128\001\088\000\088\000\
\088\000\088\000\088\000\088\000\089\001\208\001\013\001\063\000\
\117\001\056\000\063\000\019\001\064\000\156\001\064\000\020\001\
\064\000\021\001\000\000\000\000\000\000\000\000\064\000\000\000\
\000\000\000\000\064\000\064\000\064\000\190\000\064\000\064\000\
\064\000\000\000\064\000\064\000\190\000\190\000\000\000\000\000\
\000\000\000\000\064\000\064\000\064\000\063\000\064\000\063\000\
\062\000\063\000\064\000\062\000\060\000\190\000\000\000\063\000\
\190\000\000\000\000\000\063\000\063\000\063\000\000\000\063\000\
\063\000\063\000\000\000\063\000\063\000\000\000\000\000\190\000\
\000\000\000\000\000\000\063\000\063\000\063\000\190\000\063\000\
\000\000\000\000\063\000\000\000\000\000\044\000\062\000\000\000\
\062\000\000\000\062\000\000\000\000\000\000\000\000\000\000\000\
\062\000\000\000\000\000\000\000\062\000\062\000\062\000\000\000\
\062\000\062\000\062\000\000\000\062\000\062\000\000\000\000\000\
\000\000\000\000\000\000\000\000\062\000\062\000\062\000\000\000\
\062\000\000\000\000\000\062\000\068\000\000\000\045\000\068\000\
\042\000\009\000\010\000\011\000\000\000\043\000\044\000\045\000\
\046\000\047\000\048\000\000\000\049\000\000\000\000\000\000\000\
\000\000\000\000\050\000\000\000\051\000\069\000\000\000\000\000\
\069\000\000\000\052\000\000\000\053\000\000\000\000\000\046\000\
\000\000\000\000\068\000\000\000\068\000\000\000\068\000\000\000\
\000\000\000\000\000\000\000\000\068\000\000\000\000\000\000\000\
\068\000\068\000\068\000\000\000\068\000\068\000\068\000\068\000\
\068\000\068\000\000\000\069\000\000\000\069\000\000\000\069\000\
\068\000\068\000\068\000\000\000\068\000\069\000\000\000\065\001\
\047\000\069\000\069\000\069\000\195\000\069\000\069\000\069\000\
\069\000\069\000\069\000\195\000\195\000\000\000\000\000\000\000\
\000\000\069\000\069\000\069\000\000\000\069\000\000\000\058\000\
\000\000\000\000\058\000\000\000\195\000\000\000\000\000\195\000\
\000\000\076\000\000\000\000\000\144\000\144\000\144\000\144\000\
\000\000\144\000\144\000\144\000\144\000\144\000\144\000\000\000\
\144\000\000\000\000\000\000\000\000\000\195\000\144\000\000\000\
\144\000\000\000\000\000\144\000\000\000\058\000\144\000\058\000\
\144\000\058\000\056\000\000\000\000\000\056\000\000\000\058\000\
\000\000\000\000\075\000\058\000\058\000\058\000\000\000\058\000\
\058\000\058\000\058\000\058\000\058\000\000\000\000\000\000\000\
\000\000\000\000\000\000\058\000\058\000\058\000\000\000\058\000\
\000\000\144\000\144\000\144\000\144\000\144\000\000\000\000\000\
\056\000\000\000\056\000\077\000\056\000\060\000\000\000\000\000\
\060\000\000\000\056\000\000\000\000\000\000\000\056\000\056\000\
\056\000\000\000\056\000\056\000\056\000\056\000\056\000\056\000\
\000\000\000\000\000\000\000\000\000\000\000\000\056\000\056\000\
\056\000\000\000\056\000\000\000\000\000\000\000\044\000\000\000\
\000\000\044\000\000\000\060\000\079\000\060\000\000\000\060\000\
\000\000\000\000\000\000\000\000\000\000\060\000\000\000\000\000\
\000\000\060\000\060\000\060\000\195\000\060\000\060\000\060\000\
\060\000\060\000\060\000\195\000\195\000\000\000\000\000\000\000\
\000\000\060\000\060\000\060\000\044\000\060\000\044\000\045\000\
\044\000\000\000\045\000\000\000\195\000\078\000\044\000\195\000\
\000\000\000\000\044\000\044\000\044\000\000\000\044\000\044\000\
\044\000\000\000\044\000\044\000\000\000\000\000\195\000\000\000\
\000\000\000\000\044\000\044\000\044\000\195\000\044\000\000\000\
\046\000\000\000\000\000\046\000\000\000\045\000\080\000\045\000\
\000\000\045\000\000\000\000\000\000\000\000\000\000\000\045\000\
\000\000\000\000\000\000\045\000\045\000\045\000\000\000\045\000\
\045\000\045\000\000\000\045\000\045\000\000\000\000\000\000\000\
\000\000\000\000\000\000\045\000\045\000\045\000\046\000\045\000\
\046\000\047\000\046\000\000\000\047\000\000\000\000\000\070\000\
\046\000\000\000\000\000\000\000\046\000\046\000\046\000\000\000\
\046\000\046\000\046\000\000\000\046\000\046\000\000\000\000\000\
\000\000\000\000\000\000\000\000\046\000\046\000\046\000\000\000\
\046\000\000\000\076\000\000\000\000\000\076\000\000\000\047\000\
\072\000\047\000\000\000\047\000\000\000\000\000\000\000\000\000\
\000\000\047\000\000\000\000\000\000\000\047\000\047\000\047\000\
\000\000\047\000\047\000\047\000\000\000\047\000\047\000\000\000\
\000\000\000\000\000\000\000\000\000\000\047\000\047\000\047\000\
\076\000\047\000\076\000\075\000\076\000\000\000\075\000\000\000\
\000\000\073\000\076\000\000\000\000\000\000\000\076\000\076\000\
\076\000\000\000\076\000\076\000\076\000\000\000\076\000\076\000\
\000\000\000\000\000\000\000\000\000\000\000\000\076\000\076\000\
\076\000\000\000\076\000\000\000\077\000\000\000\000\000\077\000\
\000\000\075\000\074\000\075\000\000\000\075\000\000\000\000\000\
\000\000\000\000\000\000\075\000\000\000\000\000\000\000\075\000\
\075\000\075\000\000\000\075\000\075\000\075\000\000\000\075\000\
\075\000\000\000\000\000\000\000\000\000\000\000\000\000\075\000\
\075\000\075\000\077\000\075\000\077\000\079\000\077\000\000\000\
\079\000\000\000\000\000\067\000\077\000\000\000\000\000\000\000\
\077\000\077\000\077\000\000\000\077\000\077\000\077\000\000\000\
\077\000\077\000\000\000\000\000\000\000\000\000\000\000\000\000\
\077\000\077\000\077\000\000\000\077\000\000\000\000\000\000\000\
\000\000\000\000\000\000\079\000\071\000\079\000\078\000\079\000\
\000\000\078\000\000\000\000\000\000\000\079\000\000\000\000\000\
\000\000\079\000\079\000\079\000\000\000\079\000\079\000\079\000\
\000\000\079\000\079\000\000\000\000\000\000\000\000\000\000\000\
\000\000\079\000\079\000\079\000\000\000\079\000\000\000\080\000\
\000\000\000\000\080\000\000\000\078\000\000\000\078\000\174\000\
\078\000\000\000\000\000\000\000\000\000\000\000\078\000\000\000\
\000\000\000\000\078\000\078\000\078\000\000\000\078\000\078\000\
\078\000\000\000\078\000\078\000\043\000\000\000\000\000\000\000\
\000\000\000\000\078\000\078\000\078\000\080\000\078\000\080\000\
\070\000\080\000\000\000\070\000\000\000\000\000\000\000\080\000\
\000\000\000\000\000\000\080\000\080\000\080\000\000\000\080\000\
\080\000\080\000\000\000\080\000\080\000\000\000\000\000\000\000\
\000\000\000\000\000\000\080\000\080\000\080\000\000\000\080\000\
\000\000\072\000\000\000\000\000\072\000\000\000\070\000\000\000\
\070\000\000\000\070\000\000\000\000\000\000\000\000\000\042\000\
\070\000\000\000\000\000\000\000\070\000\070\000\070\000\000\000\
\070\000\070\000\070\000\000\000\070\000\070\000\000\000\000\000\
\000\000\000\000\000\000\000\000\070\000\070\000\070\000\072\000\
\070\000\072\000\073\000\072\000\000\000\073\000\169\000\000\000\
\000\000\072\000\000\000\000\000\000\000\072\000\072\000\072\000\
\000\000\072\000\072\000\072\000\000\000\072\000\072\000\000\000\
\000\000\000\000\000\000\000\000\000\000\072\000\072\000\072\000\
\000\000\072\000\000\000\074\000\000\000\035\000\074\000\000\000\
\073\000\000\000\073\000\000\000\073\000\000\000\000\000\000\000\
\000\000\000\000\073\000\000\000\000\000\000\000\073\000\073\000\
\073\000\000\000\073\000\073\000\073\000\000\000\073\000\073\000\
\000\000\000\000\000\000\000\000\036\000\000\000\073\000\073\000\
\073\000\074\000\073\000\074\000\067\000\074\000\000\000\067\000\
\000\000\000\000\000\000\074\000\000\000\000\000\000\000\074\000\
\074\000\074\000\000\000\074\000\074\000\074\000\000\000\074\000\
\074\000\037\000\000\000\000\000\000\000\000\000\000\000\074\000\
\074\000\074\000\000\000\074\000\000\000\071\000\000\000\000\000\
\071\000\000\000\067\000\000\000\067\000\000\000\067\000\000\000\
\000\000\000\000\000\000\000\000\067\000\000\000\000\000\000\000\
\067\000\067\000\067\000\031\000\067\000\067\000\067\000\000\000\
\067\000\067\000\000\000\000\000\000\000\000\000\000\000\000\000\
\067\000\067\000\067\000\071\000\067\000\071\000\000\000\071\000\
\174\000\000\000\000\000\174\000\115\000\071\000\000\000\000\000\
\000\000\071\000\071\000\071\000\000\000\071\000\071\000\071\000\
\174\000\071\000\071\000\000\000\000\000\043\000\000\000\000\000\
\043\000\071\000\071\000\071\000\000\000\071\000\000\000\000\000\
\000\000\000\000\000\000\174\000\174\000\030\000\000\000\000\000\
\174\000\000\000\174\000\174\000\000\000\000\000\000\000\000\000\
\174\000\000\000\000\000\000\000\174\000\174\000\174\000\000\000\
\000\000\000\000\174\000\043\000\174\000\043\000\000\000\043\000\
\028\000\174\000\000\000\000\000\174\000\043\000\174\000\000\000\
\000\000\043\000\043\000\043\000\000\000\043\000\043\000\043\000\
\042\000\000\000\043\000\042\000\027\000\000\000\000\000\000\000\
\000\000\043\000\043\000\043\000\000\000\000\000\000\000\000\000\
\000\000\042\000\009\000\010\000\011\000\000\000\043\000\044\000\
\045\000\046\000\047\000\048\000\000\000\049\000\000\000\169\000\
\000\000\000\000\169\000\050\000\000\000\051\000\042\000\000\000\
\042\000\000\000\042\000\052\000\000\000\053\000\000\000\169\000\
\042\000\000\000\000\000\000\000\042\000\042\000\042\000\000\000\
\042\000\042\000\042\000\000\000\000\000\042\000\035\000\000\000\
\000\000\035\000\169\000\169\000\042\000\042\000\042\000\169\000\
\112\001\169\000\000\000\000\000\000\000\000\000\000\000\169\000\
\000\000\000\000\000\000\169\000\169\000\169\000\000\000\000\000\
\000\000\169\000\000\000\169\000\000\000\036\000\000\000\000\000\
\036\000\000\000\000\000\169\000\035\000\169\000\035\000\000\000\
\035\000\000\000\000\000\000\000\000\000\000\000\035\000\000\000\
\000\000\000\000\035\000\035\000\035\000\000\000\035\000\035\000\
\035\000\000\000\037\000\000\000\000\000\037\000\000\000\000\000\
\000\000\000\000\000\000\036\000\035\000\036\000\000\000\036\000\
\000\000\000\000\000\000\000\000\000\000\036\000\000\000\000\000\
\000\000\036\000\036\000\036\000\000\000\036\000\036\000\036\000\
\000\000\000\000\000\000\000\000\031\000\000\000\000\000\031\000\
\037\000\000\000\037\000\036\000\037\000\000\000\000\000\000\000\
\000\000\000\000\037\000\000\000\000\000\000\000\037\000\037\000\
\037\000\000\000\037\000\037\000\037\000\115\000\000\000\000\000\
\115\000\029\000\082\000\083\000\084\000\000\000\000\000\000\000\
\037\000\033\000\034\000\035\000\031\000\000\000\031\000\000\000\
\000\000\000\000\000\000\036\000\031\000\000\000\000\000\000\000\
\031\000\031\000\031\000\000\000\031\000\031\000\030\000\000\000\
\000\000\030\000\000\000\000\000\000\000\115\000\000\000\115\000\
\000\000\000\000\031\000\000\000\000\000\115\000\000\000\000\000\
\000\000\115\000\115\000\115\000\000\000\037\000\000\000\000\000\
\000\000\028\000\115\000\000\000\028\000\000\000\000\000\000\000\
\000\000\000\000\000\000\115\000\000\000\000\000\030\000\000\000\
\030\000\000\000\000\000\000\000\000\000\027\000\030\000\000\000\
\027\000\000\000\030\000\030\000\030\000\000\000\042\000\009\000\
\010\000\011\000\000\000\043\000\044\000\045\000\046\000\047\000\
\048\000\028\000\049\000\028\000\030\000\000\000\000\000\000\000\
\050\000\028\000\051\000\000\000\000\000\028\000\028\000\028\000\
\052\000\000\000\053\000\000\000\000\000\027\000\000\000\027\000\
\000\000\232\000\000\000\000\000\000\000\027\000\000\000\028\000\
\000\000\027\000\027\000\027\000\042\000\009\000\010\000\011\000\
\000\000\043\000\044\000\045\000\046\000\047\000\048\000\000\000\
\049\000\000\000\000\000\000\000\000\000\000\000\050\000\105\000\
\051\000\000\000\000\000\000\000\000\000\000\000\052\000\000\000\
\053\000\000\000\106\000\107\000\000\000\000\000\108\000\042\000\
\009\000\010\000\011\000\000\000\043\000\044\000\045\000\046\000\
\047\000\048\000\000\000\049\000\000\000\000\000\000\000\054\000\
\000\000\050\000\000\000\051\000\000\000\000\000\000\000\000\000\
\000\000\052\000\000\000\053\000\000\000\106\000\107\000\000\000\
\000\000\108\000\000\000\000\000\000\000\055\000\056\000\057\000\
\058\000\000\000\000\000\000\000\000\000\129\001\000\000\000\000\
\000\000\000\000\054\000\042\000\009\000\010\000\011\000\000\000\
\043\000\044\000\045\000\046\000\047\000\048\000\000\000\049\000\
\000\000\000\000\000\000\000\000\000\000\050\000\000\000\051\000\
\055\000\056\000\057\000\058\000\000\000\052\000\000\000\053\000\
\000\000\106\000\107\000\000\000\000\000\108\000\042\000\009\000\
\010\000\011\000\000\000\043\000\044\000\045\000\046\000\047\000\
\048\000\160\001\049\000\000\000\000\000\000\000\054\000\000\000\
\050\000\000\000\051\000\000\000\000\000\000\000\000\000\000\000\
\052\000\000\000\053\000\000\000\106\000\107\000\000\000\000\000\
\108\000\000\000\000\000\000\000\055\000\056\000\057\000\058\000\
\000\000\000\000\000\000\000\000\204\001\000\000\000\000\000\000\
\000\000\054\000\042\000\009\000\010\000\011\000\000\000\043\000\
\044\000\045\000\046\000\047\000\048\000\000\000\049\000\000\000\
\000\000\000\000\000\000\000\000\050\000\000\000\051\000\055\000\
\056\000\057\000\058\000\000\000\052\000\000\000\053\000\000\000\
\106\000\107\000\000\000\000\000\108\000\042\000\009\000\010\000\
\011\000\000\000\043\000\044\000\045\000\046\000\047\000\048\000\
\000\000\049\000\000\000\000\000\000\000\054\000\000\000\050\000\
\000\000\051\000\000\000\000\000\000\000\000\000\000\000\052\000\
\000\000\053\000\000\000\106\000\000\000\000\000\000\000\108\000\
\000\000\000\000\000\000\055\000\056\000\057\000\058\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\054\000\042\000\009\000\010\000\011\000\000\000\043\000\044\000\
\045\000\046\000\047\000\048\000\000\000\049\000\000\000\000\000\
\000\000\000\000\000\000\050\000\000\000\051\000\055\000\056\000\
\057\000\058\000\000\000\052\000\000\000\053\000\042\000\009\000\
\010\000\011\000\000\000\043\000\044\000\045\000\046\000\047\000\
\048\000\000\000\049\000\000\000\000\000\000\000\000\000\090\001\
\050\000\000\000\051\000\000\000\000\000\000\000\000\000\000\000\
\052\000\235\000\053\000\000\000\042\000\009\000\010\000\011\000\
\000\000\043\000\044\000\045\000\046\000\047\000\048\000\000\000\
\049\000\236\000\055\000\056\000\057\000\058\000\050\000\000\000\
\051\000\054\000\000\000\000\000\000\000\000\000\052\000\000\000\
\053\000\042\000\009\000\010\000\011\000\000\000\043\000\044\000\
\045\000\046\000\047\000\048\000\000\000\049\000\000\000\055\000\
\056\000\057\000\058\000\050\000\000\000\051\000\000\000\054\000\
\000\000\000\000\000\000\052\000\000\000\053\000\000\000\042\000\
\009\000\010\000\011\000\000\000\043\000\044\000\045\000\046\000\
\047\000\048\000\000\000\049\000\000\000\055\000\056\000\057\000\
\058\000\050\000\000\000\051\000\000\000\000\000\000\000\000\000\
\249\000\052\000\000\000\053\000\042\000\009\000\010\000\011\000\
\000\000\043\000\044\000\045\000\046\000\047\000\048\000\000\000\
\049\000\000\000\055\000\056\000\057\000\058\000\050\000\000\000\
\051\000\000\000\000\000\000\000\000\000\000\000\052\000\125\001\
\053\000\000\000\000\000\042\000\009\000\010\000\011\000\000\000\
\043\000\044\000\045\000\046\000\047\000\048\000\000\000\049\000\
\055\000\056\000\057\000\058\000\000\000\050\000\000\000\051\000\
\000\000\000\000\000\000\000\000\158\001\052\000\000\000\053\000\
\042\000\009\000\010\000\011\000\000\000\043\000\044\000\045\000\
\046\000\047\000\048\000\000\000\049\000\055\000\056\000\057\000\
\058\000\000\000\050\000\000\000\051\000\000\000\000\000\000\000\
\000\000\000\000\052\000\200\001\053\000\000\000\000\000\042\000\
\009\000\010\000\011\000\000\000\043\000\044\000\045\000\046\000\
\047\000\048\000\000\000\049\000\055\000\056\000\057\000\058\000\
\000\000\050\000\000\000\051\000\000\000\000\000\000\000\000\000\
\202\001\052\000\000\000\053\000\042\000\009\000\010\000\011\000\
\000\000\043\000\044\000\045\000\046\000\047\000\048\000\000\000\
\049\000\055\000\056\000\057\000\058\000\000\000\050\000\000\000\
\051\000\000\000\000\000\000\000\000\000\000\000\052\000\219\001\
\053\000\000\000\000\000\042\000\009\000\010\000\011\000\000\000\
\043\000\044\000\045\000\046\000\047\000\048\000\000\000\049\000\
\055\000\056\000\057\000\058\000\000\000\050\000\000\000\051\000\
\000\000\000\000\000\000\000\000\221\001\052\000\000\000\053\000\
\042\000\009\000\010\000\011\000\000\000\043\000\044\000\045\000\
\046\000\047\000\048\000\000\000\049\000\055\000\056\000\057\000\
\058\000\000\000\050\000\000\000\051\000\000\000\000\000\134\000\
\135\000\000\000\052\000\000\000\053\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\136\000\218\000\
\227\000\000\000\000\000\000\000\055\000\056\000\057\000\058\000\
\000\000\000\000\000\000\000\000\000\000\000\000\137\000\138\000\
\000\000\139\000\140\000\141\000\142\000\000\000\000\000\000\000\
\000\000\000\000\143\000\144\000\145\000\146\000\147\000\042\000\
\009\000\010\000\011\000\000\000\043\000\044\000\045\000\046\000\
\047\000\048\000\000\000\049\000\000\000\000\000\000\000\000\000\
\000\000\050\000\000\000\051\000\000\000\000\000\134\000\135\000\
\000\000\052\000\000\000\053\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\136\000\218\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\137\000\138\000\000\000\
\139\000\140\000\141\000\142\000\000\000\000\000\000\000\000\000\
\000\000\143\000\144\000\145\000\146\000\147\000\042\000\009\000\
\010\000\011\000\000\000\043\000\044\000\045\000\046\000\047\000\
\048\000\000\000\049\000\000\000\000\000\000\000\000\000\000\000\
\050\000\000\000\051\000\000\000\000\000\134\000\135\000\000\000\
\052\000\000\000\053\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\136\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\137\000\138\000\000\000\139\000\
\140\000\141\000\142\000\000\000\000\000\000\000\000\000\000\000\
\143\000\144\000\145\000\146\000\147\000\042\000\009\000\010\000\
\011\000\000\000\043\000\044\000\045\000\046\000\047\000\048\000\
\000\000\049\000\000\000\000\000\000\000\000\000\000\000\050\000\
\000\000\051\000\000\000\000\000\000\000\000\000\000\000\052\000\
\000\000\053\000\042\000\009\000\104\001\011\000\000\000\043\000\
\044\000\045\000\046\000\047\000\048\000\000\000\049\000\000\000\
\000\000\000\000\000\000\000\000\050\000\000\000\051\000\000\000\
\000\000\000\000\000\000\000\000\052\000\000\000\053\000\000\000\
\000\000\000\000\158\000\159\000\160\000\161\000\162\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\105\001\184\000\185\000\186\000\187\000\188\000\189\000\
\190\000\191\000\192\000\193\000\194\000\195\000\000\000\196\000\
\197\000\198\000\199\000\000\000\000\000\200\000\201\000\025\000\
\000\000\000\000\000\000\010\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\202\000\184\000\185\000\
\186\000\187\000\029\001\189\000\190\000\191\000\192\000\030\001\
\194\000\195\000\000\000\196\000\197\000\198\000\199\000\000\000\
\173\000\031\001\201\000\025\000\000\000\184\000\185\000\186\000\
\187\000\188\000\189\000\190\000\191\000\192\000\193\000\194\000\
\195\000\202\000\196\000\197\000\198\000\199\000\000\000\000\000\
\200\000\201\000\025\000\000\000\184\000\185\000\186\000\187\000\
\074\001\189\000\190\000\191\000\192\000\075\001\194\000\195\000\
\202\000\196\000\197\000\198\000\199\000\000\000\000\000\200\000\
\201\000\025\000\000\000\184\000\185\000\186\000\187\000\188\000\
\189\000\190\000\191\000\192\000\193\000\194\000\000\000\202\000\
\196\000\197\000\198\000\199\000\000\000\000\000\200\000\201\000\
\025\000\000\000\184\000\185\000\186\000\187\000\188\000\189\000\
\190\000\191\000\192\000\193\000\194\000\000\000\202\000\196\000\
\197\000\198\000\199\000\000\000\000\000\200\000\201\000\025\000\
\042\000\009\000\010\000\011\000\000\000\043\000\044\000\045\000\
\046\000\047\000\048\000\000\000\049\000\088\001\000\000\000\000\
\000\000\000\000\050\000\000\000\051\000\000\000\000\000\000\000\
\000\000\000\000\052\000\000\000\053\000\000\000\000\000\042\000\
\009\000\010\000\011\000\111\001\043\000\044\000\045\000\046\000\
\047\000\048\000\000\000\049\000\000\000\000\000\000\000\000\000\
\000\000\050\000\000\000\051\000\000\000\000\000\134\000\135\000\
\000\000\052\000\000\000\053\000\042\000\009\000\010\000\011\000\
\000\000\043\000\044\000\045\000\046\000\047\000\048\000\000\000\
\049\000\000\000\000\000\000\000\000\000\000\000\050\000\000\000\
\051\000\000\000\000\000\166\001\167\001\000\000\052\000\000\000\
\053\000\042\000\009\000\010\000\011\000\000\000\043\000\044\000\
\045\000\046\000\047\000\048\000\000\000\049\000\000\000\000\000\
\000\000\000\000\000\000\050\000\000\000\051\000\000\000\000\000\
\194\001\195\001\000\000\052\000\000\000\053\000\042\000\009\000\
\010\000\011\000\000\000\043\000\044\000\045\000\046\000\047\000\
\048\000\000\000\049\000\000\000\000\000\000\000\000\000\000\000\
\050\000\000\000\051\000\000\000\233\000\000\000\000\000\000\000\
\052\000\000\000\053\000\042\000\009\000\010\000\011\000\000\000\
\043\000\044\000\045\000\046\000\047\000\048\000\000\000\049\000\
\000\000\000\000\000\000\000\000\000\000\050\000\000\000\051\000\
\000\000\000\000\000\000\234\000\000\000\052\000\000\000\053\000\
\042\000\009\000\010\000\011\000\000\000\043\000\044\000\045\000\
\046\000\047\000\048\000\000\000\049\000\000\000\000\000\000\000\
\000\000\000\000\050\000\224\001\051\000\000\000\000\000\000\000\
\000\000\000\000\052\000\000\000\053\000\042\000\009\000\010\000\
\011\000\000\000\043\000\044\000\045\000\046\000\047\000\048\000\
\000\000\049\000\000\000\000\000\000\000\000\000\000\000\050\000\
\225\001\051\000\000\000\000\000\000\000\000\000\000\000\052\000\
\000\000\053\000\042\000\009\000\010\000\011\000\000\000\043\000\
\044\000\045\000\046\000\047\000\048\000\000\000\049\000\000\000\
\000\000\000\000\000\000\000\000\050\000\227\001\051\000\000\000\
\000\000\000\000\000\000\000\000\052\000\000\000\053\000\042\000\
\009\000\010\000\011\000\000\000\043\000\044\000\045\000\046\000\
\047\000\048\000\000\000\049\000\000\000\000\000\000\000\000\000\
\000\000\050\000\229\001\051\000\000\000\000\000\000\000\000\000\
\000\000\052\000\000\000\053\000\042\000\009\000\010\000\011\000\
\000\000\043\000\044\000\045\000\046\000\047\000\048\000\000\000\
\049\000\000\000\000\000\000\000\000\000\000\000\050\000\236\001\
\051\000\000\000\000\000\000\000\000\000\000\000\052\000\000\000\
\053\000\042\000\009\000\010\000\011\000\000\000\043\000\044\000\
\045\000\046\000\047\000\048\000\000\000\049\000\000\000\000\000\
\000\000\000\000\000\000\050\000\237\001\051\000\000\000\000\000\
\000\000\000\000\000\000\052\000\000\000\053\000\042\000\009\000\
\010\000\011\000\000\000\043\000\044\000\045\000\046\000\047\000\
\048\000\000\000\049\000\000\000\000\000\000\000\000\000\000\000\
\050\000\239\001\051\000\000\000\000\000\000\000\000\000\000\000\
\052\000\000\000\053\000\042\000\009\000\010\000\011\000\000\000\
\043\000\044\000\045\000\046\000\047\000\048\000\000\000\049\000\
\000\000\000\000\000\000\000\000\000\000\050\000\241\001\051\000\
\000\000\000\000\000\000\000\000\000\000\052\000\000\000\053\000\
\126\000\126\000\126\000\126\000\000\000\126\000\126\000\126\000\
\126\000\126\000\126\000\000\000\126\000\000\000\000\000\000\000\
\000\000\000\000\126\000\000\000\126\000\000\000\000\000\126\000\
\000\000\000\000\126\000\000\000\126\000\127\000\127\000\127\000\
\127\000\000\000\127\000\127\000\127\000\127\000\127\000\127\000\
\000\000\127\000\000\000\000\000\000\000\000\000\000\000\127\000\
\000\000\127\000\000\000\000\000\127\000\000\000\000\000\127\000\
\000\000\127\000\042\000\009\000\010\000\011\000\000\000\043\000\
\044\000\045\000\046\000\047\000\048\000\000\000\049\000\000\000\
\000\000\000\000\000\000\000\000\050\000\000\000\051\000\000\000\
\000\000\000\000\000\000\000\000\052\000\000\000\053\000\042\000\
\009\000\104\001\011\000\000\000\043\000\044\000\045\000\046\000\
\047\000\048\000\000\000\049\000\000\000\000\000\000\000\000\000\
\000\000\050\000\000\000\051\000\000\000\000\000\000\000\000\000\
\000\000\052\000\000\000\053\000\184\000\185\000\186\000\187\000\
\188\000\189\000\190\000\191\000\192\000\193\000\194\000\000\000\
\000\000\196\000\197\000\198\000\199\000\000\000\000\000\200\000\
\201\000\025\000"

let yycheck = "\051\000\
\052\000\000\000\209\000\000\000\106\000\220\000\097\000\100\000\
\107\001\017\001\102\000\019\000\104\000\036\000\001\001\105\001\
\107\000\078\000\026\000\222\000\223\000\224\000\225\000\021\000\
\055\001\035\001\000\000\001\001\017\001\148\001\004\001\142\001\
\099\000\041\001\026\001\024\001\025\001\000\000\099\001\044\001\
\132\000\036\001\017\001\044\001\000\000\000\000\044\001\020\000\
\040\001\101\000\149\001\103\000\041\001\051\000\059\001\044\001\
\054\000\055\000\056\000\032\000\058\000\153\000\152\001\086\000\
\059\001\066\001\041\001\044\001\066\001\030\001\059\001\190\001\
\183\001\062\001\105\001\036\001\107\001\066\001\171\000\053\001\
\039\001\055\001\023\001\144\001\059\001\062\001\035\001\179\000\
\041\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\041\001\018\001\019\001\
\020\001\021\001\059\001\061\001\024\001\025\001\026\001\202\000\
\214\000\180\000\087\000\088\000\147\001\066\001\149\001\059\001\
\151\001\152\001\183\000\072\001\040\001\059\001\178\000\061\001\
\062\001\078\001\049\001\023\001\051\001\131\000\107\000\133\000\
\134\000\135\000\136\000\137\000\138\000\139\000\140\000\141\000\
\142\000\143\000\144\000\145\000\146\000\147\000\069\001\149\000\
\150\000\151\000\152\000\026\001\164\000\188\001\000\000\169\001\
\026\001\049\001\078\001\051\001\041\001\017\001\026\001\044\001\
\059\001\040\001\061\001\062\001\024\001\025\001\040\001\227\000\
\237\000\136\001\094\001\240\000\040\001\242\000\059\001\214\001\
\061\001\062\001\063\001\023\001\059\001\041\001\061\001\062\001\
\044\001\059\001\002\001\061\001\062\001\041\001\057\000\146\001\
\044\001\023\001\061\000\022\001\023\001\024\001\025\001\012\001\
\044\001\000\000\015\001\030\001\031\001\032\001\066\001\059\001\
\000\000\061\001\062\001\024\001\218\000\040\001\173\001\022\001\
\023\001\024\001\025\001\003\000\027\001\061\001\062\001\030\001\
\031\001\032\001\070\001\061\001\234\000\039\001\034\001\015\000\
\026\001\040\001\041\001\079\001\040\001\024\001\082\001\043\001\
\040\001\085\001\043\001\249\000\111\000\088\001\035\001\074\001\
\058\001\059\001\001\001\136\000\096\001\004\001\121\000\069\001\
\070\001\058\001\059\001\126\000\127\000\128\000\041\001\130\000\
\149\000\044\001\151\000\074\001\069\001\070\001\071\001\000\000\
\073\001\086\001\078\001\001\001\080\001\040\001\004\001\083\001\
\059\001\024\001\061\001\062\001\063\001\076\001\001\001\060\001\
\039\001\004\001\041\001\095\001\043\001\001\001\001\001\060\001\
\004\001\004\001\049\001\143\001\049\001\077\001\053\001\054\001\
\055\001\059\001\057\001\058\001\059\001\122\001\061\001\062\001\
\057\001\058\001\118\001\065\001\120\001\041\001\069\001\070\001\
\071\001\061\001\073\001\049\001\063\001\129\001\077\001\053\001\
\172\001\055\001\174\001\081\001\044\001\137\001\000\000\041\001\
\140\001\141\001\053\001\073\001\055\001\049\001\049\001\069\001\
\071\001\053\001\053\001\055\001\055\001\061\001\062\001\069\001\
\022\001\023\001\024\001\025\001\160\001\027\001\024\001\025\001\
\030\001\031\001\032\001\058\001\168\001\232\000\233\000\061\001\
\062\001\119\001\040\001\238\000\059\001\177\001\178\001\043\001\
\243\000\244\000\245\000\246\000\070\001\248\000\049\001\250\000\
\251\000\252\000\253\000\254\000\255\000\000\001\001\001\002\001\
\003\001\004\001\063\001\006\001\007\001\000\000\009\001\069\001\
\204\001\061\001\062\001\059\001\074\001\061\001\062\001\001\001\
\212\001\049\001\004\001\045\001\046\001\073\001\164\001\165\001\
\166\001\167\001\022\001\023\001\024\001\025\001\049\001\027\001\
\045\001\046\001\030\001\031\001\032\001\233\001\000\000\051\001\
\001\000\002\000\003\000\046\001\040\001\023\001\023\001\024\001\
\041\001\026\001\192\001\193\001\194\001\195\001\062\001\041\001\
\059\001\043\001\026\001\061\001\063\001\041\001\041\001\049\001\
\041\001\044\001\037\001\053\001\054\001\055\001\061\001\057\001\
\058\001\001\001\061\001\062\001\004\001\036\001\074\001\000\000\
\059\001\003\001\061\001\062\001\063\001\071\001\073\001\069\001\
\083\001\084\001\085\001\086\001\087\001\047\001\022\001\023\001\
\024\001\025\001\061\001\027\001\028\001\029\001\030\001\031\001\
\032\001\054\001\034\001\035\001\111\001\054\001\113\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\062\001\
\048\001\049\001\050\001\126\001\043\001\053\001\054\001\055\001\
\054\001\057\001\058\001\059\001\060\001\061\001\062\001\044\001\
\001\001\054\001\066\001\004\001\054\001\069\001\070\001\071\001\
\072\001\073\001\061\001\045\001\076\001\077\001\078\001\079\001\
\080\001\081\001\082\001\000\000\159\001\023\001\024\001\025\001\
\088\001\089\001\090\001\091\001\092\001\093\001\062\001\069\001\
\062\001\069\001\077\001\041\001\036\001\017\001\039\001\059\001\
\041\001\062\001\043\001\041\001\000\000\041\001\054\001\061\001\
\049\001\041\001\041\001\041\001\053\001\054\001\055\001\054\001\
\057\001\058\001\059\001\198\001\199\001\062\001\201\001\001\001\
\203\001\041\001\004\001\041\001\069\001\070\001\071\001\041\001\
\073\001\041\001\041\001\054\001\041\001\041\001\217\001\218\001\
\041\001\220\001\000\000\222\001\022\001\023\001\024\001\025\001\
\024\001\027\001\028\001\029\001\030\001\031\001\032\001\049\001\
\034\001\041\001\049\001\045\001\017\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\041\001\048\001\049\001\
\050\001\017\001\017\000\053\001\054\001\055\001\000\000\057\001\
\058\001\059\001\060\001\061\001\062\001\107\000\001\001\021\000\
\219\000\004\001\041\001\069\001\070\001\071\001\108\000\073\001\
\221\000\249\000\076\001\077\001\149\001\079\001\080\001\081\001\
\082\001\231\000\214\001\136\001\180\000\082\001\088\001\089\001\
\090\001\091\001\092\001\093\001\036\001\172\001\164\000\001\001\
\072\001\000\000\004\001\172\000\039\001\117\001\041\001\172\000\
\043\001\172\000\255\255\255\255\255\255\255\255\049\001\255\255\
\255\255\255\255\053\001\054\001\055\001\017\001\057\001\058\001\
\059\001\255\255\061\001\062\001\024\001\025\001\255\255\255\255\
\255\255\255\255\069\001\070\001\071\001\039\001\073\001\041\001\
\001\001\043\001\077\001\004\001\000\000\041\001\255\255\049\001\
\044\001\255\255\255\255\053\001\054\001\055\001\255\255\057\001\
\058\001\059\001\255\255\061\001\062\001\255\255\255\255\059\001\
\255\255\255\255\255\255\069\001\070\001\071\001\066\001\073\001\
\255\255\255\255\076\001\255\255\255\255\000\000\039\001\255\255\
\041\001\255\255\043\001\255\255\255\255\255\255\255\255\255\255\
\049\001\255\255\255\255\255\255\053\001\054\001\055\001\255\255\
\057\001\058\001\059\001\255\255\061\001\062\001\255\255\255\255\
\255\255\255\255\255\255\255\255\069\001\070\001\071\001\255\255\
\073\001\255\255\255\255\076\001\001\001\255\255\000\000\004\001\
\022\001\023\001\024\001\025\001\255\255\027\001\028\001\029\001\
\030\001\031\001\032\001\255\255\034\001\255\255\255\255\255\255\
\255\255\255\255\040\001\255\255\042\001\001\001\255\255\255\255\
\004\001\255\255\048\001\255\255\050\001\255\255\255\255\000\000\
\255\255\255\255\039\001\255\255\041\001\255\255\043\001\255\255\
\255\255\255\255\255\255\255\255\049\001\255\255\255\255\255\255\
\053\001\054\001\055\001\255\255\057\001\058\001\059\001\060\001\
\061\001\062\001\255\255\039\001\255\255\041\001\255\255\043\001\
\069\001\070\001\071\001\255\255\073\001\049\001\255\255\093\001\
\000\000\053\001\054\001\055\001\017\001\057\001\058\001\059\001\
\060\001\061\001\062\001\024\001\025\001\255\255\255\255\255\255\
\255\255\069\001\070\001\071\001\255\255\073\001\255\255\001\001\
\255\255\255\255\004\001\255\255\041\001\255\255\255\255\044\001\
\255\255\000\000\255\255\255\255\022\001\023\001\024\001\025\001\
\255\255\027\001\028\001\029\001\030\001\031\001\032\001\255\255\
\034\001\255\255\255\255\255\255\255\255\066\001\040\001\255\255\
\042\001\255\255\255\255\045\001\255\255\039\001\048\001\041\001\
\050\001\043\001\001\001\255\255\255\255\004\001\255\255\049\001\
\255\255\255\255\000\000\053\001\054\001\055\001\255\255\057\001\
\058\001\059\001\060\001\061\001\062\001\255\255\255\255\255\255\
\255\255\255\255\255\255\069\001\070\001\071\001\255\255\073\001\
\255\255\083\001\084\001\085\001\086\001\087\001\255\255\255\255\
\039\001\255\255\041\001\000\000\043\001\001\001\255\255\255\255\
\004\001\255\255\049\001\255\255\255\255\255\255\053\001\054\001\
\055\001\255\255\057\001\058\001\059\001\060\001\061\001\062\001\
\255\255\255\255\255\255\255\255\255\255\255\255\069\001\070\001\
\071\001\255\255\073\001\255\255\255\255\255\255\001\001\255\255\
\255\255\004\001\255\255\039\001\000\000\041\001\255\255\043\001\
\255\255\255\255\255\255\255\255\255\255\049\001\255\255\255\255\
\255\255\053\001\054\001\055\001\017\001\057\001\058\001\059\001\
\060\001\061\001\062\001\024\001\025\001\255\255\255\255\255\255\
\255\255\069\001\070\001\071\001\039\001\073\001\041\001\001\001\
\043\001\255\255\004\001\255\255\041\001\000\000\049\001\044\001\
\255\255\255\255\053\001\054\001\055\001\255\255\057\001\058\001\
\059\001\255\255\061\001\062\001\255\255\255\255\059\001\255\255\
\255\255\255\255\069\001\070\001\071\001\066\001\073\001\255\255\
\001\001\255\255\255\255\004\001\255\255\039\001\000\000\041\001\
\255\255\043\001\255\255\255\255\255\255\255\255\255\255\049\001\
\255\255\255\255\255\255\053\001\054\001\055\001\255\255\057\001\
\058\001\059\001\255\255\061\001\062\001\255\255\255\255\255\255\
\255\255\255\255\255\255\069\001\070\001\071\001\039\001\073\001\
\041\001\001\001\043\001\255\255\004\001\255\255\255\255\000\000\
\049\001\255\255\255\255\255\255\053\001\054\001\055\001\255\255\
\057\001\058\001\059\001\255\255\061\001\062\001\255\255\255\255\
\255\255\255\255\255\255\255\255\069\001\070\001\071\001\255\255\
\073\001\255\255\001\001\255\255\255\255\004\001\255\255\039\001\
\000\000\041\001\255\255\043\001\255\255\255\255\255\255\255\255\
\255\255\049\001\255\255\255\255\255\255\053\001\054\001\055\001\
\255\255\057\001\058\001\059\001\255\255\061\001\062\001\255\255\
\255\255\255\255\255\255\255\255\255\255\069\001\070\001\071\001\
\039\001\073\001\041\001\001\001\043\001\255\255\004\001\255\255\
\255\255\000\000\049\001\255\255\255\255\255\255\053\001\054\001\
\055\001\255\255\057\001\058\001\059\001\255\255\061\001\062\001\
\255\255\255\255\255\255\255\255\255\255\255\255\069\001\070\001\
\071\001\255\255\073\001\255\255\001\001\255\255\255\255\004\001\
\255\255\039\001\000\000\041\001\255\255\043\001\255\255\255\255\
\255\255\255\255\255\255\049\001\255\255\255\255\255\255\053\001\
\054\001\055\001\255\255\057\001\058\001\059\001\255\255\061\001\
\062\001\255\255\255\255\255\255\255\255\255\255\255\255\069\001\
\070\001\071\001\039\001\073\001\041\001\001\001\043\001\255\255\
\004\001\255\255\255\255\000\000\049\001\255\255\255\255\255\255\
\053\001\054\001\055\001\255\255\057\001\058\001\059\001\255\255\
\061\001\062\001\255\255\255\255\255\255\255\255\255\255\255\255\
\069\001\070\001\071\001\255\255\073\001\255\255\255\255\255\255\
\255\255\255\255\255\255\039\001\000\000\041\001\001\001\043\001\
\255\255\004\001\255\255\255\255\255\255\049\001\255\255\255\255\
\255\255\053\001\054\001\055\001\255\255\057\001\058\001\059\001\
\255\255\061\001\062\001\255\255\255\255\255\255\255\255\255\255\
\255\255\069\001\070\001\071\001\255\255\073\001\255\255\001\001\
\255\255\255\255\004\001\255\255\039\001\255\255\041\001\000\000\
\043\001\255\255\255\255\255\255\255\255\255\255\049\001\255\255\
\255\255\255\255\053\001\054\001\055\001\255\255\057\001\058\001\
\059\001\255\255\061\001\062\001\000\000\255\255\255\255\255\255\
\255\255\255\255\069\001\070\001\071\001\039\001\073\001\041\001\
\001\001\043\001\255\255\004\001\255\255\255\255\255\255\049\001\
\255\255\255\255\255\255\053\001\054\001\055\001\255\255\057\001\
\058\001\059\001\255\255\061\001\062\001\255\255\255\255\255\255\
\255\255\255\255\255\255\069\001\070\001\071\001\255\255\073\001\
\255\255\001\001\255\255\255\255\004\001\255\255\039\001\255\255\
\041\001\255\255\043\001\255\255\255\255\255\255\255\255\000\000\
\049\001\255\255\255\255\255\255\053\001\054\001\055\001\255\255\
\057\001\058\001\059\001\255\255\061\001\062\001\255\255\255\255\
\255\255\255\255\255\255\255\255\069\001\070\001\071\001\039\001\
\073\001\041\001\001\001\043\001\255\255\004\001\000\000\255\255\
\255\255\049\001\255\255\255\255\255\255\053\001\054\001\055\001\
\255\255\057\001\058\001\059\001\255\255\061\001\062\001\255\255\
\255\255\255\255\255\255\255\255\255\255\069\001\070\001\071\001\
\255\255\073\001\255\255\001\001\255\255\000\000\004\001\255\255\
\039\001\255\255\041\001\255\255\043\001\255\255\255\255\255\255\
\255\255\255\255\049\001\255\255\255\255\255\255\053\001\054\001\
\055\001\255\255\057\001\058\001\059\001\255\255\061\001\062\001\
\255\255\255\255\255\255\255\255\000\000\255\255\069\001\070\001\
\071\001\039\001\073\001\041\001\001\001\043\001\255\255\004\001\
\255\255\255\255\255\255\049\001\255\255\255\255\255\255\053\001\
\054\001\055\001\255\255\057\001\058\001\059\001\255\255\061\001\
\062\001\000\000\255\255\255\255\255\255\255\255\255\255\069\001\
\070\001\071\001\255\255\073\001\255\255\001\001\255\255\255\255\
\004\001\255\255\039\001\255\255\041\001\255\255\043\001\255\255\
\255\255\255\255\255\255\255\255\049\001\255\255\255\255\255\255\
\053\001\054\001\055\001\000\000\057\001\058\001\059\001\255\255\
\061\001\062\001\255\255\255\255\255\255\255\255\255\255\255\255\
\069\001\070\001\071\001\039\001\073\001\041\001\255\255\043\001\
\001\001\255\255\255\255\004\001\000\000\049\001\255\255\255\255\
\255\255\053\001\054\001\055\001\255\255\057\001\058\001\059\001\
\017\001\061\001\062\001\255\255\255\255\001\001\255\255\255\255\
\004\001\069\001\070\001\071\001\255\255\073\001\255\255\255\255\
\255\255\255\255\255\255\036\001\037\001\000\000\255\255\255\255\
\041\001\255\255\043\001\044\001\255\255\255\255\255\255\255\255\
\049\001\255\255\255\255\255\255\053\001\054\001\055\001\255\255\
\255\255\255\255\059\001\039\001\061\001\041\001\255\255\043\001\
\000\000\066\001\255\255\255\255\069\001\049\001\071\001\255\255\
\255\255\053\001\054\001\055\001\255\255\057\001\058\001\059\001\
\001\001\255\255\062\001\004\001\000\000\255\255\255\255\255\255\
\255\255\069\001\070\001\071\001\255\255\255\255\255\255\255\255\
\255\255\022\001\023\001\024\001\025\001\255\255\027\001\028\001\
\029\001\030\001\031\001\032\001\255\255\034\001\255\255\001\001\
\255\255\255\255\004\001\040\001\255\255\042\001\039\001\255\255\
\041\001\255\255\043\001\048\001\255\255\050\001\255\255\017\001\
\049\001\255\255\255\255\255\255\053\001\054\001\055\001\255\255\
\057\001\058\001\059\001\255\255\255\255\062\001\001\001\255\255\
\255\255\004\001\036\001\037\001\069\001\070\001\071\001\041\001\
\077\001\043\001\255\255\255\255\255\255\255\255\255\255\049\001\
\255\255\255\255\255\255\053\001\054\001\055\001\255\255\255\255\
\255\255\059\001\255\255\061\001\255\255\001\001\255\255\255\255\
\004\001\255\255\255\255\069\001\039\001\071\001\041\001\255\255\
\043\001\255\255\255\255\255\255\255\255\255\255\049\001\255\255\
\255\255\255\255\053\001\054\001\055\001\255\255\057\001\058\001\
\059\001\255\255\001\001\255\255\255\255\004\001\255\255\255\255\
\255\255\255\255\255\255\039\001\071\001\041\001\255\255\043\001\
\255\255\255\255\255\255\255\255\255\255\049\001\255\255\255\255\
\255\255\053\001\054\001\055\001\255\255\057\001\058\001\059\001\
\255\255\255\255\255\255\255\255\001\001\255\255\255\255\004\001\
\039\001\255\255\041\001\071\001\043\001\255\255\255\255\255\255\
\255\255\255\255\049\001\255\255\255\255\255\255\053\001\054\001\
\055\001\255\255\057\001\058\001\059\001\001\001\255\255\255\255\
\004\001\022\001\023\001\024\001\025\001\255\255\255\255\255\255\
\071\001\030\001\031\001\032\001\041\001\255\255\043\001\255\255\
\255\255\255\255\255\255\040\001\049\001\255\255\255\255\255\255\
\053\001\054\001\055\001\255\255\057\001\058\001\001\001\255\255\
\255\255\004\001\255\255\255\255\255\255\041\001\255\255\043\001\
\255\255\255\255\071\001\255\255\255\255\049\001\255\255\255\255\
\255\255\053\001\054\001\055\001\255\255\074\001\255\255\255\255\
\255\255\001\001\062\001\255\255\004\001\255\255\255\255\255\255\
\255\255\255\255\255\255\071\001\255\255\255\255\041\001\255\255\
\043\001\255\255\255\255\255\255\255\255\001\001\049\001\255\255\
\004\001\255\255\053\001\054\001\055\001\255\255\022\001\023\001\
\024\001\025\001\255\255\027\001\028\001\029\001\030\001\031\001\
\032\001\041\001\034\001\043\001\071\001\255\255\255\255\255\255\
\040\001\049\001\042\001\255\255\255\255\053\001\054\001\055\001\
\048\001\255\255\050\001\255\255\255\255\041\001\255\255\043\001\
\255\255\057\001\255\255\255\255\255\255\049\001\255\255\071\001\
\255\255\053\001\054\001\055\001\022\001\023\001\024\001\025\001\
\255\255\027\001\028\001\029\001\030\001\031\001\032\001\255\255\
\034\001\255\255\255\255\255\255\255\255\255\255\040\001\041\001\
\042\001\255\255\255\255\255\255\255\255\255\255\048\001\255\255\
\050\001\255\255\052\001\053\001\255\255\255\255\056\001\022\001\
\023\001\024\001\025\001\255\255\027\001\028\001\029\001\030\001\
\031\001\032\001\255\255\034\001\255\255\255\255\255\255\073\001\
\255\255\040\001\255\255\042\001\255\255\255\255\255\255\255\255\
\255\255\048\001\255\255\050\001\255\255\052\001\053\001\255\255\
\255\255\056\001\255\255\255\255\255\255\095\001\096\001\097\001\
\098\001\255\255\255\255\255\255\255\255\068\001\255\255\255\255\
\255\255\255\255\073\001\022\001\023\001\024\001\025\001\255\255\
\027\001\028\001\029\001\030\001\031\001\032\001\255\255\034\001\
\255\255\255\255\255\255\255\255\255\255\040\001\255\255\042\001\
\095\001\096\001\097\001\098\001\255\255\048\001\255\255\050\001\
\255\255\052\001\053\001\255\255\255\255\056\001\022\001\023\001\
\024\001\025\001\255\255\027\001\028\001\029\001\030\001\031\001\
\032\001\068\001\034\001\255\255\255\255\255\255\073\001\255\255\
\040\001\255\255\042\001\255\255\255\255\255\255\255\255\255\255\
\048\001\255\255\050\001\255\255\052\001\053\001\255\255\255\255\
\056\001\255\255\255\255\255\255\095\001\096\001\097\001\098\001\
\255\255\255\255\255\255\255\255\068\001\255\255\255\255\255\255\
\255\255\073\001\022\001\023\001\024\001\025\001\255\255\027\001\
\028\001\029\001\030\001\031\001\032\001\255\255\034\001\255\255\
\255\255\255\255\255\255\255\255\040\001\255\255\042\001\095\001\
\096\001\097\001\098\001\255\255\048\001\255\255\050\001\255\255\
\052\001\053\001\255\255\255\255\056\001\022\001\023\001\024\001\
\025\001\255\255\027\001\028\001\029\001\030\001\031\001\032\001\
\255\255\034\001\255\255\255\255\255\255\073\001\255\255\040\001\
\255\255\042\001\255\255\255\255\255\255\255\255\255\255\048\001\
\255\255\050\001\255\255\052\001\255\255\255\255\255\255\056\001\
\255\255\255\255\255\255\095\001\096\001\097\001\098\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\073\001\022\001\023\001\024\001\025\001\255\255\027\001\028\001\
\029\001\030\001\031\001\032\001\255\255\034\001\255\255\255\255\
\255\255\255\255\255\255\040\001\255\255\042\001\095\001\096\001\
\097\001\098\001\255\255\048\001\255\255\050\001\022\001\023\001\
\024\001\025\001\255\255\027\001\028\001\029\001\030\001\031\001\
\032\001\255\255\034\001\255\255\255\255\255\255\255\255\039\001\
\040\001\255\255\042\001\255\255\255\255\255\255\255\255\255\255\
\048\001\078\001\050\001\255\255\022\001\023\001\024\001\025\001\
\255\255\027\001\028\001\029\001\030\001\031\001\032\001\255\255\
\034\001\094\001\095\001\096\001\097\001\098\001\040\001\255\255\
\042\001\073\001\255\255\255\255\255\255\255\255\048\001\255\255\
\050\001\022\001\023\001\024\001\025\001\255\255\027\001\028\001\
\029\001\030\001\031\001\032\001\255\255\034\001\255\255\095\001\
\096\001\097\001\098\001\040\001\255\255\042\001\255\255\073\001\
\255\255\255\255\255\255\048\001\255\255\050\001\255\255\022\001\
\023\001\024\001\025\001\255\255\027\001\028\001\029\001\030\001\
\031\001\032\001\255\255\034\001\255\255\095\001\096\001\097\001\
\098\001\040\001\255\255\042\001\255\255\255\255\255\255\255\255\
\077\001\048\001\255\255\050\001\022\001\023\001\024\001\025\001\
\255\255\027\001\028\001\029\001\030\001\031\001\032\001\255\255\
\034\001\255\255\095\001\096\001\097\001\098\001\040\001\255\255\
\042\001\255\255\255\255\255\255\255\255\255\255\048\001\078\001\
\050\001\255\255\255\255\022\001\023\001\024\001\025\001\255\255\
\027\001\028\001\029\001\030\001\031\001\032\001\255\255\034\001\
\095\001\096\001\097\001\098\001\255\255\040\001\255\255\042\001\
\255\255\255\255\255\255\255\255\078\001\048\001\255\255\050\001\
\022\001\023\001\024\001\025\001\255\255\027\001\028\001\029\001\
\030\001\031\001\032\001\255\255\034\001\095\001\096\001\097\001\
\098\001\255\255\040\001\255\255\042\001\255\255\255\255\255\255\
\255\255\255\255\048\001\078\001\050\001\255\255\255\255\022\001\
\023\001\024\001\025\001\255\255\027\001\028\001\029\001\030\001\
\031\001\032\001\255\255\034\001\095\001\096\001\097\001\098\001\
\255\255\040\001\255\255\042\001\255\255\255\255\255\255\255\255\
\078\001\048\001\255\255\050\001\022\001\023\001\024\001\025\001\
\255\255\027\001\028\001\029\001\030\001\031\001\032\001\255\255\
\034\001\095\001\096\001\097\001\098\001\255\255\040\001\255\255\
\042\001\255\255\255\255\255\255\255\255\255\255\048\001\078\001\
\050\001\255\255\255\255\022\001\023\001\024\001\025\001\255\255\
\027\001\028\001\029\001\030\001\031\001\032\001\255\255\034\001\
\095\001\096\001\097\001\098\001\255\255\040\001\255\255\042\001\
\255\255\255\255\255\255\255\255\078\001\048\001\255\255\050\001\
\022\001\023\001\024\001\025\001\255\255\027\001\028\001\029\001\
\030\001\031\001\032\001\255\255\034\001\095\001\096\001\097\001\
\098\001\255\255\040\001\255\255\042\001\255\255\255\255\045\001\
\046\001\255\255\048\001\255\255\050\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\060\001\061\001\
\062\001\255\255\255\255\255\255\095\001\096\001\097\001\098\001\
\255\255\255\255\255\255\255\255\255\255\255\255\076\001\077\001\
\255\255\079\001\080\001\081\001\082\001\255\255\255\255\255\255\
\255\255\255\255\088\001\089\001\090\001\091\001\092\001\022\001\
\023\001\024\001\025\001\255\255\027\001\028\001\029\001\030\001\
\031\001\032\001\255\255\034\001\255\255\255\255\255\255\255\255\
\255\255\040\001\255\255\042\001\255\255\255\255\045\001\046\001\
\255\255\048\001\255\255\050\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\060\001\061\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\076\001\077\001\255\255\
\079\001\080\001\081\001\082\001\255\255\255\255\255\255\255\255\
\255\255\088\001\089\001\090\001\091\001\092\001\022\001\023\001\
\024\001\025\001\255\255\027\001\028\001\029\001\030\001\031\001\
\032\001\255\255\034\001\255\255\255\255\255\255\255\255\255\255\
\040\001\255\255\042\001\255\255\255\255\045\001\046\001\255\255\
\048\001\255\255\050\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\060\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\076\001\077\001\255\255\079\001\
\080\001\081\001\082\001\255\255\255\255\255\255\255\255\255\255\
\088\001\089\001\090\001\091\001\092\001\022\001\023\001\024\001\
\025\001\255\255\027\001\028\001\029\001\030\001\031\001\032\001\
\255\255\034\001\255\255\255\255\255\255\255\255\255\255\040\001\
\255\255\042\001\255\255\255\255\255\255\255\255\255\255\048\001\
\255\255\050\001\022\001\023\001\024\001\025\001\255\255\027\001\
\028\001\029\001\030\001\031\001\032\001\255\255\034\001\255\255\
\255\255\255\255\255\255\255\255\040\001\255\255\042\001\255\255\
\255\255\255\255\255\255\255\255\048\001\255\255\050\001\255\255\
\255\255\255\255\083\001\084\001\085\001\086\001\087\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\069\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\255\255\018\001\
\019\001\020\001\021\001\255\255\255\255\024\001\025\001\026\001\
\255\255\255\255\255\255\030\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\040\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\255\255\018\001\019\001\020\001\021\001\255\255\
\023\001\024\001\025\001\026\001\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\040\001\018\001\019\001\020\001\021\001\255\255\255\255\
\024\001\025\001\026\001\255\255\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\040\001\018\001\019\001\020\001\021\001\255\255\255\255\024\001\
\025\001\026\001\255\255\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\255\255\040\001\
\018\001\019\001\020\001\021\001\255\255\255\255\024\001\025\001\
\026\001\255\255\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\255\255\040\001\018\001\
\019\001\020\001\021\001\255\255\255\255\024\001\025\001\026\001\
\022\001\023\001\024\001\025\001\255\255\027\001\028\001\029\001\
\030\001\031\001\032\001\255\255\034\001\040\001\255\255\255\255\
\255\255\255\255\040\001\255\255\042\001\255\255\255\255\255\255\
\255\255\255\255\048\001\255\255\050\001\255\255\255\255\022\001\
\023\001\024\001\025\001\057\001\027\001\028\001\029\001\030\001\
\031\001\032\001\255\255\034\001\255\255\255\255\255\255\255\255\
\255\255\040\001\255\255\042\001\255\255\255\255\045\001\046\001\
\255\255\048\001\255\255\050\001\022\001\023\001\024\001\025\001\
\255\255\027\001\028\001\029\001\030\001\031\001\032\001\255\255\
\034\001\255\255\255\255\255\255\255\255\255\255\040\001\255\255\
\042\001\255\255\255\255\045\001\046\001\255\255\048\001\255\255\
\050\001\022\001\023\001\024\001\025\001\255\255\027\001\028\001\
\029\001\030\001\031\001\032\001\255\255\034\001\255\255\255\255\
\255\255\255\255\255\255\040\001\255\255\042\001\255\255\255\255\
\045\001\046\001\255\255\048\001\255\255\050\001\022\001\023\001\
\024\001\025\001\255\255\027\001\028\001\029\001\030\001\031\001\
\032\001\255\255\034\001\255\255\255\255\255\255\255\255\255\255\
\040\001\255\255\042\001\255\255\044\001\255\255\255\255\255\255\
\048\001\255\255\050\001\022\001\023\001\024\001\025\001\255\255\
\027\001\028\001\029\001\030\001\031\001\032\001\255\255\034\001\
\255\255\255\255\255\255\255\255\255\255\040\001\255\255\042\001\
\255\255\255\255\255\255\046\001\255\255\048\001\255\255\050\001\
\022\001\023\001\024\001\025\001\255\255\027\001\028\001\029\001\
\030\001\031\001\032\001\255\255\034\001\255\255\255\255\255\255\
\255\255\255\255\040\001\041\001\042\001\255\255\255\255\255\255\
\255\255\255\255\048\001\255\255\050\001\022\001\023\001\024\001\
\025\001\255\255\027\001\028\001\029\001\030\001\031\001\032\001\
\255\255\034\001\255\255\255\255\255\255\255\255\255\255\040\001\
\041\001\042\001\255\255\255\255\255\255\255\255\255\255\048\001\
\255\255\050\001\022\001\023\001\024\001\025\001\255\255\027\001\
\028\001\029\001\030\001\031\001\032\001\255\255\034\001\255\255\
\255\255\255\255\255\255\255\255\040\001\041\001\042\001\255\255\
\255\255\255\255\255\255\255\255\048\001\255\255\050\001\022\001\
\023\001\024\001\025\001\255\255\027\001\028\001\029\001\030\001\
\031\001\032\001\255\255\034\001\255\255\255\255\255\255\255\255\
\255\255\040\001\041\001\042\001\255\255\255\255\255\255\255\255\
\255\255\048\001\255\255\050\001\022\001\023\001\024\001\025\001\
\255\255\027\001\028\001\029\001\030\001\031\001\032\001\255\255\
\034\001\255\255\255\255\255\255\255\255\255\255\040\001\041\001\
\042\001\255\255\255\255\255\255\255\255\255\255\048\001\255\255\
\050\001\022\001\023\001\024\001\025\001\255\255\027\001\028\001\
\029\001\030\001\031\001\032\001\255\255\034\001\255\255\255\255\
\255\255\255\255\255\255\040\001\041\001\042\001\255\255\255\255\
\255\255\255\255\255\255\048\001\255\255\050\001\022\001\023\001\
\024\001\025\001\255\255\027\001\028\001\029\001\030\001\031\001\
\032\001\255\255\034\001\255\255\255\255\255\255\255\255\255\255\
\040\001\041\001\042\001\255\255\255\255\255\255\255\255\255\255\
\048\001\255\255\050\001\022\001\023\001\024\001\025\001\255\255\
\027\001\028\001\029\001\030\001\031\001\032\001\255\255\034\001\
\255\255\255\255\255\255\255\255\255\255\040\001\041\001\042\001\
\255\255\255\255\255\255\255\255\255\255\048\001\255\255\050\001\
\022\001\023\001\024\001\025\001\255\255\027\001\028\001\029\001\
\030\001\031\001\032\001\255\255\034\001\255\255\255\255\255\255\
\255\255\255\255\040\001\255\255\042\001\255\255\255\255\045\001\
\255\255\255\255\048\001\255\255\050\001\022\001\023\001\024\001\
\025\001\255\255\027\001\028\001\029\001\030\001\031\001\032\001\
\255\255\034\001\255\255\255\255\255\255\255\255\255\255\040\001\
\255\255\042\001\255\255\255\255\045\001\255\255\255\255\048\001\
\255\255\050\001\022\001\023\001\024\001\025\001\255\255\027\001\
\028\001\029\001\030\001\031\001\032\001\255\255\034\001\255\255\
\255\255\255\255\255\255\255\255\040\001\255\255\042\001\255\255\
\255\255\255\255\255\255\255\255\048\001\255\255\050\001\022\001\
\023\001\024\001\025\001\255\255\027\001\028\001\029\001\030\001\
\031\001\032\001\255\255\034\001\255\255\255\255\255\255\255\255\
\255\255\040\001\255\255\042\001\255\255\255\255\255\255\255\255\
\255\255\048\001\255\255\050\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\255\255\
\255\255\018\001\019\001\020\001\021\001\255\255\255\255\024\001\
\025\001\026\001"

let yynames_const = "\
  "

let yynames_block = "\
  EOF\000\
  MODULE\000\
  OPEN\000\
  OF\000\
  TYPE\000\
  UNIT\000\
  BOOL\000\
  INT\000\
  CHAR\000\
  STRING\000\
  REGEXP\000\
  AREGEXP\000\
  SKELETONS\000\
  RESOURCES\000\
  LENS\000\
  CANONIZER\000\
  FORALL\000\
  WHERE\000\
  BOOLPREFS\000\
  INTPREFS\000\
  STRINGPREFS\000\
  STRINGLISTPREFS\000\
  STR\000\
  UIDENT\000\
  LIDENT\000\
  QUALIDENT\000\
  TYVARIDENT\000\
  CSET\000\
  NSET\000\
  CHARACTER\000\
  INTEGER\000\
  BOOLEAN\000\
  CEX\000\
  FLOAT\000\
  HASH\000\
  LBRACE\000\
  RBRACE\000\
  LLIST\000\
  LBRACK\000\
  RBRACK\000\
  LPAREN\000\
  RPAREN\000\
  LANGLE\000\
  RANGLE\000\
  ARROW\000\
  DARROW\000\
  DEQARROW\000\
  EQARROW\000\
  BEGIN\000\
  END\000\
  GRAMMAR\000\
  AND\000\
  FUN\000\
  LET\000\
  IN\000\
  TEST\000\
  MATCH\000\
  WITH\000\
  SEMI\000\
  COMMA\000\
  DOT\000\
  EQUAL\000\
  COLON\000\
  COLONCOLON\000\
  BACKSLASH\000\
  SLASH\000\
  STAR\000\
  RLUS\000\
  BANG\000\
  BAR\000\
  BARBAR\000\
  DOLLAR\000\
  PLUS\000\
  MINUS\000\
  UNDERLINE\000\
  HAT\000\
  TILDE\000\
  AMPERSAND\000\
  QMARK\000\
  LT\000\
  GT\000\
  LEQ\000\
  GEQ\000\
  STYPE\000\
  VTYPE\000\
  ASTYPE\000\
  AVTYPE\000\
  BIJ\000\
  GET\000\
  PUT\000\
  CREATE\000\
  CANONIZE\000\
  CHOOSE\000\
  INTO\000\
  ERROR\000\
  PERM\000\
  PROJECT\000\
  ID\000\
  SYNTH\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Bident.Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'opens) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 223 "lib/bparser.mly"
      ( Mod(m _1 _6,_2,_4,_5) )
# 1710 "lib/bparser.ml"
               : Bsyntax.modl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Bident.Qid.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opens) in
    Obj.repr(
# 227 "lib/bparser.mly"
      ( _2::_3 )
# 1719 "lib/bparser.ml"
               : 'opens))
; (fun __caml_parser_env ->
    Obj.repr(
# 228 "lib/bparser.mly"
    ( [] )
# 1725 "lib/bparser.ml"
               : 'opens))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Bident.Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'decls) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'decls) in
    Obj.repr(
# 233 "lib/bparser.mly"
      ( let i = m _1 _5 in 
        DMod(i,_2,_4)::_6 )
# 1738 "lib/bparser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'tyvar_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Bident.Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'dtsort_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'decls) in
    Obj.repr(
# 237 "lib/bparser.mly"
      ( let i = m _1 _4 in 
        DType(i,_2,Qid.t_of_id _3,_5)::_6 )
# 1751 "lib/bparser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'param_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Info.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'sort) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'decls) in
    Obj.repr(
# 241 "lib/bparser.mly"
      ( let i = me2 _1 _7 in 
        let f,f_sort = build_fun i _3 _7 _5 in 
        let i2,_ = _2 in 
        let b = Bind(i,PVar(i2,_2,None),None,f) in 
        DLet(i,b)::_8 )
# 1769 "lib/bparser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'param_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'decls) in
    Obj.repr(
# 248 "lib/bparser.mly"
      ( let i = me2 _1 _5 in 
        let f = build_bare_fun i _3 _5 in 
        let i2,_ = _2 in 
        let b =  Bind(i,PVar(i2,_2,None),None,f) in 
        DLet(i,b)::_6 )
# 1785 "lib/bparser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'letpat) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'sort) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'decls) in
    Obj.repr(
# 255 "lib/bparser.mly"
      ( let i = me2 _1 _6 in 
        let b = Bind(i,fixup_pat i _2,Some _4,_6) in 
        DLet(i,b)::_7 )
# 1800 "lib/bparser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'letpat) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'decls) in
    Obj.repr(
# 260 "lib/bparser.mly"
      ( let i = me2 _1 _4 in 
        let b =  Bind(i,fixup_pat i _2,None,_4) in 
        DLet(i,b)::_5 )
# 1813 "lib/bparser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'infixexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'test_res_exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'decls) in
    Obj.repr(
# 265 "lib/bparser.mly"
      ( let i4,tr = _4 in
        let i = m _1 i4 in 
        DTest(i,_2,tr)::_5 )
# 1826 "lib/bparser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'infixexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'test_res_sort) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'decls) in
    Obj.repr(
# 270 "lib/bparser.mly"
      ( let i = m _1 _3 in 
        DTest(i,_2,_4)::_5 )
# 1838 "lib/bparser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'infixexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'decls) in
    Obj.repr(
# 274 "lib/bparser.mly"
      ( let i = m _1 _4 in 
        DTest(i,_2,TestError)::_5 )
# 1850 "lib/bparser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    Obj.repr(
# 277 "lib/bparser.mly"
    ( [] )
# 1856 "lib/bparser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 282 "lib/bparser.mly"
      ( (_1,TestPrint) )
# 1863 "lib/bparser.ml"
               : 'test_res_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 284 "lib/bparser.mly"
      ( (_1,TestError) )
# 1870 "lib/bparser.ml"
               : 'test_res_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'appexp) in
    Obj.repr(
# 286 "lib/bparser.mly"
      ( (info_of_exp _1, TestEqual _1) )
# 1877 "lib/bparser.ml"
               : 'test_res_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 290 "lib/bparser.mly"
      ( TestSortPrint None )
# 1884 "lib/bparser.ml"
               : 'test_res_sort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'sort) in
    Obj.repr(
# 293 "lib/bparser.mly"
      ( TestSortEqual(None,_1) )
# 1891 "lib/bparser.ml"
               : 'test_res_sort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'param_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : Info.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'sort) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : Info.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 298 "lib/bparser.mly"
      ( let i = me2 _1 _9 in 
        let f,f_sort = build_fun i _3 _7 _5 in 
        let i2,_ = _2 in 
        let b = Bind(i,PVar(i2,_2,None),None,f) in 
        ELet(i,b,_9) )
# 1910 "lib/bparser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'param_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Info.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 305 "lib/bparser.mly"
      ( let i = me2 _1 _7 in 
        let f = build_bare_fun i _3 _5 in 
        let i2,_ = _2 in 
        let b = Bind(i,PVar(i2,_2,None),None,f) in 
        ELet(i,b,_7) )
# 1927 "lib/bparser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'letpat) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'sort) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Info.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 312 "lib/bparser.mly"
      ( let i = me2 _1 _8 in 
        let b = Bind(i,fixup_pat i _2,Some _4,_6) in 
        ELet(i,b,_8) )
# 1943 "lib/bparser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'letpat) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 317 "lib/bparser.mly"
      ( let i = me2 _1 _6 in 
        let b = Bind(i,fixup_pat i _2,None,_4) in 
        ELet(i,b,_6) )
# 1957 "lib/bparser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'funexp) in
    Obj.repr(
# 322 "lib/bparser.mly"
      ( _1 )
# 1964 "lib/bparser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'param_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 327 "lib/bparser.mly"
      ( let i = me2 _1 _4 in
        build_bare_fun i _2 _4 )
# 1975 "lib/bparser.ml"
               : 'funexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'param_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'asort) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 331 "lib/bparser.mly"
      ( let i = me2 _1 _6 in
        let f,_ = build_fun i _2 _6 _4 in
        f )
# 1989 "lib/bparser.ml"
               : 'funexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'funexp) in
    Obj.repr(
# 336 "lib/bparser.mly"
      ( mk_app (me _1 _3) _1 _3 )
# 1998 "lib/bparser.ml"
               : 'funexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cexp) in
    Obj.repr(
# 339 "lib/bparser.mly"
      ( _1 )
# 2005 "lib/bparser.ml"
               : 'funexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'composeexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'branch_list) in
    Obj.repr(
# 344 "lib/bparser.mly"
       ( let i4,pl = _4 in 
         ECase(m _1 i4,_2,pl,None) )
# 2016 "lib/bparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'composeexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'branch_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'sort) in
    Obj.repr(
# 348 "lib/bparser.mly"
      ( let i4,pl = _4 in 
        ECase(m _1 i4,_2,pl,Some _6) )
# 2029 "lib/bparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'composeexp) in
    Obj.repr(
# 352 "lib/bparser.mly"
      ( _1 )
# 2036 "lib/bparser.ml"
               : 'cexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'composeexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'commaexp) in
    Obj.repr(
# 357 "lib/bparser.mly"
      ( mk_compose (me _1 _3) _1 _3 )
# 2045 "lib/bparser.ml"
               : 'composeexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'commaexp) in
    Obj.repr(
# 360 "lib/bparser.mly"
      ( _1 )
# 2052 "lib/bparser.ml"
               : 'composeexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'commaexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'barexp) in
    Obj.repr(
# 365 "lib/bparser.mly"
      ( EPair(me _1 _3, _1, _3) )
# 2061 "lib/bparser.ml"
               : 'commaexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'barexp) in
    Obj.repr(
# 367 "lib/bparser.mly"
      ( _1 )
# 2068 "lib/bparser.ml"
               : 'commaexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'obarexp) in
    Obj.repr(
# 372 "lib/bparser.mly"
      ( mk_tree OBar (Safelist.rev _1) )
# 2075 "lib/bparser.ml"
               : 'barexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dbarexp) in
    Obj.repr(
# 375 "lib/bparser.mly"
      ( mk_tree OBarBar (Safelist.rev _1) )
# 2082 "lib/bparser.ml"
               : 'barexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'equalexp) in
    Obj.repr(
# 378 "lib/bparser.mly"
      ( _1 )
# 2089 "lib/bparser.ml"
               : 'barexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'obarexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'equalexp) in
    Obj.repr(
# 382 "lib/bparser.mly"
      ( _3 :: _1 )
# 2098 "lib/bparser.ml"
               : 'obarexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equalexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'equalexp) in
    Obj.repr(
# 384 "lib/bparser.mly"
      ( [_3; _1 ] )
# 2107 "lib/bparser.ml"
               : 'obarexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dbarexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'equalexp) in
    Obj.repr(
# 388 "lib/bparser.mly"
      ( _3 :: _1 )
# 2116 "lib/bparser.ml"
               : 'dbarexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equalexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'equalexp) in
    Obj.repr(
# 390 "lib/bparser.mly"
      ( [_3; _1] )
# 2125 "lib/bparser.ml"
               : 'dbarexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'appexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'appexp) in
    Obj.repr(
# 394 "lib/bparser.mly"
      ( mk_over (me _1 _3) OEqual [_1; _3] )
# 2134 "lib/bparser.ml"
               : 'equalexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'infixexp) in
    Obj.repr(
# 396 "lib/bparser.mly"
      ( _1 )
# 2141 "lib/bparser.ml"
               : 'equalexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dotexp) in
    Obj.repr(
# 400 "lib/bparser.mly"
      ( _1 )
# 2148 "lib/bparser.ml"
               : 'infixexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tildeexp) in
    Obj.repr(
# 402 "lib/bparser.mly"
      ( _1 )
# 2155 "lib/bparser.ml"
               : 'infixexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rewriteexp) in
    Obj.repr(
# 404 "lib/bparser.mly"
      ( _1 )
# 2162 "lib/bparser.ml"
               : 'infixexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ampexp) in
    Obj.repr(
# 406 "lib/bparser.mly"
      ( _1 )
# 2169 "lib/bparser.ml"
               : 'infixexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ampampexp) in
    Obj.repr(
# 408 "lib/bparser.mly"
      ( _1 )
# 2176 "lib/bparser.ml"
               : 'infixexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lenscomponentexp) in
    Obj.repr(
# 410 "lib/bparser.mly"
      ( _1 )
# 2183 "lib/bparser.ml"
               : 'infixexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'minusexp) in
    Obj.repr(
# 412 "lib/bparser.mly"
      ( _1 )
# 2190 "lib/bparser.ml"
               : 'infixexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ltexp) in
    Obj.repr(
# 414 "lib/bparser.mly"
      ( _1 )
# 2197 "lib/bparser.ml"
               : 'infixexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'leqexp) in
    Obj.repr(
# 416 "lib/bparser.mly"
      ( _1 )
# 2204 "lib/bparser.ml"
               : 'infixexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gtexp) in
    Obj.repr(
# 418 "lib/bparser.mly"
      ( _1 )
# 2211 "lib/bparser.ml"
               : 'infixexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'geqexp) in
    Obj.repr(
# 420 "lib/bparser.mly"
      ( _1 )
# 2218 "lib/bparser.ml"
               : 'infixexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'appexp) in
    Obj.repr(
# 422 "lib/bparser.mly"
      ( _1 )
# 2225 "lib/bparser.ml"
               : 'infixexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dotexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'appexp) in
    Obj.repr(
# 426 "lib/bparser.mly"
      ( mk_over (me _1 _3) ODot [_1; _3] )
# 2234 "lib/bparser.ml"
               : 'dotexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dotexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rewriteexp) in
    Obj.repr(
# 428 "lib/bparser.mly"
      ( mk_over (me _1 _3) ODot [_1; _3] )
# 2243 "lib/bparser.ml"
               : 'dotexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'appexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'appexp) in
    Obj.repr(
# 430 "lib/bparser.mly"
      ( mk_over (me _1 _3) ODot [_1; _3] )
# 2252 "lib/bparser.ml"
               : 'dotexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'rewriteexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rewriteexp) in
    Obj.repr(
# 432 "lib/bparser.mly"
      ( mk_over (me _1 _3) ODot [_1; _3] )
# 2261 "lib/bparser.ml"
               : 'dotexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'rewriteexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'appexp) in
    Obj.repr(
# 434 "lib/bparser.mly"
      ( mk_over (me _1 _3) ODot [_1; _3] )
# 2270 "lib/bparser.ml"
               : 'dotexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'appexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rewriteexp) in
    Obj.repr(
# 436 "lib/bparser.mly"
      ( mk_over (me _1 _3) ODot [_1; _3] )
# 2279 "lib/bparser.ml"
               : 'dotexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tildeexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'appexp) in
    Obj.repr(
# 440 "lib/bparser.mly"
      ( mk_over (me _1 _3) OTilde [_1; _3] )
# 2288 "lib/bparser.ml"
               : 'tildeexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'appexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'appexp) in
    Obj.repr(
# 442 "lib/bparser.mly"
      ( mk_over (me _1 _3) OTilde [_1; _3] )
# 2297 "lib/bparser.ml"
               : 'tildeexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ampexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'appexp) in
    Obj.repr(
# 446 "lib/bparser.mly"
      ( mk_over (me _1 _3) OAmp [_1; _3] )
# 2306 "lib/bparser.ml"
               : 'ampexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'appexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'appexp) in
    Obj.repr(
# 448 "lib/bparser.mly"
      ( mk_over (me _1 _3) OAmp [_1; _3] )
# 2315 "lib/bparser.ml"
               : 'ampexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'appexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'ampampexp) in
    Obj.repr(
# 452 "lib/bparser.mly"
      ( mk_over (me _1 _4) OAmpAmp [_1; _4] )
# 2325 "lib/bparser.ml"
               : 'ampampexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'appexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'appexp) in
    Obj.repr(
# 454 "lib/bparser.mly"
      ( mk_over (me _1 _4) OAmpAmp [_1; _4] )
# 2335 "lib/bparser.ml"
               : 'ampampexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'appexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'appexp) in
    Obj.repr(
# 458 "lib/bparser.mly"
      ( mk_over (me _1 _3) ODarrow [_1; _3] )
# 2344 "lib/bparser.ml"
               : 'rewriteexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'appexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'appexp) in
    Obj.repr(
# 461 "lib/bparser.mly"
      ( mk_over (me _1 _3) ODeqarrow [_1; _3] )
# 2353 "lib/bparser.ml"
               : 'rewriteexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'appexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'appexp) in
    Obj.repr(
# 465 "lib/bparser.mly"
      ( let i = me _1 _3 in 
        mk_bin_op i (mk_core_var i "get") _1 _3 )
# 2363 "lib/bparser.ml"
               : 'lenscomponentexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'appexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'appexp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'appexp) in
    Obj.repr(
# 468 "lib/bparser.mly"
      ( let i = me _1 _3 in
        mk_tern_op i (mk_core_var i "put") _1 _3 _5 )
# 2375 "lib/bparser.ml"
               : 'lenscomponentexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'appexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'appexp) in
    Obj.repr(
# 471 "lib/bparser.mly"
      ( let i = me _1 _3 in
        mk_bin_op i (mk_core_var i "create") _1 _3 )
# 2385 "lib/bparser.ml"
               : 'lenscomponentexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'appexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'appexp) in
    Obj.repr(
# 474 "lib/bparser.mly"
      ( let i = me _1 _3 in
        mk_bin_op i (mk_core_var i "canonize") _1 _3 )
# 2395 "lib/bparser.ml"
               : 'lenscomponentexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'appexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'appexp) in
    Obj.repr(
# 477 "lib/bparser.mly"
      ( let i = me _1 _3 in
        mk_bin_op i (mk_core_var i "choose") _1 _3 )
# 2405 "lib/bparser.ml"
               : 'lenscomponentexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infixexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'appexp) in
    Obj.repr(
# 482 "lib/bparser.mly"
      ( mk_over (me _1 _3) OMinus [_1; _3] )
# 2414 "lib/bparser.ml"
               : 'minusexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'appexp) in
    Obj.repr(
# 484 "lib/bparser.mly"
      ( mk_over (me2 _1 _2) OMinus [EInteger(_1,0); _2] )
# 2422 "lib/bparser.ml"
               : 'minusexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'appexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'appexp) in
    Obj.repr(
# 488 "lib/bparser.mly"
      ( mk_over (me _1 _3) OLt [_1; _3] )
# 2431 "lib/bparser.ml"
               : 'ltexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'appexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'appexp) in
    Obj.repr(
# 492 "lib/bparser.mly"
      ( mk_over (me _1 _3) OLeq [_1; _3] )
# 2440 "lib/bparser.ml"
               : 'leqexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'appexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'appexp) in
    Obj.repr(
# 496 "lib/bparser.mly"
      ( mk_over (me _1 _3) OGt [_1; _3] )
# 2449 "lib/bparser.ml"
               : 'gtexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'appexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'appexp) in
    Obj.repr(
# 500 "lib/bparser.mly"
      ( mk_over (me _1 _3) OGeq [_1; _3] )
# 2458 "lib/bparser.ml"
               : 'geqexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'appexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'repexp) in
    Obj.repr(
# 506 "lib/bparser.mly"
      ( mk_app (me _1 _2) _1 _2 )
# 2466 "lib/bparser.ml"
               : 'appexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'appexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'repexp) in
    Obj.repr(
# 509 "lib/bparser.mly"
            ( let i = me2 _1 _4 in 
        EPerm(i,_2,_4) )
# 2477 "lib/bparser.ml"
               : 'appexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'appexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'repexp) in
    Obj.repr(
# 513 "lib/bparser.mly"
      ( let i = me2 _1 _4 in 
        EProject(i,_2,_4) )
# 2488 "lib/bparser.ml"
               : 'appexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'appexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'appexp) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'repexp) in
    Obj.repr(
# 517 "lib/bparser.mly"
   ( let i = me2 _1 _4 in 
        ESynth (i,_2,_4,_6) )
# 2501 "lib/bparser.ml"
               : 'appexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'repexp) in
    Obj.repr(
# 521 "lib/bparser.mly"
       ( let i = me2 _1 _2 in 
        EId(i,_2) )
# 2510 "lib/bparser.ml"
               : 'appexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'repexp) in
    Obj.repr(
# 525 "lib/bparser.mly"
      ( _1 )
# 2517 "lib/bparser.ml"
               : 'appexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'tyexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'rep) in
    Obj.repr(
# 530 "lib/bparser.mly"
      ( let i2,(min,max) = _2 in 
        let i = me1 _1 i2 in 
	  mk_iter i min max _1 )
# 2527 "lib/bparser.ml"
               : 'repexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tyexp) in
    Obj.repr(
# 535 "lib/bparser.mly"
      ( _1 )
# 2534 "lib/bparser.ml"
               : 'repexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'tyexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'sort) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 539 "lib/bparser.mly"
      ( let i = me1 _1 _4 in 
        ETyApp(i,_1,_3) )
# 2545 "lib/bparser.ml"
               : 'tyexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'aexp) in
    Obj.repr(
# 543 "lib/bparser.mly"
      ( _1 )
# 2552 "lib/bparser.ml"
               : 'tyexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 550 "lib/bparser.mly"
      ( _2 )
# 2561 "lib/bparser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 553 "lib/bparser.mly"
      ( _2 )
# 2570 "lib/bparser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Bident.Qid.t) in
    Obj.repr(
# 556 "lib/bparser.mly"
      ( mk_qid_var _1 )
# 2577 "lib/bparser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'matchexp) in
    Obj.repr(
# 559 "lib/bparser.mly"
      ( _1 )
# 2584 "lib/bparser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'sort) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'list) in
    Obj.repr(
# 562 "lib/bparser.mly"
      ( let i6,mk = _5 in 
        let i = m _1 i6 in 
        let l = mk i _3 in 
        l )
# 2598 "lib/bparser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Info.t * char) in
    Obj.repr(
# 568 "lib/bparser.mly"
      ( let i,c = _1 in 
        EChar(i,c) )
# 2606 "lib/bparser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Info.t * int) in
    Obj.repr(
# 572 "lib/bparser.mly"
      ( let i,n = _1 in 
        EInteger(i,n) )
# 2614 "lib/bparser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Info.t * bool) in
    Obj.repr(
# 576 "lib/bparser.mly"
      ( let i,b = _1 in 
        EBoolean(i,if b then None else Some (EString(i,""))) )
# 2622 "lib/bparser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 580 "lib/bparser.mly"
      ( EBoolean(_1,Some _3) )
# 2632 "lib/bparser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Bident.Id.t) in
    Obj.repr(
# 583 "lib/bparser.mly"
      ( let i1,s1 = _1 in         
        ECSet(i1,true,parse_cset s1) )
# 2640 "lib/bparser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Bident.Id.t) in
    Obj.repr(
# 587 "lib/bparser.mly"
      ( let i1,s1 = _1 in 
        ECSet(i1,false,parse_cset s1) )
# 2648 "lib/bparser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Bident.Id.t) in
    Obj.repr(
# 591 "lib/bparser.mly"
      ( let i,s = _1 in 
        EString(i,s) )
# 2656 "lib/bparser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 595 "lib/bparser.mly"
      ( EUnit(m _1 _2) )
# 2664 "lib/bparser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'productions) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 598 "lib/bparser.mly"
      ( EGrammar(m _1 _3, _2) )
# 2673 "lib/bparser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'aexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 601 "lib/bparser.mly"
      ( let i = me1 _1 _2 in 
        mk_app i (mk_core_var i "stype") _1 )
# 2682 "lib/bparser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'aexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 604 "lib/bparser.mly"
      ( let i = me1 _1 _2 in 
        mk_app i (mk_core_var i "vtype") _1 )
# 2691 "lib/bparser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'aexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 607 "lib/bparser.mly"
      ( let i = me1 _1 _2 in 
        mk_app i (mk_core_var i "astype") _1 )
# 2700 "lib/bparser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'aexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 610 "lib/bparser.mly"
      ( let i = me1 _1 _2 in 
        mk_app i (mk_core_var i "avtype") _1 )
# 2709 "lib/bparser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'aexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 613 "lib/bparser.mly"
      ( let i = me1 _1 _2 in 
        mk_app i (mk_core_var i "bij") _1 )
# 2718 "lib/bparser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 618 "lib/bparser.mly"
      ( let i = _1 in
        let tag = mk_default_tag i in
        mk_over (m _1 _3) OMatch [tag; _2] )
# 2729 "lib/bparser.ml"
               : 'matchexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'appexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 622 "lib/bparser.mly"
      ( mk_over (m _1 _5) OMatch [_2; _4] )
# 2740 "lib/bparser.ml"
               : 'matchexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'equalexp) in
    Obj.repr(
# 627 "lib/bparser.mly"
      ( let i = m (info_of_pat _1) (info_of_exp _3) in 
        (i,_1,_3) )
# 2750 "lib/bparser.ml"
               : 'branch))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'branch) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'branch_list2) in
    Obj.repr(
# 632 "lib/bparser.mly"
      ( let (i1,p,e) = _1 in 
        let (i2,l) = _2 i1 in 
        (m i1 i2, (p,e)::l) )
# 2760 "lib/bparser.ml"
               : 'branch_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'branch) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'branch_list2) in
    Obj.repr(
# 637 "lib/bparser.mly"
      ( let (i1,p,e) = _2 in 
        let (i2,l) = _3 i1 in 
        (m _1 i2, (p,e)::l) )
# 2771 "lib/bparser.ml"
               : 'branch_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 643 "lib/bparser.mly"
      ( (fun i -> (i,[])) )
# 2777 "lib/bparser.ml"
               : 'branch_list2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'branch) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'branch_list2) in
    Obj.repr(
# 646 "lib/bparser.mly"
      ( let (i1,p,e) = _2 in 
        let (i2,l) = _3 i1 in 
        (fun _ -> (m _1 i2, (p,e)::l)) )
# 2788 "lib/bparser.ml"
               : 'branch_list2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 653 "lib/bparser.mly"
      ( (_1, (0,-1)) )
# 2795 "lib/bparser.ml"
               : 'rep))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 656 "lib/bparser.mly"
      ( (_1, (1,-1)) )
# 2802 "lib/bparser.ml"
               : 'rep))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 659 "lib/bparser.mly"
      ( (_1, (0,1)) )
# 2809 "lib/bparser.ml"
               : 'rep))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 662 "lib/bparser.mly"
      ( let i = m _1 _3 in let _,n = _2 in (i, (n,n)) )
# 2818 "lib/bparser.ml"
               : 'rep))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Info.t * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 665 "lib/bparser.mly"
      ( let i = m _1 _3 in let _,n = _2 in (i, (n,-1)) )
# 2828 "lib/bparser.ml"
               : 'rep))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Info.t * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Info.t * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 668 "lib/bparser.mly"
      ( let i = m _1 _5 in let _,n2 = _2 in let _,n4 = _4 in (i, (n2, n4)) )
# 2839 "lib/bparser.ml"
               : 'rep))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 673 "lib/bparser.mly"
      ( _1, (fun i s -> ETyApp(i,mk_list_var i "Nil",s)) )
# 2846 "lib/bparser.ml"
               : 'list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'commaexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 676 "lib/bparser.mly"
      ( (_2, 
         (fun i s -> 
            mk_app i 
              (ETyApp(i,mk_list_var i "Cons",s))
              (EPair(i,_1,ETyApp(i,mk_list_var i "Nil",s))))) )
# 2858 "lib/bparser.ml"
               : 'list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'commaexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'list) in
    Obj.repr(
# 683 "lib/bparser.mly"
    ( let i3,mk = _3 in 
      (i3, 
       (fun i s -> 
          mk_app i
            (ETyApp(i,mk_list_var i "Cons",s))
            (EPair(i,_1, mk i s)))) )
# 2872 "lib/bparser.ml"
               : 'list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'aexp) in
    Obj.repr(
# 694 "lib/bparser.mly"
      ( Misc.Left _1 )
# 2879 "lib/bparser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Bident.Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'aexp) in
    Obj.repr(
# 696 "lib/bparser.mly"
      ( Misc.Right (_1,_3) )
# 2888 "lib/bparser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'atom) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atoms2) in
    Obj.repr(
# 700 "lib/bparser.mly"
      ( add_atom _1 _2 )
# 2896 "lib/bparser.ml"
               : 'atoms))
; (fun __caml_parser_env ->
    Obj.repr(
# 704 "lib/bparser.mly"
     ( (Info.M "atoms",[],[]) )
# 2902 "lib/bparser.ml"
               : 'atoms2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'atom) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atoms2) in
    Obj.repr(
# 706 "lib/bparser.mly"
     ( add_atom _1 _2 )
# 2910 "lib/bparser.ml"
               : 'atoms2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'aexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'aexps2) in
    Obj.repr(
# 710 "lib/bparser.mly"
      ( add_aexp _1 _2 )
# 2918 "lib/bparser.ml"
               : 'aexps))
; (fun __caml_parser_env ->
    Obj.repr(
# 714 "lib/bparser.mly"
      ( (Info.M "aexps", []) )
# 2924 "lib/bparser.ml"
               : 'aexps2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'aexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'aexps2) in
    Obj.repr(
# 716 "lib/bparser.mly"
      ( add_aexp _1 _2 )
# 2932 "lib/bparser.ml"
               : 'aexps2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'atoms) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'aexps) in
    Obj.repr(
# 720 "lib/bparser.mly"
     ( let i1,xs,bs = _1 in
       let i3,ys = _3 in
       Rule(m i1 i3,xs,ys,bs) )
# 2943 "lib/bparser.ml"
               : 'rule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'rule) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'rules2) in
    Obj.repr(
# 726 "lib/bparser.mly"
    ( _1 :: _2 )
# 2951 "lib/bparser.ml"
               : 'rules))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'rule) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rules2) in
    Obj.repr(
# 728 "lib/bparser.mly"
    ( _2 :: _3 )
# 2960 "lib/bparser.ml"
               : 'rules))
; (fun __caml_parser_env ->
    Obj.repr(
# 732 "lib/bparser.mly"
    ( [] )
# 2966 "lib/bparser.ml"
               : 'rules2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'rule) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rules2) in
    Obj.repr(
# 734 "lib/bparser.mly"
    ( _2 :: _3 )
# 2975 "lib/bparser.ml"
               : 'rules2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Bident.Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'rules) in
    Obj.repr(
# 738 "lib/bparser.mly"
    ( let i1,_ = _1 in
      let i5 = info_of_rules _4 in
      Prod(m i1 i5,_1,_4) )
# 2987 "lib/bparser.ml"
               : 'production))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'production) in
    Obj.repr(
# 744 "lib/bparser.mly"
    ( [_1] )
# 2994 "lib/bparser.ml"
               : 'productions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'production) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'productions) in
    Obj.repr(
# 746 "lib/bparser.mly"
    ( _1 :: _3 )
# 3003 "lib/bparser.ml"
               : 'productions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Bident.Id.t) in
    Obj.repr(
# 751 "lib/bparser.mly"
      ( _1 )
# 3010 "lib/bparser.ml"
               : 'id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Bident.Id.t) in
    Obj.repr(
# 753 "lib/bparser.mly"
      ( _1 )
# 3017 "lib/bparser.ml"
               : 'id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Bident.Id.t) in
    Obj.repr(
# 757 "lib/bparser.mly"
      ( Qid.t_of_id _1 )
# 3024 "lib/bparser.ml"
               : Bident.Qid.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Bident.Id.t) in
    Obj.repr(
# 759 "lib/bparser.mly"
      ( Qid.t_of_id _1 )
# 3031 "lib/bparser.ml"
               : Bident.Qid.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Bident.Id.t) in
    Obj.repr(
# 761 "lib/bparser.mly"
      ( let (i,qs) = _1 in parse_qid i qs )
# 3038 "lib/bparser.ml"
               : Bident.Qid.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Bident.Id.t) in
    Obj.repr(
# 765 "lib/bparser.mly"
      ( Qid.t_of_id _1 )
# 3045 "lib/bparser.ml"
               : 'qvar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Bident.Id.t) in
    Obj.repr(
# 768 "lib/bparser.mly"
      ( let (i,qs) = _1 in parse_qid i qs )
# 3052 "lib/bparser.ml"
               : 'qvar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'param) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'param_list2) in
    Obj.repr(
# 773 "lib/bparser.mly"
      ( _1 :: _2 )
# 3060 "lib/bparser.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'param) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'param_list2) in
    Obj.repr(
# 776 "lib/bparser.mly"
      ( _1 :: _2 )
# 3068 "lib/bparser.ml"
               : 'param_list2))
; (fun __caml_parser_env ->
    Obj.repr(
# 778 "lib/bparser.mly"
      ( [] )
# 3074 "lib/bparser.ml"
               : 'param_list2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'sort) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 782 "lib/bparser.mly"
      ( let i = m _1 _5 in 
        Misc.Left (Param(i,_2,_4)) )
# 3086 "lib/bparser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : Info.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : Info.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : Info.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'appexp) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 786 "lib/bparser.mly"
      ( let i = m _1 _9 in 
        let p = mk_bin_op i (mk_core_var i "equiv") 
	                    (mk_app i (mk_core_var i "vtype") (mk_var _2))
                            _8 in 
        let s = SRefine(_2,false,SLens,p,None) in 
        Misc.Left (Param(i,_2,s)) )
# 3106 "lib/bparser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : Info.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : Info.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : Info.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'appexp) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 794 "lib/bparser.mly"
      ( let i = m _1 _9 in 
        let p = mk_bin_op i (mk_core_var i "land")
	                    (mk_bin_op i (mk_core_var i "equiv") 
	                                 (mk_app i (mk_core_var i "vtype") (mk_var _2))
                                         _8)
			    (mk_app i (mk_core_var i "bij") (mk_var _2)) in
        let s = SRefine(_2,false,SLens,p,None) in 
        Misc.Left (Param(i,_2,s)) )
# 3128 "lib/bparser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : Info.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : Info.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'appexp) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 804 "lib/bparser.mly"
      ( let i = m _1 _9 in 
        let p = mk_bin_op i (mk_core_var i "equiv") 
	                    (mk_app i (mk_core_var i "stype") (mk_var _2))
                            _6 in 
        let s = SRefine(_2,false,SLens,p,None) in 
        Misc.Left (Param(i,_2,s)) )
# 3148 "lib/bparser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : Info.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : Info.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'appexp) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 812 "lib/bparser.mly"
      ( let i = m _1 _9 in 
        let p = mk_bin_op i (mk_core_var i "land")
	                    (mk_bin_op i (mk_core_var i "equiv") 
	                                 (mk_app i (mk_core_var i "stype") (mk_var _2))
                                         _6)
			    (mk_app i (mk_core_var i "bij") (mk_var _2)) in
        let s = SRefine(_2,false,SLens,p,None) in 
        Misc.Left (Param(i,_2,s)) )
# 3170 "lib/bparser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : Info.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : Info.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'appexp) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'appexp) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 822 "lib/bparser.mly"
      ( let i = m _1 _9 in 
        let p = mk_tern_op i (mk_core_var i "in_lens_type") (mk_var _2) _6 _8 in 
        let s = SRefine(_2,false,SLens,p,None) in 
        Misc.Left (Param(i,_2,s)) )
# 3188 "lib/bparser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : Info.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : Info.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'appexp) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'appexp) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 828 "lib/bparser.mly"
      ( let i = m _1 _9 in 
        let p = mk_tern_op i (mk_core_var i "in_bij_lens_type") (mk_var _2) _6 _8 in 
        let s = SRefine(_2,false,SLens,p,Some(_6, _8)) in 
        Misc.Left (Param(i,_2,s)) )
# 3206 "lib/bparser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Info.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 834 "lib/bparser.mly"
      ( let i = m _1 _7 in 
        let p = mk_bin_op i (mk_core_var i "matches") _6 (mk_var _2) in 
        let s = SRefine(_2,false,SString,p,None) in
        Misc.Left (Param(i,_2,s)) )
# 3222 "lib/bparser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'sort) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Info.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 840 "lib/bparser.mly"
      ( let i,_ = _2 in 
        let s = SRefine(_2,true,_4,_7,None) in 
        Misc.Left (Param(i,_2,s)) )
# 3238 "lib/bparser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'sort) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 845 "lib/bparser.mly"
      ( let i,_ = _2 in 
        let s = SRefine(_2,false,_4,_6,None) in 
        Misc.Left (Param(i,_2,s)) )
# 3253 "lib/bparser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Bident.Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 850 "lib/bparser.mly"
      ( Misc.Right (_2) )
# 3262 "lib/bparser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Bident.Id.t) in
    Obj.repr(
# 853 "lib/bparser.mly"
      ( Misc.Right (_1) )
# 3269 "lib/bparser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 857 "lib/bparser.mly"
      ( let i = m _1 _2 in
        Misc.Left (Param(i,(i,"(unit)"),SUnit)) )
# 3278 "lib/bparser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Bident.Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'sort) in
    Obj.repr(
# 863 "lib/bparser.mly"
      ( SForall(_2,_4) )
# 3288 "lib/bparser.ml"
               : 'sort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arrowsort) in
    Obj.repr(
# 866 "lib/bparser.mly"
      ( _1 )
# 3295 "lib/bparser.ml"
               : 'sort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'productsort) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arrowsort) in
    Obj.repr(
# 871 "lib/bparser.mly"
      ( SFunction(Id.wild,_1,_3) )
# 3304 "lib/bparser.ml"
               : 'arrowsort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'productsort) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'arrowsort) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 874 "lib/bparser.mly"
      ( SFunction(_2,_4,_6) )
# 3317 "lib/bparser.ml"
               : 'arrowsort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'productsort) in
    Obj.repr(
# 877 "lib/bparser.mly"
      ( _1 )
# 3324 "lib/bparser.ml"
               : 'arrowsort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'productsort) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'datatypesort) in
    Obj.repr(
# 882 "lib/bparser.mly"
      ( SProduct(_1,_3) )
# 3333 "lib/bparser.ml"
               : 'productsort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'datatypesort) in
    Obj.repr(
# 885 "lib/bparser.mly"
      ( _1 )
# 3340 "lib/bparser.ml"
               : 'productsort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'bsort) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'qvar) in
    Obj.repr(
# 890 "lib/bparser.mly"
      ( SData([_1],_2) )
# 3348 "lib/bparser.ml"
               : 'datatypesort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'sort) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'sort_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'qvar) in
    Obj.repr(
# 893 "lib/bparser.mly"
      ( SData(_2::_4, _6) )
# 3360 "lib/bparser.ml"
               : 'datatypesort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bsort) in
    Obj.repr(
# 896 "lib/bparser.mly"
      ( _1 )
# 3367 "lib/bparser.ml"
               : 'datatypesort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'sort) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 900 "lib/bparser.mly"
      ( _2 )
# 3376 "lib/bparser.ml"
               : 'bsort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'sort) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 903 "lib/bparser.mly"
      ( SRefine(Id.wild,false,_2,_5,None) )
# 3388 "lib/bparser.ml"
               : 'bsort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'sort) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 906 "lib/bparser.mly"
      ( SRefine(Id.wild,true,_2,_4,None) )
# 3399 "lib/bparser.ml"
               : 'bsort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'sort) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Info.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 909 "lib/bparser.mly"
      ( SRefine(_2,true,_4,_7,None) )
# 3413 "lib/bparser.ml"
               : 'bsort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'sort) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 912 "lib/bparser.mly"
      ( SRefine(_2,false,_4,_6,None) )
# 3426 "lib/bparser.ml"
               : 'bsort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Info.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'appexp) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 915 "lib/bparser.mly"
      ( let i = m _1 _7 in 
        let l = Id.mk i "_l" in 
        let p = mk_bin_op i (mk_core_var i "equiv") 
	                    (mk_app i (mk_core_var i "vtype") (mk_var l))
                            _6 in 
        SRefine(l,false,SLens,p,None) )
# 3444 "lib/bparser.ml"
               : 'bsort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Info.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'appexp) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 923 "lib/bparser.mly"
      ( let i = m _1 _7 in 
        let l = Id.mk i "_l" in 
        let p = mk_bin_op i (mk_core_var i "land")
	                    (mk_bin_op i (mk_core_var i "equiv") 
	                                 (mk_app i (mk_core_var i "vtype") (mk_var l))
                                         _6)
			    (mk_app i (mk_core_var i "bij") (mk_var l)) in
        SRefine(l,false,SLens,p,None) )
# 3464 "lib/bparser.ml"
               : 'bsort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'appexp) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 933 "lib/bparser.mly"
      ( let i = m _1 _7 in 
	let l = Id.mk i "_l" in 
        let p = mk_bin_op i (mk_core_var i "equiv") 
	                    (mk_app i (mk_core_var i "stype") (mk_var l))
                            _4 in 
        SRefine(l,false,SLens,p,None) )
# 3482 "lib/bparser.ml"
               : 'bsort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'appexp) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 941 "lib/bparser.mly"
      ( let i = m _1 _7 in 
	let l = Id.mk i "_l" in 
        let p = mk_bin_op i (mk_core_var i "land")
	                    (mk_bin_op i (mk_core_var i "equiv") 
	                                 (mk_app i (mk_core_var i "stype") (mk_var l))
                                         _4)
			    (mk_app i (mk_core_var i "bij") (mk_var l)) in
        SRefine(l,false,SLens,p,None) )
# 3502 "lib/bparser.ml"
               : 'bsort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'appexp) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'appexp) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 951 "lib/bparser.mly"
      ( let i = m _1 _7 in 
        let l = Id.mk i "_l" in 
        let chk c a = mk_tern_op i (mk_core_var i "in_lens_type") (mk_var l) c a in 
        SRefine(l,false,SLens,chk _4 _6,None) )
# 3518 "lib/bparser.ml"
               : 'bsort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'appexp) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'appexp) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 957 "lib/bparser.mly"
      ( let i = m _1 _7 in 
        let l = Id.mk i "_l" in 
        let chk c a = mk_tern_op i (mk_core_var i "in_bij_lens_type") (mk_var l) c a in 
        SRefine(l,false,SLens,chk _4 _6,Some(_4,_6)) )
# 3534 "lib/bparser.ml"
               : 'bsort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 963 "lib/bparser.mly"
      ( let i = m _1 _5 in 
        let s = Id.mk i "_s" in 
        let p = mk_bin_op i (mk_core_var i "matches") _4 (mk_var s) in 
        SRefine(s,false,SString,p,None) )
# 3548 "lib/bparser.ml"
               : 'bsort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'asort) in
    Obj.repr(
# 969 "lib/bparser.mly"
      ( _1 )
# 3555 "lib/bparser.ml"
               : 'bsort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'qvar) in
    Obj.repr(
# 974 "lib/bparser.mly"
      ( SData([], _1) )
# 3562 "lib/bparser.ml"
               : 'asort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 977 "lib/bparser.mly"
      ( SChar )
# 3569 "lib/bparser.ml"
               : 'asort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 980 "lib/bparser.mly"
      ( SString )
# 3576 "lib/bparser.ml"
               : 'asort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 983 "lib/bparser.mly"
      ( SRegexp )
# 3583 "lib/bparser.ml"
               : 'asort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 986 "lib/bparser.mly"
      ( SAregexp )
# 3590 "lib/bparser.ml"
               : 'asort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 989 "lib/bparser.mly"
      ( SSkeletons )
# 3597 "lib/bparser.ml"
               : 'asort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 992 "lib/bparser.mly"
      ( SResources )
# 3604 "lib/bparser.ml"
               : 'asort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 995 "lib/bparser.mly"
      ( SLens )
# 3611 "lib/bparser.ml"
               : 'asort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 998 "lib/bparser.mly"
      ( SInteger )
# 3618 "lib/bparser.ml"
               : 'asort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 1001 "lib/bparser.mly"
      ( SBool )
# 3625 "lib/bparser.ml"
               : 'asort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 1004 "lib/bparser.mly"
      ( SCanonizer )
# 3632 "lib/bparser.ml"
               : 'asort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 1007 "lib/bparser.mly"
      ( SPrefs PrBool )
# 3639 "lib/bparser.ml"
               : 'asort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 1010 "lib/bparser.mly"
      ( SPrefs PrInt )
# 3646 "lib/bparser.ml"
               : 'asort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 1013 "lib/bparser.mly"
      ( SPrefs PrString )
# 3653 "lib/bparser.ml"
               : 'asort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 1016 "lib/bparser.mly"
      ( SPrefs PrStringList )
# 3660 "lib/bparser.ml"
               : 'asort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 1019 "lib/bparser.mly"
      ( SUnit )
# 3667 "lib/bparser.ml"
               : 'asort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tyvar) in
    Obj.repr(
# 1022 "lib/bparser.mly"
      ( SVar _1 )
# 3674 "lib/bparser.ml"
               : 'asort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Bident.Id.t) in
    Obj.repr(
# 1026 "lib/bparser.mly"
      ( _1 )
# 3681 "lib/bparser.ml"
               : 'tyvar))
; (fun __caml_parser_env ->
    Obj.repr(
# 1030 "lib/bparser.mly"
      ( [] )
# 3687 "lib/bparser.ml"
               : 'tyvar_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tyvar) in
    Obj.repr(
# 1033 "lib/bparser.mly"
      ( [_1] )
# 3694 "lib/bparser.ml"
               : 'tyvar_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tyvar_list2) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 1036 "lib/bparser.mly"
      ( _2 )
# 3703 "lib/bparser.ml"
               : 'tyvar_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tyvar) in
    Obj.repr(
# 1040 "lib/bparser.mly"
      ( [_1] )
# 3710 "lib/bparser.ml"
               : 'tyvar_list2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tyvar) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tyvar_list2) in
    Obj.repr(
# 1043 "lib/bparser.mly"
      ( _1::_3 )
# 3719 "lib/bparser.ml"
               : 'tyvar_list2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'sort) in
    Obj.repr(
# 1047 "lib/bparser.mly"
      ( [_1] )
# 3726 "lib/bparser.ml"
               : 'sort_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'sort) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'sort_list) in
    Obj.repr(
# 1050 "lib/bparser.mly"
      ( _1 :: _3 )
# 3735 "lib/bparser.ml"
               : 'sort_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Bident.Id.t) in
    Obj.repr(
# 1055 "lib/bparser.mly"
      ( (_1,None) )
# 3742 "lib/bparser.ml"
               : 'dtsort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Bident.Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'sort) in
    Obj.repr(
# 1058 "lib/bparser.mly"
      ( (_1,Some _3) )
# 3751 "lib/bparser.ml"
               : 'dtsort))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'dtsort) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'dtsort_list2) in
    Obj.repr(
# 1062 "lib/bparser.mly"
      ( _1 :: _2 )
# 3759 "lib/bparser.ml"
               : 'dtsort_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 1066 "lib/bparser.mly"
      ( [] )
# 3765 "lib/bparser.ml"
               : 'dtsort_list2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'dtsort) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dtsort_list2) in
    Obj.repr(
# 1069 "lib/bparser.mly"
      ( _2 :: _3 )
# 3774 "lib/bparser.ml"
               : 'dtsort_list2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'listpat) in
    Obj.repr(
# 1073 "lib/bparser.mly"
            ( _1 )
# 3781 "lib/bparser.ml"
               : 'lcpat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'conpat) in
    Obj.repr(
# 1074 "lib/bparser.mly"
           ( _1 )
# 3788 "lib/bparser.ml"
               : 'lcpat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lcpat) in
    Obj.repr(
# 1078 "lib/bparser.mly"
      ( let i = mp _1 _3 in
        PPar(i,_1,_3) )
# 3798 "lib/bparser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lcpat) in
    Obj.repr(
# 1081 "lib/bparser.mly"
          ( _1 )
# 3805 "lib/bparser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'letpat) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lcpat) in
    Obj.repr(
# 1085 "lib/bparser.mly"
      ( let i = mp _1 _3 in
        PPar(i,_1,_3) )
# 3815 "lib/bparser.ml"
               : 'letpat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Bident.Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'apat) in
    Obj.repr(
# 1089 "lib/bparser.mly"
      ( let i,qs = _1 in
        PVnt(i,parse_qid i qs, Some _2) )
# 3824 "lib/bparser.ml"
               : 'letpat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'apat) in
    Obj.repr(
# 1096 "lib/bparser.mly"
         ( _1 )
# 3831 "lib/bparser.ml"
               : 'letpat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Bident.Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'apat) in
    Obj.repr(
# 1100 "lib/bparser.mly"
      ( let i1,_ = _1 in 
        let i = mp2 i1 _2 in 
         PVnt(i,Qid.t_of_id _1,Some _2) )
# 3841 "lib/bparser.ml"
               : 'conpat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Bident.Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'apat) in
    Obj.repr(
# 1105 "lib/bparser.mly"
      ( let (i,qs) = _1 in 
        PVnt(i,parse_qid i qs,Some _2) )
# 3850 "lib/bparser.ml"
               : 'conpat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'apat) in
    Obj.repr(
# 1108 "lib/bparser.mly"
         ( _1 )
# 3857 "lib/bparser.ml"
               : 'conpat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'aapat) in
    Obj.repr(
# 1112 "lib/bparser.mly"
      ( _1 )
# 3864 "lib/bparser.ml"
               : 'apat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 1115 "lib/bparser.mly"
      ( PUnt(m _1 _2) )
# 3872 "lib/bparser.ml"
               : 'apat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Info.t * int) in
    Obj.repr(
# 1118 "lib/bparser.mly"
    ( let i,n = _1 in 
       PInt(i,n) )
# 3880 "lib/bparser.ml"
               : 'apat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Info.t * bool) in
    Obj.repr(
# 1122 "lib/bparser.mly"
      ( let i,b = _1 in 
        PBol(i,b) )
# 3888 "lib/bparser.ml"
               : 'apat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'pat) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 1126 "lib/bparser.mly"
      ( PCex(_1,_3) )
# 3898 "lib/bparser.ml"
               : 'apat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Bident.Id.t) in
    Obj.repr(
# 1129 "lib/bparser.mly"
      ( let i,s = _1 in 
        PStr(i,s) )
# 3906 "lib/bparser.ml"
               : 'apat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Bident.Id.t) in
    Obj.repr(
# 1133 "lib/bparser.mly"
      ( let i,_ = _1 in 
        PVnt(i,Qid.t_of_id _1,None) )
# 3914 "lib/bparser.ml"
               : 'apat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Bident.Id.t) in
    Obj.repr(
# 1137 "lib/bparser.mly"
      ( let (i,qs) = _1 in 
        PVnt(i,parse_qid i qs,None) )
# 3922 "lib/bparser.ml"
               : 'apat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Info.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 1141 "lib/bparser.mly"
      ( _2 )
# 3931 "lib/bparser.ml"
               : 'apat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Info.t) in
    Obj.repr(
# 1145 "lib/bparser.mly"
      ( PWld _1 )
# 3938 "lib/bparser.ml"
               : 'aapat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Bident.Id.t) in
    Obj.repr(
# 1148 "lib/bparser.mly"
      ( let i, _ = _1 in
        PVar (i, _1, None) )
# 3946 "lib/bparser.ml"
               : 'aapat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Bident.Id.t) in
    Obj.repr(
# 1153 "lib/bparser.mly"
      ( let i, cset = _1 in
        if cset = ""
        then PVnt (i, Qid.mk_list_t i "Nil", None)
        else syntax_error i (Printf.sprintf "\nDid you meant %s::[] instead of [%s]?" cset cset) )
# 3956 "lib/bparser.ml"
               : 'listpat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'conpat) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'aapat) in
    Obj.repr(
# 1159 "lib/bparser.mly"
      ( let i = _2 in
        let p = PPar (i, _1, _3) in
        PVnt (_2, Qid.mk_list_t i "Cons", Some p) )
# 3967 "lib/bparser.ml"
               : 'listpat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'conpat) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Info.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'listpat) in
    Obj.repr(
# 1164 "lib/bparser.mly"
      ( let i = _2 in
        let p = PPar (i, _1, _3) in
        PVnt (_2, Qid.mk_list_t i "Cons", Some p) )
# 3978 "lib/bparser.ml"
               : 'listpat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Bident.Id.t) in
    Obj.repr(
# 1171 "lib/bparser.mly"
      ( Qid.t_of_id _1 )
# 3985 "lib/bparser.ml"
               : Bident.Qid.t))
(* Entry modl *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry uid *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry qid *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let modl (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Bsyntax.modl)
let uid (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Bident.Qid.t)
let qid (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : Bident.Qid.t)
