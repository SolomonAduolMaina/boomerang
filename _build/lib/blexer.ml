# 21 "blexer.srcl"
 
open Bparser

module LE = Lexing

let lexeme = LE.lexeme

let sprintf = Printf.sprintf

(* We track of lexing information using a stack. A stack is required
   because the lexer is invoked, on-demand, from the registry to parse
   strings into sorts and qualified identifiers. *)
let info_stk = ref []

let filename () = match !info_stk with 
    [] -> Error.simple_error "Blexer.filename : info stack is empty."
  | (fn,_,_)::_ -> fn

let lineno () = match !info_stk with 
    [] -> Error.simple_error "Blexer.lineno : info stack is empty."
  | (_,l,_)::_ -> l

let linestart () = match !info_stk with 
    [] -> Error.simple_error "Blexer.linestart : info stack is empty."
  | (_,_,c)::_ -> c

let set_filename fn = match !info_stk with 
    [] -> Error.simple_error "Blexer.set_filename : info stack is empty."
  | (_,l,c)::t -> info_stk := (fn,l,c)::t

let set_lineno l = match !info_stk with 
    [] -> Error.simple_error "Blexer.set_lineno : info stack is empty."
  | (fn,_,c)::t -> info_stk := (fn,l,c)::t

let set_linestart c = match !info_stk with 
    [] -> Error.simple_error "Blexer.set_linestart : info stack is empty."
  | (fn,l,_)::t -> info_stk := (fn,l,c)::t

let setup fn = info_stk := (fn,1,0)::!info_stk

let finish () = match !info_stk with
    [] -> Error.simple_error "Blexer.finish : info stack is empty."
  | _::t -> info_stk := t

let newline lexbuf : unit = 
  set_linestart (LE.lexeme_start lexbuf);
  set_lineno (lineno () + 1)

let info lexbuf : Info.t = 
  let c1 = LE.lexeme_start lexbuf in
  let c2 = LE.lexeme_end lexbuf in
  let l = lineno () in
  let c = linestart () in
    Info.I (filename(), (l, c1 - c - 1),(l, c2 - c - 1))

let error lexbuf msg =
  let i = info lexbuf in
  let t = lexeme lexbuf in   
  let s = Printf.sprintf "%s: lexing error %s at %s." 
    (Info.string_of_t i)
    msg 
    t in
    Error.simple_error s

let text = Lexing.lexeme

let extractLineno yytext offset =
  int_of_string (String.sub yytext offset (String.length yytext - offset))

let keywords = Hashtbl.create 17
let _ = 
  Safelist.iter (fun (kw,tok) -> Hashtbl.add keywords kw tok)
    [ ("module", (fun i -> MODULE i))
    ; ("open", (fun i -> OPEN i)) 
    ; ("let", (fun i -> LET i)) 
    ; ("in", (fun i -> IN i))
    ; ("fun", (fun i -> FUN i))
    ; ("begin", (fun i -> BEGIN i))
    ; ("end", (fun i -> END i))
    ; ("grammar", (fun i -> GRAMMAR i))
    ; ("and", (fun i -> AND i))
    ; ("test", (fun i -> TEST i))
    ; ("match", (fun i -> MATCH i))
    ; ("with", (fun i -> WITH i))
    ; ("error", (fun i -> ERROR i))
    ; ("char", (fun i -> CHAR i))
    ; ("string", (fun i -> STRING i))
    ; ("regexp", (fun i -> REGEXP i))
    ; ("aregexp", (fun i -> AREGEXP i))
    ; ("skeleton_set", (fun i -> SKELETONS i))
    ; ("resource_set", (fun i -> RESOURCES i))
    ; ("lens", (fun i -> LENS i))
    ; ("int", (fun i -> INT i))
    ; ("bool", (fun i -> BOOL i))
    ; ("canonizer", (fun i -> CANONIZER i))
    ; ("bool_prefs", (fun i -> BOOLPREFS i))
    ; ("int_prefs", (fun i -> INTPREFS i))
    ; ("string_prefs", (fun i -> STRINGPREFS i))
    ; ("string_list_prefs", (fun i -> STRINGLISTPREFS i))
    ; ("unit", (fun i -> UNIT i))
    ; ("type", (fun i -> TYPE i))
    ; ("of", (fun i -> OF i))
    ; ("into", (fun i -> INTO i))
    ; ("where", (fun i -> WHERE i))
    ; ("forall", (fun i -> FORALL i))
    ; ("lt", (fun i -> LT i))
    ; ("leq", (fun i -> LEQ i))
    ; ("gt", (fun i -> GT i))
    ; ("geq", (fun i -> GEQ i))
    ; ("true", (fun i -> BOOLEAN(i,true)))
    ; ("false", (fun i -> BOOLEAN(i,false)))
    ; ("cex", (fun i -> CEX i))
		; ("perm", (fun i -> PERM i))
		; ("project", (fun i -> PROJECT i))
		; ("with", (fun i -> WITH i))
		; ("id", (fun i -> ID i))
		; ("synth", (fun i -> SYNTH i))
    ]

# 122 "lib/blexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\192\255\194\255\195\255\081\000\100\000\193\000\021\001\
    \203\255\204\255\205\255\206\255\207\255\038\000\210\255\211\255\
    \034\000\216\255\218\255\049\000\220\255\017\000\098\000\080\000\
    \228\255\229\255\230\255\105\001\214\001\234\255\033\002\251\255\
    \252\255\005\000\103\000\005\000\254\255\193\255\180\001\041\000\
    \031\000\045\000\050\000\046\000\126\000\074\000\091\000\077\000\
    \247\255\078\000\246\255\096\000\113\000\115\000\125\000\130\000\
    \112\000\128\000\245\255\120\000\123\000\129\000\113\000\135\000\
    \244\255\140\000\137\000\152\000\243\255\143\000\146\000\187\000\
    \180\000\176\000\192\000\173\000\196\000\206\000\218\000\238\255\
    \199\000\209\000\222\000\242\255\215\000\238\000\231\000\227\000\
    \243\000\223\000\219\000\000\001\013\001\241\255\255\000\001\001\
    \024\001\034\001\046\001\240\255\027\001\037\001\050\001\237\255\
    \031\001\051\001\063\001\239\255\059\001\236\255\227\255\226\255\
    \212\255\104\001\105\001\225\255\224\255\223\255\217\255\214\255\
    \209\255\104\002\129\001\188\002\016\003\157\001\202\255\100\003\
    \184\003\012\004\096\004\180\004\190\001\062\004\251\255\252\255\
    \253\255\105\001\254\255\255\255\095\004\251\255\252\255\240\001\
    \254\255\255\255\253\255\241\001\108\002\251\255\252\255\242\001\
    \254\255\255\255\253\255\243\001\162\001\254\255\255\255\246\001\
    \252\255\253\255\137\001\216\001\254\255\107\002\252\255\059\002\
    \255\255\192\001\060\002\254\255\247\001\252\255\253\255\061\002\
    \193\001\062\002\255\255\248\001\252\255\253\255\254\255\198\001\
    \255\255\255\004\248\255\047\002\015\005\251\255\252\255\253\255\
    \254\255\255\255\025\005\051\005\073\005\250\255\249\255\096\004\
    \251\255\252\255\253\255\220\001\007\002\255\255\254\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\058\000\056\000\056\000\056\000\
    \255\255\255\255\255\255\255\255\255\255\047\000\255\255\255\255\
    \040\000\255\255\255\255\036\000\255\255\033\000\042\000\034\000\
    \255\255\255\255\255\255\024\000\023\000\255\255\020\000\255\255\
    \255\255\002\000\022\000\000\000\255\255\255\255\059\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\055\000\255\255\056\000\055\000\054\000\255\255\053\000\
    \053\000\255\255\057\000\057\000\255\255\255\255\255\255\255\255\
    \255\255\004\000\255\255\255\255\255\255\255\255\255\255\002\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\003\000\000\000\255\255\255\255\255\255\002\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\003\000\
    \255\255\255\255\255\255\007\000\007\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\004\000\004\000\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\000\000\255\255\255\255\255\255\122\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \255\255\000\000\000\000\255\255\000\000\255\255\255\255\255\255\
    \000\000\000\000\000\000\255\255\255\255\000\000\255\255\000\000\
    \000\000\255\255\255\255\255\255\000\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255\000\000\255\255\000\000\000\000\000\000\
    \000\000\255\255\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\134\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\141\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\255\255\149\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\255\255\157\000\000\000\000\000\160\000\
    \000\000\000\000\255\255\255\255\000\000\166\000\000\000\255\255\
    \000\000\255\255\255\255\000\000\173\000\000\000\000\000\255\255\
    \255\255\255\255\000\000\180\000\000\000\000\000\000\000\255\255\
    \000\000\186\000\000\000\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\255\255\000\000\000\000\200\000\
    \000\000\000\000\000\000\255\255\255\255\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\035\000\003\000\000\000\000\000\000\000\035\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \035\000\024\000\008\000\018\000\026\000\035\000\029\000\007\000\
    \033\000\032\000\034\000\025\000\014\000\028\000\030\000\037\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\013\000\031\000\022\000\023\000\015\000\009\000\
    \005\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\016\000\010\000\017\000\012\000\027\000\
    \120\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\020\000\021\000\019\000\011\000\132\000\
    \119\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\005\000\118\000\117\000\111\000\113\000\
    \036\000\005\000\108\000\104\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\112\000\114\000\
    \095\000\084\000\080\000\094\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\049\000\
    \047\000\048\000\050\000\005\000\069\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\053\000\
    \065\000\059\000\055\000\056\000\057\000\058\000\052\000\060\000\
    \006\000\061\000\062\000\063\000\064\000\051\000\006\000\129\000\
    \054\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\066\000\067\000\068\000\070\000\071\000\
    \002\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\072\000\073\000\074\000\075\000\
    \006\000\076\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\121\000\077\000\078\000\079\000\
    \081\000\082\000\124\000\083\000\085\000\123\000\123\000\123\000\
    \123\000\123\000\123\000\123\000\123\000\123\000\123\000\086\000\
    \087\000\088\000\089\000\090\000\091\000\124\000\124\000\124\000\
    \124\000\124\000\124\000\124\000\124\000\124\000\124\000\124\000\
    \124\000\124\000\124\000\124\000\124\000\124\000\124\000\124\000\
    \124\000\124\000\124\000\124\000\124\000\124\000\124\000\124\000\
    \092\000\125\000\093\000\100\000\124\000\096\000\124\000\124\000\
    \124\000\124\000\124\000\124\000\124\000\124\000\124\000\124\000\
    \124\000\124\000\124\000\124\000\124\000\124\000\124\000\124\000\
    \124\000\124\000\124\000\124\000\124\000\124\000\124\000\124\000\
    \005\000\097\000\098\000\099\000\101\000\102\000\005\000\103\000\
    \105\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\106\000\107\000\109\000\116\000\115\000\
    \126\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\126\000\139\000\138\000\164\000\
    \005\000\158\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \163\000\147\000\147\000\155\000\155\000\005\000\171\000\178\000\
    \163\000\175\000\182\000\005\000\184\000\206\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \147\000\147\000\155\000\155\000\110\000\255\255\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\205\000\000\000\000\000\162\000\005\000\183\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\170\000\170\000\177\000\177\000\194\000\
    \194\000\194\000\194\000\194\000\194\000\194\000\194\000\194\000\
    \194\000\000\000\000\000\000\000\146\000\146\000\154\000\154\000\
    \000\000\000\000\000\000\000\000\000\000\167\000\151\000\000\000\
    \000\000\169\000\169\000\176\000\176\000\000\000\000\000\000\000\
    \000\000\000\000\041\000\039\000\044\000\042\000\000\000\000\000\
    \046\000\000\000\000\000\168\000\000\000\000\000\152\000\121\000\
    \000\000\045\000\000\000\000\000\043\000\121\000\000\000\040\000\
    \121\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
    \121\000\121\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \121\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
    \121\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
    \121\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
    \121\000\121\000\121\000\000\000\000\000\000\000\000\000\121\000\
    \153\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
    \121\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
    \121\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
    \121\000\121\000\121\000\128\000\000\000\000\000\000\000\000\000\
    \000\000\005\000\000\000\000\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\161\000\174\000\
    \181\000\000\000\000\000\000\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\000\000\
    \000\000\000\000\000\000\005\000\000\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\127\000\
    \000\000\000\000\000\000\000\000\000\000\121\000\000\000\000\000\
    \121\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
    \121\000\121\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \121\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
    \121\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
    \121\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
    \121\000\121\000\121\000\255\255\150\000\000\000\000\000\121\000\
    \000\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
    \121\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
    \121\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
    \121\000\121\000\121\000\121\000\000\000\000\000\000\000\000\000\
    \000\000\121\000\000\000\000\000\121\000\121\000\121\000\121\000\
    \121\000\121\000\121\000\121\000\121\000\121\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\121\000\121\000\121\000\121\000\
    \121\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
    \121\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
    \121\000\121\000\121\000\121\000\121\000\121\000\121\000\000\000\
    \000\000\000\000\000\000\121\000\000\000\121\000\121\000\121\000\
    \121\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
    \121\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
    \121\000\121\000\121\000\121\000\121\000\121\000\121\000\005\000\
    \000\000\000\000\000\000\000\000\000\000\005\000\000\000\000\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\000\000\000\000\000\000\000\000\005\000\
    \000\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\130\000\000\000\000\000\000\000\000\000\
    \000\000\130\000\000\000\000\000\130\000\130\000\130\000\130\000\
    \130\000\130\000\130\000\130\000\130\000\130\000\000\000\000\000\
    \135\000\000\000\000\000\000\000\130\000\131\000\131\000\131\000\
    \131\000\131\000\131\000\131\000\131\000\131\000\131\000\131\000\
    \131\000\131\000\131\000\131\000\131\000\131\000\131\000\131\000\
    \131\000\131\000\131\000\131\000\131\000\131\000\131\000\000\000\
    \000\000\143\000\202\000\130\000\000\000\130\000\130\000\130\000\
    \130\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \130\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \130\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \204\000\000\000\203\000\000\000\000\000\130\000\144\000\000\000\
    \130\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \130\000\130\000\137\000\136\000\000\000\000\000\000\000\000\000\
    \130\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \130\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \130\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \130\000\130\000\130\000\145\000\000\000\000\000\000\000\130\000\
    \000\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \130\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \130\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \130\000\130\000\130\000\131\000\000\000\000\000\000\000\000\000\
    \000\000\131\000\129\000\000\000\131\000\131\000\131\000\131\000\
    \131\000\131\000\131\000\131\000\131\000\131\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\131\000\131\000\131\000\131\000\
    \131\000\131\000\131\000\131\000\131\000\131\000\131\000\131\000\
    \131\000\131\000\131\000\131\000\131\000\131\000\131\000\131\000\
    \131\000\131\000\131\000\131\000\131\000\131\000\131\000\000\000\
    \000\000\000\000\000\000\131\000\000\000\131\000\131\000\131\000\
    \131\000\131\000\131\000\131\000\131\000\131\000\131\000\131\000\
    \131\000\131\000\131\000\131\000\131\000\131\000\131\000\131\000\
    \131\000\131\000\131\000\131\000\131\000\131\000\131\000\188\000\
    \187\000\187\000\187\000\187\000\187\000\187\000\187\000\187\000\
    \187\000\000\000\000\000\000\000\000\000\000\000\255\255\194\000\
    \194\000\194\000\194\000\194\000\194\000\194\000\194\000\194\000\
    \194\000\198\000\198\000\198\000\198\000\198\000\198\000\198\000\
    \198\000\198\000\198\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\193\000\000\000\000\000\000\000\142\000\
    \201\000\192\000\000\000\196\000\196\000\196\000\196\000\196\000\
    \196\000\196\000\196\000\196\000\196\000\191\000\000\000\000\000\
    \000\000\190\000\000\000\189\000\196\000\196\000\196\000\196\000\
    \196\000\197\000\197\000\197\000\197\000\197\000\197\000\197\000\
    \197\000\197\000\197\000\000\000\000\000\000\000\000\000\195\000\
    \000\000\000\000\197\000\197\000\197\000\197\000\197\000\000\000\
    \000\000\000\000\000\000\000\000\196\000\196\000\196\000\196\000\
    \196\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\197\000\197\000\197\000\197\000\197\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\035\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\035\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\033\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\
    \016\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\005\000\019\000\021\000\023\000\022\000\
    \034\000\005\000\039\000\040\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\022\000\022\000\
    \041\000\042\000\043\000\041\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\045\000\
    \046\000\047\000\049\000\005\000\051\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\044\000\
    \052\000\053\000\054\000\055\000\056\000\057\000\044\000\059\000\
    \006\000\060\000\061\000\062\000\063\000\044\000\006\000\006\000\
    \044\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\065\000\066\000\067\000\069\000\070\000\
    \000\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\071\000\072\000\073\000\074\000\
    \006\000\075\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\007\000\076\000\077\000\078\000\
    \080\000\081\000\007\000\082\000\084\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\085\000\
    \086\000\087\000\088\000\089\000\090\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \091\000\007\000\092\000\094\000\007\000\095\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \027\000\096\000\097\000\098\000\100\000\101\000\027\000\102\000\
    \104\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\105\000\106\000\108\000\113\000\114\000\
    \122\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\125\000\137\000\137\000\162\000\
    \027\000\156\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\132\000\132\000\
    \132\000\132\000\132\000\132\000\132\000\132\000\132\000\132\000\
    \163\000\143\000\147\000\151\000\155\000\028\000\169\000\176\000\
    \159\000\172\000\179\000\028\000\183\000\203\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \143\000\147\000\151\000\155\000\028\000\007\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\204\000\255\255\255\255\159\000\028\000\179\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\167\000\170\000\175\000\177\000\187\000\
    \187\000\187\000\187\000\187\000\187\000\187\000\187\000\187\000\
    \187\000\255\255\255\255\255\255\143\000\147\000\151\000\155\000\
    \255\255\255\255\255\255\255\255\255\255\165\000\148\000\255\255\
    \255\255\167\000\170\000\175\000\177\000\255\255\255\255\255\255\
    \255\255\255\255\030\000\030\000\030\000\030\000\255\255\255\255\
    \030\000\255\255\255\255\165\000\255\255\255\255\148\000\121\000\
    \255\255\030\000\255\255\255\255\030\000\121\000\255\255\030\000\
    \121\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
    \121\000\121\000\156\000\255\255\255\255\255\255\255\255\255\255\
    \121\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
    \121\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
    \121\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
    \121\000\121\000\121\000\255\255\255\255\255\255\255\255\121\000\
    \148\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
    \121\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
    \121\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
    \121\000\121\000\121\000\123\000\255\255\255\255\255\255\255\255\
    \255\255\123\000\255\255\255\255\123\000\123\000\123\000\123\000\
    \123\000\123\000\123\000\123\000\123\000\123\000\159\000\172\000\
    \179\000\255\255\255\255\255\255\123\000\123\000\123\000\123\000\
    \123\000\123\000\123\000\123\000\123\000\123\000\123\000\123\000\
    \123\000\123\000\123\000\123\000\123\000\123\000\123\000\123\000\
    \123\000\123\000\123\000\123\000\123\000\123\000\123\000\255\255\
    \255\255\255\255\255\255\123\000\255\255\123\000\123\000\123\000\
    \123\000\123\000\123\000\123\000\123\000\123\000\123\000\123\000\
    \123\000\123\000\123\000\123\000\123\000\123\000\123\000\123\000\
    \123\000\123\000\123\000\123\000\123\000\123\000\123\000\124\000\
    \255\255\255\255\255\255\255\255\255\255\124\000\255\255\255\255\
    \124\000\124\000\124\000\124\000\124\000\124\000\124\000\124\000\
    \124\000\124\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \124\000\124\000\124\000\124\000\124\000\124\000\124\000\124\000\
    \124\000\124\000\124\000\124\000\124\000\124\000\124\000\124\000\
    \124\000\124\000\124\000\124\000\124\000\124\000\124\000\124\000\
    \124\000\124\000\124\000\165\000\148\000\255\255\255\255\124\000\
    \255\255\124\000\124\000\124\000\124\000\124\000\124\000\124\000\
    \124\000\124\000\124\000\124\000\124\000\124\000\124\000\124\000\
    \124\000\124\000\124\000\124\000\124\000\124\000\124\000\124\000\
    \124\000\124\000\124\000\127\000\255\255\255\255\255\255\255\255\
    \255\255\127\000\255\255\255\255\127\000\127\000\127\000\127\000\
    \127\000\127\000\127\000\127\000\127\000\127\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\127\000\127\000\127\000\127\000\
    \127\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \127\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \127\000\127\000\127\000\127\000\127\000\127\000\127\000\255\255\
    \255\255\255\255\255\255\127\000\255\255\127\000\127\000\127\000\
    \127\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \127\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \127\000\127\000\127\000\127\000\127\000\127\000\127\000\128\000\
    \255\255\255\255\255\255\255\255\255\255\128\000\255\255\255\255\
    \128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\128\000\255\255\255\255\255\255\255\255\128\000\
    \255\255\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\128\000\129\000\255\255\255\255\255\255\255\255\
    \255\255\129\000\255\255\255\255\129\000\129\000\129\000\129\000\
    \129\000\129\000\129\000\129\000\129\000\129\000\255\255\255\255\
    \133\000\255\255\255\255\255\255\129\000\129\000\129\000\129\000\
    \129\000\129\000\129\000\129\000\129\000\129\000\129\000\129\000\
    \129\000\129\000\129\000\129\000\129\000\129\000\129\000\129\000\
    \129\000\129\000\129\000\129\000\129\000\129\000\129\000\255\255\
    \255\255\140\000\199\000\129\000\255\255\129\000\129\000\129\000\
    \129\000\129\000\129\000\129\000\129\000\129\000\129\000\129\000\
    \129\000\129\000\129\000\129\000\129\000\129\000\129\000\129\000\
    \129\000\129\000\129\000\129\000\129\000\129\000\129\000\130\000\
    \199\000\255\255\199\000\255\255\255\255\130\000\140\000\255\255\
    \130\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \130\000\130\000\133\000\133\000\255\255\255\255\255\255\255\255\
    \130\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \130\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \130\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \130\000\130\000\130\000\140\000\255\255\255\255\255\255\130\000\
    \255\255\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \130\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \130\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \130\000\130\000\130\000\131\000\255\255\255\255\255\255\255\255\
    \255\255\131\000\131\000\255\255\131\000\131\000\131\000\131\000\
    \131\000\131\000\131\000\131\000\131\000\131\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\131\000\131\000\131\000\131\000\
    \131\000\131\000\131\000\131\000\131\000\131\000\131\000\131\000\
    \131\000\131\000\131\000\131\000\131\000\131\000\131\000\131\000\
    \131\000\131\000\131\000\131\000\131\000\131\000\131\000\255\255\
    \255\255\255\255\255\255\131\000\255\255\131\000\131\000\131\000\
    \131\000\131\000\131\000\131\000\131\000\131\000\131\000\131\000\
    \131\000\131\000\131\000\131\000\131\000\131\000\131\000\131\000\
    \131\000\131\000\131\000\131\000\131\000\131\000\131\000\185\000\
    \185\000\185\000\185\000\185\000\185\000\185\000\185\000\185\000\
    \185\000\255\255\255\255\255\255\255\255\255\255\133\000\188\000\
    \188\000\188\000\188\000\188\000\188\000\188\000\188\000\188\000\
    \188\000\194\000\194\000\194\000\194\000\194\000\194\000\194\000\
    \194\000\194\000\194\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\185\000\255\255\255\255\255\255\140\000\
    \199\000\185\000\255\255\195\000\195\000\195\000\195\000\195\000\
    \195\000\195\000\195\000\195\000\195\000\185\000\255\255\255\255\
    \255\255\185\000\255\255\185\000\195\000\195\000\195\000\195\000\
    \195\000\196\000\196\000\196\000\196\000\196\000\196\000\196\000\
    \196\000\196\000\196\000\255\255\255\255\255\255\255\255\188\000\
    \255\255\255\255\196\000\196\000\196\000\196\000\196\000\255\255\
    \255\255\255\255\255\255\255\255\195\000\195\000\195\000\195\000\
    \195\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\196\000\196\000\196\000\196\000\196\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\185\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec main lexbuf =
    __ocaml_lex_main_rec lexbuf 0
and __ocaml_lex_main_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 151 "blexer.srcl"
                     ( main lexbuf )
# 632 "lib/blexer.ml"

  | 1 ->
# 152 "blexer.srcl"
                     ( error lexbuf "this is not the end of a comment" )
# 637 "lib/blexer.ml"

  | 2 ->
# 153 "blexer.srcl"
                     ( LPAREN(info lexbuf) )
# 642 "lib/blexer.ml"

  | 3 ->
# 154 "blexer.srcl"
                     ( RPAREN(info lexbuf) )
# 647 "lib/blexer.ml"

  | 4 ->
# 155 "blexer.srcl"
                     ( SEMI(info lexbuf) )
# 652 "lib/blexer.ml"

  | 5 ->
# 156 "blexer.srcl"
                     ( LPAREN(info lexbuf) )
# 657 "lib/blexer.ml"

  | 6 ->
# 157 "blexer.srcl"
                     ( RPAREN(info lexbuf) )
# 662 "lib/blexer.ml"

  | 7 ->
# 158 "blexer.srcl"
                     ( SEMI(info lexbuf) )
# 667 "lib/blexer.ml"

  | 8 ->
# 159 "blexer.srcl"
                     ( GET(info lexbuf) )
# 672 "lib/blexer.ml"

  | 9 ->
# 160 "blexer.srcl"
                     ( PUT(info lexbuf) )
# 677 "lib/blexer.ml"

  | 10 ->
# 161 "blexer.srcl"
                     ( CREATE(info lexbuf) )
# 682 "lib/blexer.ml"

  | 11 ->
# 162 "blexer.srcl"
                     ( CANONIZE(info lexbuf) )
# 687 "lib/blexer.ml"

  | 12 ->
# 163 "blexer.srcl"
                     ( CHOOSE(info lexbuf) )
# 692 "lib/blexer.ml"

  | 13 ->
# 164 "blexer.srcl"
                     ( STYPE(info lexbuf) )
# 697 "lib/blexer.ml"

  | 14 ->
# 165 "blexer.srcl"
                     ( STYPE(info lexbuf) )
# 702 "lib/blexer.ml"

  | 15 ->
# 166 "blexer.srcl"
                     ( ASTYPE(info lexbuf) )
# 707 "lib/blexer.ml"

  | 16 ->
# 167 "blexer.srcl"
                     ( VTYPE(info lexbuf) )
# 712 "lib/blexer.ml"

  | 17 ->
# 168 "blexer.srcl"
                     ( VTYPE(info lexbuf) )
# 717 "lib/blexer.ml"

  | 18 ->
# 169 "blexer.srcl"
                     ( AVTYPE(info lexbuf) )
# 722 "lib/blexer.ml"

  | 19 ->
# 170 "blexer.srcl"
                     ( BIJ(info lexbuf) )
# 727 "lib/blexer.ml"

  | 20 ->
# 171 "blexer.srcl"
                     ( DOT(info lexbuf) )
# 732 "lib/blexer.ml"

  | 21 ->
# 172 "blexer.srcl"
                     ( AMPERSAND(info lexbuf) )
# 737 "lib/blexer.ml"

  | 22 ->
# 173 "blexer.srcl"
                     ( STAR(info lexbuf) )
# 742 "lib/blexer.ml"

  | 23 ->
# 174 "blexer.srcl"
                     ( MINUS(info lexbuf) )
# 747 "lib/blexer.ml"

  | 24 ->
# 175 "blexer.srcl"
                     ( UNDERLINE(info lexbuf) )
# 752 "lib/blexer.ml"

  | 25 ->
# 176 "blexer.srcl"
                     ( DOLLAR(info lexbuf) )
# 757 "lib/blexer.ml"

  | 26 ->
# 177 "blexer.srcl"
                     ( PLUS(info lexbuf) )
# 762 "lib/blexer.ml"

  | 27 ->
# 178 "blexer.srcl"
                     ( BANG(info lexbuf) )
# 767 "lib/blexer.ml"

  | 28 ->
# 179 "blexer.srcl"
                     ( ARROW(info lexbuf) )
# 772 "lib/blexer.ml"

  | 29 ->
# 180 "blexer.srcl"
                     ( EQARROW(info lexbuf) )
# 777 "lib/blexer.ml"

  | 30 ->
# 181 "blexer.srcl"
                     ( DEQARROW(info lexbuf) )
# 782 "lib/blexer.ml"

  | 31 ->
# 182 "blexer.srcl"
                     ( DARROW(info lexbuf) )
# 787 "lib/blexer.ml"

  | 32 ->
# 183 "blexer.srcl"
                     ( BARBAR(info lexbuf) )
# 792 "lib/blexer.ml"

  | 33 ->
# 184 "blexer.srcl"
                     ( BAR(info lexbuf) )
# 797 "lib/blexer.ml"

  | 34 ->
# 185 "blexer.srcl"
                     ( EQUAL(info lexbuf) )
# 802 "lib/blexer.ml"

  | 35 ->
# 186 "blexer.srcl"
                     ( LBRACE(info lexbuf) )
# 807 "lib/blexer.ml"

  | 36 ->
# 187 "blexer.srcl"
                     ( RBRACE(info lexbuf) )
# 812 "lib/blexer.ml"

  | 37 ->
# 188 "blexer.srcl"
                     ( HASH(info lexbuf) )
# 817 "lib/blexer.ml"

  | 38 ->
# 189 "blexer.srcl"
                     ( LLIST(info lexbuf) )
# 822 "lib/blexer.ml"

  | 39 ->
# 190 "blexer.srcl"
                     ( RBRACK(info lexbuf) )
# 827 "lib/blexer.ml"

  | 40 ->
# 191 "blexer.srcl"
                     ( CSET(info lexbuf, cset lexbuf) )
# 832 "lib/blexer.ml"

  | 41 ->
# 192 "blexer.srcl"
                     ( NSET(info lexbuf, cset lexbuf) )
# 837 "lib/blexer.ml"

  | 42 ->
# 193 "blexer.srcl"
                     ( LANGLE(info lexbuf) )
# 842 "lib/blexer.ml"

  | 43 ->
# 194 "blexer.srcl"
                     ( let i1 = info lexbuf in 
                       let i2,s = bare "" lexbuf in 
                       let i = Info.merge_inc i1 i2 in 
                       STR(i,s) )
# 850 "lib/blexer.ml"

  | 44 ->
# 198 "blexer.srcl"
                     ( RANGLE(info lexbuf) )
# 855 "lib/blexer.ml"

  | 45 ->
# 199 "blexer.srcl"
                     ( COMMA(info lexbuf) )
# 860 "lib/blexer.ml"

  | 46 ->
# 200 "blexer.srcl"
                     ( COLONCOLON(info lexbuf) )
# 865 "lib/blexer.ml"

  | 47 ->
# 201 "blexer.srcl"
                     ( COLON(info lexbuf) )
# 870 "lib/blexer.ml"

  | 48 ->
# 202 "blexer.srcl"
                     ( HAT(info lexbuf) )
# 875 "lib/blexer.ml"

  | 49 ->
# 203 "blexer.srcl"
                     ( TILDE(info lexbuf) )
# 880 "lib/blexer.ml"

  | 50 ->
# 204 "blexer.srcl"
                     ( BACKSLASH(info lexbuf) )
# 885 "lib/blexer.ml"

  | 51 ->
# 205 "blexer.srcl"
                     ( QMARK(info lexbuf) )
# 890 "lib/blexer.ml"

  | 52 ->
# 206 "blexer.srcl"
                     ( let i1 = info lexbuf in 
                       let i2,s = string "" lexbuf in 
                       let i = Info.merge_inc i1 i2 in 
                       STR(i,s) )
# 898 "lib/blexer.ml"

  | 53 ->
let
# 211 "blexer.srcl"
                  c
# 904 "lib/blexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 1) in
# 211 "blexer.srcl"
                         ( 
    CHARACTER(info lexbuf,c) 
  )
# 910 "lib/blexer.ml"

  | 54 ->
# 215 "blexer.srcl"
        ( let c = escape [("'","'")] lexbuf in 
          character c lexbuf )
# 916 "lib/blexer.ml"

  | 55 ->
let
# 218 "blexer.srcl"
                                       ident
# 922 "lib/blexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) lexbuf.Lexing.lex_curr_pos in
# 218 "blexer.srcl"
                                              ( 
    TYVARIDENT(info lexbuf, ident)
  )
# 928 "lib/blexer.ml"

  | 56 ->
let
# 221 "blexer.srcl"
                                 ident
# 934 "lib/blexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 221 "blexer.srcl"
                                       ( 
      try let kw = Hashtbl.find keywords ident in
          kw (info lexbuf)
      with Not_found -> 
        if Char.uppercase_ascii ident.[0] = ident.[0] then 
          UIDENT (info lexbuf, ident)
        else 
          LIDENT (info lexbuf, ident) )
# 945 "lib/blexer.ml"

  | 57 ->
let
# 229 "blexer.srcl"
                                                 qident
# 951 "lib/blexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 229 "blexer.srcl"
                                                        (
    QUALIDENT(info lexbuf,qident)
  )
# 957 "lib/blexer.ml"

  | 58 ->
let
# 232 "blexer.srcl"
               integ
# 963 "lib/blexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 232 "blexer.srcl"
                     ( INTEGER(info lexbuf, int_of_string integ) )
# 967 "lib/blexer.ml"

  | 59 ->
let
# 233 "blexer.srcl"
                               flot
# 973 "lib/blexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 234 "blexer.srcl"
                     ( FLOAT(info lexbuf, float_of_string flot) )
# 977 "lib/blexer.ml"

  | 60 ->
# 235 "blexer.srcl"
                     ( newline lexbuf; main lexbuf )
# 982 "lib/blexer.ml"

  | 61 ->
# 236 "blexer.srcl"
                     ( EOF(info lexbuf) )
# 987 "lib/blexer.ml"

  | 62 ->
# 237 "blexer.srcl"
                     ( comment lexbuf; main lexbuf )
# 992 "lib/blexer.ml"

  | 63 ->
# 238 "blexer.srcl"
                     ( error lexbuf "unknown token" )
# 997 "lib/blexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_main_rec lexbuf __ocaml_lex_state

and cset lexbuf =
    __ocaml_lex_cset_rec lexbuf 133
and __ocaml_lex_cset_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 241 "blexer.srcl"
                     ( "\\\\" ^ cset lexbuf )
# 1009 "lib/blexer.ml"

  | 1 ->
# 242 "blexer.srcl"
                     ( "]" ^ cset lexbuf )
# 1014 "lib/blexer.ml"

  | 2 ->
# 243 "blexer.srcl"
                     ( "" )
# 1019 "lib/blexer.ml"

  | 3 ->
# 244 "blexer.srcl"
                     ( newline lexbuf; "\n" ^ cset lexbuf )
# 1024 "lib/blexer.ml"

  | 4 ->
# 245 "blexer.srcl"
                     ( let s = lexeme lexbuf in s ^ cset lexbuf )
# 1029 "lib/blexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_cset_rec lexbuf __ocaml_lex_state

and rx_string acc lexbuf =
    __ocaml_lex_rx_string_rec acc lexbuf 140
and __ocaml_lex_rx_string_rec acc lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 248 "blexer.srcl"
                ( let s = escape [("/","/");("'","'")] lexbuf in 
                  rx_string (acc ^ s) lexbuf )
# 1042 "lib/blexer.ml"

  | 1 ->
# 250 "blexer.srcl"
                ( (info lexbuf,acc) )
# 1047 "lib/blexer.ml"

  | 2 ->
# 252 "blexer.srcl"
                ( newline lexbuf;
                  rx_string (acc ^ "\n") lexbuf )
# 1053 "lib/blexer.ml"

  | 3 ->
# 254 "blexer.srcl"
                ( error lexbuf "unmatched '/'" )
# 1058 "lib/blexer.ml"

  | 4 ->
# 255 "blexer.srcl"
                ( rx_string (acc ^ lexeme lexbuf) lexbuf )
# 1063 "lib/blexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_rx_string_rec acc lexbuf __ocaml_lex_state

and string acc lexbuf =
    __ocaml_lex_string_rec acc lexbuf 148
and __ocaml_lex_string_rec acc lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 258 "blexer.srcl"
                ( let s = escape [("\"","\"");("'","'")] lexbuf in 
                  string (acc ^ s) lexbuf )
# 1076 "lib/blexer.ml"

  | 1 ->
# 260 "blexer.srcl"
                ( (info lexbuf,acc) )
# 1081 "lib/blexer.ml"

  | 2 ->
# 262 "blexer.srcl"
                ( newline lexbuf; 
                  string (acc ^ "\n") lexbuf)
# 1087 "lib/blexer.ml"

  | 3 ->
# 264 "blexer.srcl"
                ( error lexbuf "unmatched '\"'")
# 1092 "lib/blexer.ml"

  | 4 ->
# 265 "blexer.srcl"
                ( string (acc ^ lexeme lexbuf) lexbuf )
# 1097 "lib/blexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_string_rec acc lexbuf __ocaml_lex_state

and character acc lexbuf =
    __ocaml_lex_character_rec acc lexbuf 156
and __ocaml_lex_character_rec acc lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 268 "blexer.srcl"
                ( if String.length acc <> 1 then error lexbuf "unmatched '''"
                  else CHARACTER(info lexbuf,acc.[0]) )
# 1110 "lib/blexer.ml"

  | 1 ->
# 271 "blexer.srcl"
                ( error lexbuf "unmatched '''" )
# 1115 "lib/blexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_character_rec acc lexbuf __ocaml_lex_state

and bare acc lexbuf =
    __ocaml_lex_bare_rec acc lexbuf 159
and __ocaml_lex_bare_rec acc lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 274 "blexer.srcl"
                   ( newline lexbuf; 
                     let s = lexeme lexbuf in 
                     let n = String.length s - 1 in 
                     bare_indent acc n lexbuf )
# 1130 "lib/blexer.ml"

  | 1 ->
# 278 "blexer.srcl"
                   ( (info lexbuf,acc) )
# 1135 "lib/blexer.ml"

  | 2 ->
# 279 "blexer.srcl"
                   ( error lexbuf "unmatched '<<'" )
# 1140 "lib/blexer.ml"

  | 3 ->
# 280 "blexer.srcl"
                   ( bare_raw (acc ^ lexeme lexbuf) lexbuf )
# 1145 "lib/blexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_bare_rec acc lexbuf __ocaml_lex_state

and bare_indent_spaces acc n expected lexbuf =
    __ocaml_lex_bare_indent_spaces_rec acc n expected lexbuf 165
and __ocaml_lex_bare_indent_spaces_rec acc n expected lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 283 "blexer.srcl"
                     ( if expected=0 then 
                         bare_indent (acc ^ lexeme lexbuf) n lexbuf
                       else 
                         bare_indent_spaces acc n (pred expected) lexbuf )
# 1160 "lib/blexer.ml"

  | 1 ->
# 288 "blexer.srcl"
                        ( newline lexbuf;
                          (info lexbuf,acc) )
# 1166 "lib/blexer.ml"

  | 2 ->
# 290 "blexer.srcl"
                     ( newline lexbuf; 
                       bare_indent_spaces (acc ^ lexeme lexbuf) n n lexbuf )
# 1172 "lib/blexer.ml"

  | 3 ->
# 292 "blexer.srcl"
                     ( if expected=0 then 
                         bare_indent (acc ^ lexeme lexbuf) n lexbuf 
                       else
                         error lexbuf (sprintf "expecting %d spaces after newline in string" n) )
# 1180 "lib/blexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_bare_indent_spaces_rec acc n expected lexbuf __ocaml_lex_state

and bare_indent acc n lexbuf =
    __ocaml_lex_bare_indent_rec acc n lexbuf 172
and __ocaml_lex_bare_indent_rec acc n lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 298 "blexer.srcl"
                        ( newline lexbuf; 
                          (info lexbuf,acc) )
# 1193 "lib/blexer.ml"

  | 1 ->
# 300 "blexer.srcl"
                     ( newline lexbuf; 
                       bare_indent_spaces (acc ^ lexeme lexbuf) n n lexbuf )
# 1199 "lib/blexer.ml"

  | 2 ->
# 302 "blexer.srcl"
                     ( error lexbuf "unmatched '>>'" )
# 1204 "lib/blexer.ml"

  | 3 ->
# 303 "blexer.srcl"
                     ( bare_indent (acc ^ lexeme lexbuf) n lexbuf )
# 1209 "lib/blexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_bare_indent_rec acc n lexbuf __ocaml_lex_state

and bare_raw acc lexbuf =
    __ocaml_lex_bare_raw_rec acc lexbuf 179
and __ocaml_lex_bare_raw_rec acc lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 306 "blexer.srcl"
                ( (info lexbuf,acc) )
# 1221 "lib/blexer.ml"

  | 1 ->
# 307 "blexer.srcl"
                ( newline lexbuf; 
                  bare_raw (acc ^ lexeme lexbuf) lexbuf )
# 1227 "lib/blexer.ml"

  | 2 ->
# 309 "blexer.srcl"
                ( error lexbuf "unmatched '<<'" )
# 1232 "lib/blexer.ml"

  | 3 ->
# 310 "blexer.srcl"
                ( bare_raw (acc ^ lexeme lexbuf) lexbuf )
# 1237 "lib/blexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_bare_raw_rec acc lexbuf __ocaml_lex_state

and escape el lexbuf =
    __ocaml_lex_escape_rec el lexbuf 185
and __ocaml_lex_escape_rec el lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 313 "blexer.srcl"
                ( "\\" )
# 1249 "lib/blexer.ml"

  | 1 ->
# 314 "blexer.srcl"
                ( "\008" )
# 1254 "lib/blexer.ml"

  | 2 ->
# 315 "blexer.srcl"
                ( "\010" )
# 1259 "lib/blexer.ml"

  | 3 ->
# 316 "blexer.srcl"
                ( "\013" )
# 1264 "lib/blexer.ml"

  | 4 ->
# 317 "blexer.srcl"
                ( "\009" )
# 1269 "lib/blexer.ml"

  | 5 ->
let
# 318 "blexer.srcl"
                    h1
# 1275 "lib/blexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 2)
and
# 318 "blexer.srcl"
                                     h2
# 1280 "lib/blexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 3) in
# 319 "blexer.srcl"
                ( let int_of_hex = function
                    | '0' -> 0 | '1' -> 1 | '2' -> 2 | '3' -> 3 | '4' -> 4
                    | '5' -> 5 | '6' -> 6 | '7' -> 7 | '8' -> 8 | '9' -> 9
                    | 'A' | 'a' -> 10 | 'B' | 'b' -> 11 | 'C' | 'c' -> 12 
                    | 'D' | 'd' -> 13 | 'E' | 'e' -> 14 | 'F' | 'f' -> 15 
                    | _ -> error lexbuf "in escape sequence" in 
                  String.make 1 (Char.chr (16 * int_of_hex h1 + int_of_hex h2))
                )
# 1291 "lib/blexer.ml"

  | 6 ->
let
# 328 "blexer.srcl"
                                c
# 1297 "lib/blexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 3) in
# 329 "blexer.srcl"
                ( String.make 1 (Char.chr (int_of_string c)) )
# 1301 "lib/blexer.ml"

  | 7 ->
# 330 "blexer.srcl"
                ( try Safelist.assoc (lexeme lexbuf) el 
                  with Not_found -> 
                    error lexbuf "in escape sequence" )
# 1308 "lib/blexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_escape_rec el lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 199
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 335 "blexer.srcl"
                   ( comment lexbuf; comment lexbuf )
# 1320 "lib/blexer.ml"

  | 1 ->
# 336 "blexer.srcl"
                   ( () )
# 1325 "lib/blexer.ml"

  | 2 ->
# 337 "blexer.srcl"
                   ( newline lexbuf; comment lexbuf )
# 1330 "lib/blexer.ml"

  | 3 ->
# 338 "blexer.srcl"
                   ( error lexbuf "unmatched '(*'" )
# 1335 "lib/blexer.ml"

  | 4 ->
# 339 "blexer.srcl"
                   ( comment lexbuf )
# 1340 "lib/blexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

